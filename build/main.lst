                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.2 #15373 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _alarm_arranger_PARM_3
                                     12 	.globl _alarm_arranger_PARM_2
                                     13 	.globl _int_to_str_PARM_2
                                     14 	.globl _main
                                     15 	.globl _configuration
                                     16 	.globl _alarm_triggered
                                     17 	.globl _set_alarms
                                     18 	.globl _set_clock
                                     19 	.globl _ds3232_set_alarm1
                                     20 	.globl _alarm_arranger
                                     21 	.globl _write_alarm_to_eeprom
                                     22 	.globl _read_eeprom
                                     23 	.globl _write_eeprom
                                     24 	.globl _step_motor
                                     25 	.globl _display
                                     26 	.globl _ds3232_get_time_date
                                     27 	.globl _ds3232_set_time_date
                                     28 	.globl _ds3232_init
                                     29 	.globl _bcd_to_dec
                                     30 	.globl _dec_to_bcd
                                     31 	.globl _i2c_read
                                     32 	.globl _i2c_write
                                     33 	.globl _i2c_stop
                                     34 	.globl _i2c_start
                                     35 	.globl _i2c_init
                                     36 	.globl _int_to_str
                                     37 	.globl _lcd_init
                                     38 	.globl _lcd_goto
                                     39 	.globl _lcd_clear
                                     40 	.globl _lcd_string
                                     41 	.globl _lcd_char
                                     42 	.globl _lcd_cmd
                                     43 	.globl _send_nibble
                                     44 	.globl _pulse_enable
                                     45 	.globl _delay_ms
                                     46 	.globl _delay
                                     47 	.globl _POWER_PULSE
                                     48 	.globl _BUZZER
                                     49 	.globl _IN4
                                     50 	.globl _IN3
                                     51 	.globl _IN2
                                     52 	.globl _IN1
                                     53 	.globl _SCL
                                     54 	.globl _SDA
                                     55 	.globl _back
                                     56 	.globl _next
                                     57 	.globl _down
                                     58 	.globl _up
                                     59 	.globl _LCD_D7
                                     60 	.globl _LCD_D6
                                     61 	.globl _LCD_D5
                                     62 	.globl _LCD_D4
                                     63 	.globl _LCD_EN
                                     64 	.globl _LCD_RW
                                     65 	.globl _LCD_RS
                                     66 	.globl _CY
                                     67 	.globl _AC
                                     68 	.globl _F0
                                     69 	.globl _RS1
                                     70 	.globl _RS0
                                     71 	.globl _OV
                                     72 	.globl _FL
                                     73 	.globl _P
                                     74 	.globl _TF2
                                     75 	.globl _EXF2
                                     76 	.globl _RCLK
                                     77 	.globl _TCLK
                                     78 	.globl _EXEN2
                                     79 	.globl _TR2
                                     80 	.globl _C_T2
                                     81 	.globl _CP_RL2
                                     82 	.globl _T2CON_7
                                     83 	.globl _T2CON_6
                                     84 	.globl _T2CON_5
                                     85 	.globl _T2CON_4
                                     86 	.globl _T2CON_3
                                     87 	.globl _T2CON_2
                                     88 	.globl _T2CON_1
                                     89 	.globl _T2CON_0
                                     90 	.globl _PT2
                                     91 	.globl _PS
                                     92 	.globl _PT1
                                     93 	.globl _PX1
                                     94 	.globl _PT0
                                     95 	.globl _PX0
                                     96 	.globl _RD
                                     97 	.globl _WR
                                     98 	.globl _T1
                                     99 	.globl _T0
                                    100 	.globl _INT1
                                    101 	.globl _INT0
                                    102 	.globl _TXD
                                    103 	.globl _RXD
                                    104 	.globl _P3_7
                                    105 	.globl _P3_6
                                    106 	.globl _P3_5
                                    107 	.globl _P3_4
                                    108 	.globl _P3_3
                                    109 	.globl _P3_2
                                    110 	.globl _P3_1
                                    111 	.globl _P3_0
                                    112 	.globl _EA
                                    113 	.globl _ET2
                                    114 	.globl _ES
                                    115 	.globl _ET1
                                    116 	.globl _EX1
                                    117 	.globl _ET0
                                    118 	.globl _EX0
                                    119 	.globl _P2_7
                                    120 	.globl _P2_6
                                    121 	.globl _P2_5
                                    122 	.globl _P2_4
                                    123 	.globl _P2_3
                                    124 	.globl _P2_2
                                    125 	.globl _P2_1
                                    126 	.globl _P2_0
                                    127 	.globl _SM0
                                    128 	.globl _SM1
                                    129 	.globl _SM2
                                    130 	.globl _REN
                                    131 	.globl _TB8
                                    132 	.globl _RB8
                                    133 	.globl _TI
                                    134 	.globl _RI
                                    135 	.globl _T2EX
                                    136 	.globl _T2
                                    137 	.globl _P1_7
                                    138 	.globl _P1_6
                                    139 	.globl _P1_5
                                    140 	.globl _P1_4
                                    141 	.globl _P1_3
                                    142 	.globl _P1_2
                                    143 	.globl _P1_1
                                    144 	.globl _P1_0
                                    145 	.globl _TF1
                                    146 	.globl _TR1
                                    147 	.globl _TF0
                                    148 	.globl _TR0
                                    149 	.globl _IE1
                                    150 	.globl _IT1
                                    151 	.globl _IE0
                                    152 	.globl _IT0
                                    153 	.globl _P0_7
                                    154 	.globl _P0_6
                                    155 	.globl _P0_5
                                    156 	.globl _P0_4
                                    157 	.globl _P0_3
                                    158 	.globl _P0_2
                                    159 	.globl _P0_1
                                    160 	.globl _P0_0
                                    161 	.globl _B
                                    162 	.globl _A
                                    163 	.globl _ACC
                                    164 	.globl _PSW
                                    165 	.globl _TH2
                                    166 	.globl _TL2
                                    167 	.globl _RCAP2H
                                    168 	.globl _RCAP2L
                                    169 	.globl _T2MOD
                                    170 	.globl _T2CON
                                    171 	.globl _IP
                                    172 	.globl _P3
                                    173 	.globl _IE
                                    174 	.globl _P2
                                    175 	.globl _SBUF
                                    176 	.globl _SCON
                                    177 	.globl _P1
                                    178 	.globl _TH1
                                    179 	.globl _TH0
                                    180 	.globl _TL1
                                    181 	.globl _TL0
                                    182 	.globl _TMOD
                                    183 	.globl _TCON
                                    184 	.globl _PCON
                                    185 	.globl _DPH
                                    186 	.globl _DPL
                                    187 	.globl _SP
                                    188 	.globl _P0
                                    189 	.globl _min_vals
                                    190 	.globl _max_vals
                                    191 	.globl _alarm_minutes
                                    192 	.globl _alarm_hours
                                    193 	.globl _ds3232_set_alarm1_PARM_3
                                    194 	.globl _ds3232_set_alarm1_PARM_2
                                    195 	.globl _write_alarm_to_eeprom_PARM_3
                                    196 	.globl _write_alarm_to_eeprom_PARM_2
                                    197 	.globl _write_eeprom_PARM_2
                                    198 	.globl _display_PARM_7
                                    199 	.globl _display_PARM_6
                                    200 	.globl _display_PARM_5
                                    201 	.globl _display_PARM_4
                                    202 	.globl _display_PARM_3
                                    203 	.globl _display_PARM_2
                                    204 	.globl _ds3232_get_time_date_PARM_7
                                    205 	.globl _ds3232_get_time_date_PARM_6
                                    206 	.globl _ds3232_get_time_date_PARM_5
                                    207 	.globl _ds3232_get_time_date_PARM_4
                                    208 	.globl _ds3232_get_time_date_PARM_3
                                    209 	.globl _ds3232_get_time_date_PARM_2
                                    210 	.globl _ds3232_set_time_date_PARM_7
                                    211 	.globl _ds3232_set_time_date_PARM_6
                                    212 	.globl _ds3232_set_time_date_PARM_5
                                    213 	.globl _ds3232_set_time_date_PARM_4
                                    214 	.globl _ds3232_set_time_date_PARM_3
                                    215 	.globl _ds3232_set_time_date_PARM_2
                                    216 	.globl _lcd_goto_PARM_2
                                    217 	.globl _min
                                    218 	.globl _hr
                                    219 	.globl _buf
                                    220 	.globl _date_str
                                    221 	.globl _time_str
                                    222 	.globl _index
                                    223 	.globl _alarm_index
                                    224 	.globl _day
                                    225 	.globl _y
                                    226 	.globl _mo
                                    227 	.globl _d
                                    228 	.globl _s
                                    229 	.globl _m
                                    230 	.globl _h
                                    231 	.globl _idle_counter
                                    232 	.globl _num_alarms
                                    233 	.globl _time_date
                                    234 ;--------------------------------------------------------
                                    235 ; special function registers
                                    236 ;--------------------------------------------------------
                                    237 	.area RSEG    (ABS,DATA)
      000000                        238 	.org 0x0000
                           000080   239 _P0	=	0x0080
                           000081   240 _SP	=	0x0081
                           000082   241 _DPL	=	0x0082
                           000083   242 _DPH	=	0x0083
                           000087   243 _PCON	=	0x0087
                           000088   244 _TCON	=	0x0088
                           000089   245 _TMOD	=	0x0089
                           00008A   246 _TL0	=	0x008a
                           00008B   247 _TL1	=	0x008b
                           00008C   248 _TH0	=	0x008c
                           00008D   249 _TH1	=	0x008d
                           000090   250 _P1	=	0x0090
                           000098   251 _SCON	=	0x0098
                           000099   252 _SBUF	=	0x0099
                           0000A0   253 _P2	=	0x00a0
                           0000A8   254 _IE	=	0x00a8
                           0000B0   255 _P3	=	0x00b0
                           0000B8   256 _IP	=	0x00b8
                           0000C8   257 _T2CON	=	0x00c8
                           0000C9   258 _T2MOD	=	0x00c9
                           0000CA   259 _RCAP2L	=	0x00ca
                           0000CB   260 _RCAP2H	=	0x00cb
                           0000CC   261 _TL2	=	0x00cc
                           0000CD   262 _TH2	=	0x00cd
                           0000D0   263 _PSW	=	0x00d0
                           0000E0   264 _ACC	=	0x00e0
                           0000E0   265 _A	=	0x00e0
                           0000F0   266 _B	=	0x00f0
                                    267 ;--------------------------------------------------------
                                    268 ; special function bits
                                    269 ;--------------------------------------------------------
                                    270 	.area RSEG    (ABS,DATA)
      000000                        271 	.org 0x0000
                           000080   272 _P0_0	=	0x0080
                           000081   273 _P0_1	=	0x0081
                           000082   274 _P0_2	=	0x0082
                           000083   275 _P0_3	=	0x0083
                           000084   276 _P0_4	=	0x0084
                           000085   277 _P0_5	=	0x0085
                           000086   278 _P0_6	=	0x0086
                           000087   279 _P0_7	=	0x0087
                           000088   280 _IT0	=	0x0088
                           000089   281 _IE0	=	0x0089
                           00008A   282 _IT1	=	0x008a
                           00008B   283 _IE1	=	0x008b
                           00008C   284 _TR0	=	0x008c
                           00008D   285 _TF0	=	0x008d
                           00008E   286 _TR1	=	0x008e
                           00008F   287 _TF1	=	0x008f
                           000090   288 _P1_0	=	0x0090
                           000091   289 _P1_1	=	0x0091
                           000092   290 _P1_2	=	0x0092
                           000093   291 _P1_3	=	0x0093
                           000094   292 _P1_4	=	0x0094
                           000095   293 _P1_5	=	0x0095
                           000096   294 _P1_6	=	0x0096
                           000097   295 _P1_7	=	0x0097
                           000090   296 _T2	=	0x0090
                           000091   297 _T2EX	=	0x0091
                           000098   298 _RI	=	0x0098
                           000099   299 _TI	=	0x0099
                           00009A   300 _RB8	=	0x009a
                           00009B   301 _TB8	=	0x009b
                           00009C   302 _REN	=	0x009c
                           00009D   303 _SM2	=	0x009d
                           00009E   304 _SM1	=	0x009e
                           00009F   305 _SM0	=	0x009f
                           0000A0   306 _P2_0	=	0x00a0
                           0000A1   307 _P2_1	=	0x00a1
                           0000A2   308 _P2_2	=	0x00a2
                           0000A3   309 _P2_3	=	0x00a3
                           0000A4   310 _P2_4	=	0x00a4
                           0000A5   311 _P2_5	=	0x00a5
                           0000A6   312 _P2_6	=	0x00a6
                           0000A7   313 _P2_7	=	0x00a7
                           0000A8   314 _EX0	=	0x00a8
                           0000A9   315 _ET0	=	0x00a9
                           0000AA   316 _EX1	=	0x00aa
                           0000AB   317 _ET1	=	0x00ab
                           0000AC   318 _ES	=	0x00ac
                           0000AD   319 _ET2	=	0x00ad
                           0000AF   320 _EA	=	0x00af
                           0000B0   321 _P3_0	=	0x00b0
                           0000B1   322 _P3_1	=	0x00b1
                           0000B2   323 _P3_2	=	0x00b2
                           0000B3   324 _P3_3	=	0x00b3
                           0000B4   325 _P3_4	=	0x00b4
                           0000B5   326 _P3_5	=	0x00b5
                           0000B6   327 _P3_6	=	0x00b6
                           0000B7   328 _P3_7	=	0x00b7
                           0000B0   329 _RXD	=	0x00b0
                           0000B1   330 _TXD	=	0x00b1
                           0000B2   331 _INT0	=	0x00b2
                           0000B3   332 _INT1	=	0x00b3
                           0000B4   333 _T0	=	0x00b4
                           0000B5   334 _T1	=	0x00b5
                           0000B6   335 _WR	=	0x00b6
                           0000B7   336 _RD	=	0x00b7
                           0000B8   337 _PX0	=	0x00b8
                           0000B9   338 _PT0	=	0x00b9
                           0000BA   339 _PX1	=	0x00ba
                           0000BB   340 _PT1	=	0x00bb
                           0000BC   341 _PS	=	0x00bc
                           0000BD   342 _PT2	=	0x00bd
                           0000C8   343 _T2CON_0	=	0x00c8
                           0000C9   344 _T2CON_1	=	0x00c9
                           0000CA   345 _T2CON_2	=	0x00ca
                           0000CB   346 _T2CON_3	=	0x00cb
                           0000CC   347 _T2CON_4	=	0x00cc
                           0000CD   348 _T2CON_5	=	0x00cd
                           0000CE   349 _T2CON_6	=	0x00ce
                           0000CF   350 _T2CON_7	=	0x00cf
                           0000C8   351 _CP_RL2	=	0x00c8
                           0000C9   352 _C_T2	=	0x00c9
                           0000CA   353 _TR2	=	0x00ca
                           0000CB   354 _EXEN2	=	0x00cb
                           0000CC   355 _TCLK	=	0x00cc
                           0000CD   356 _RCLK	=	0x00cd
                           0000CE   357 _EXF2	=	0x00ce
                           0000CF   358 _TF2	=	0x00cf
                           0000D0   359 _P	=	0x00d0
                           0000D1   360 _FL	=	0x00d1
                           0000D2   361 _OV	=	0x00d2
                           0000D3   362 _RS0	=	0x00d3
                           0000D4   363 _RS1	=	0x00d4
                           0000D5   364 _F0	=	0x00d5
                           0000D6   365 _AC	=	0x00d6
                           0000D7   366 _CY	=	0x00d7
                           000090   367 _LCD_RS	=	0x0090
                           000091   368 _LCD_RW	=	0x0091
                           000092   369 _LCD_EN	=	0x0092
                           000093   370 _LCD_D4	=	0x0093
                           000094   371 _LCD_D5	=	0x0094
                           000095   372 _LCD_D6	=	0x0095
                           000096   373 _LCD_D7	=	0x0096
                           0000B4   374 _up	=	0x00b4
                           0000B5   375 _down	=	0x00b5
                           0000B6   376 _next	=	0x00b6
                           0000B7   377 _back	=	0x00b7
                           0000B1   378 _SDA	=	0x00b1
                           0000B0   379 _SCL	=	0x00b0
                           0000A4   380 _IN1	=	0x00a4
                           0000A3   381 _IN2	=	0x00a3
                           0000A2   382 _IN3	=	0x00a2
                           0000A1   383 _IN4	=	0x00a1
                           0000A0   384 _BUZZER	=	0x00a0
                           0000A7   385 _POWER_PULSE	=	0x00a7
                                    386 ;--------------------------------------------------------
                                    387 ; overlayable register banks
                                    388 ;--------------------------------------------------------
                                    389 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        390 	.ds 8
                                    391 ;--------------------------------------------------------
                                    392 ; overlayable bit register bank
                                    393 ;--------------------------------------------------------
                                    394 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        395 bits:
      000000                        396 	.ds 1
                           008000   397 	b0 = bits[0]
                           008100   398 	b1 = bits[1]
                           008200   399 	b2 = bits[2]
                           008300   400 	b3 = bits[3]
                           008400   401 	b4 = bits[4]
                           008500   402 	b5 = bits[5]
                           008600   403 	b6 = bits[6]
                           008700   404 	b7 = bits[7]
                                    405 ;--------------------------------------------------------
                                    406 ; internal ram data
                                    407 ;--------------------------------------------------------
                                    408 	.area DSEG    (DATA)
      000000                        409 _time_date::
      000000                        410 	.ds 7
      000007                        411 _num_alarms::
      000007                        412 	.ds 1
      000008                        413 _idle_counter::
      000008                        414 	.ds 2
      00000A                        415 _h::
      00000A                        416 	.ds 1
      00000B                        417 _m::
      00000B                        418 	.ds 1
      00000C                        419 _s::
      00000C                        420 	.ds 1
      00000D                        421 _d::
      00000D                        422 	.ds 1
      00000E                        423 _mo::
      00000E                        424 	.ds 1
      00000F                        425 _y::
      00000F                        426 	.ds 1
      000010                        427 _day::
      000010                        428 	.ds 1
      000011                        429 _alarm_index::
      000011                        430 	.ds 2
      000013                        431 _index::
      000013                        432 	.ds 2
      000015                        433 _time_str::
      000015                        434 	.ds 9
      00001E                        435 _date_str::
      00001E                        436 	.ds 13
      00002B                        437 _buf::
      00002B                        438 	.ds 3
      00002E                        439 _hr::
      00002E                        440 	.ds 1
      00002F                        441 _min::
      00002F                        442 	.ds 1
      000030                        443 _lcd_goto_PARM_2:
      000030                        444 	.ds 1
      000031                        445 _ds3232_set_time_date_PARM_2:
      000031                        446 	.ds 1
      000032                        447 _ds3232_set_time_date_PARM_3:
      000032                        448 	.ds 1
      000033                        449 _ds3232_set_time_date_PARM_4:
      000033                        450 	.ds 1
      000034                        451 _ds3232_set_time_date_PARM_5:
      000034                        452 	.ds 1
      000035                        453 _ds3232_set_time_date_PARM_6:
      000035                        454 	.ds 1
      000036                        455 _ds3232_set_time_date_PARM_7:
      000036                        456 	.ds 1
      000037                        457 _ds3232_get_time_date_PARM_2:
      000037                        458 	.ds 3
      00003A                        459 _ds3232_get_time_date_PARM_3:
      00003A                        460 	.ds 3
      00003D                        461 _ds3232_get_time_date_PARM_4:
      00003D                        462 	.ds 3
      000040                        463 _ds3232_get_time_date_PARM_5:
      000040                        464 	.ds 3
      000043                        465 _ds3232_get_time_date_PARM_6:
      000043                        466 	.ds 3
      000046                        467 _ds3232_get_time_date_PARM_7:
      000046                        468 	.ds 3
      000049                        469 _display_PARM_2:
      000049                        470 	.ds 1
      00004A                        471 _display_PARM_3:
      00004A                        472 	.ds 1
      00004B                        473 _display_PARM_4:
      00004B                        474 	.ds 1
      00004C                        475 _display_PARM_5:
      00004C                        476 	.ds 1
      00004D                        477 _display_PARM_6:
      00004D                        478 	.ds 1
      00004E                        479 _display_PARM_7:
      00004E                        480 	.ds 1
      00004F                        481 _write_eeprom_PARM_2:
      00004F                        482 	.ds 1
      000050                        483 _write_alarm_to_eeprom_PARM_2:
      000050                        484 	.ds 1
      000051                        485 _write_alarm_to_eeprom_PARM_3:
      000051                        486 	.ds 1
      000052                        487 _ds3232_set_alarm1_PARM_2:
      000052                        488 	.ds 1
      000053                        489 _ds3232_set_alarm1_PARM_3:
      000053                        490 	.ds 1
      000054                        491 _set_alarms_total_mins_10002_135:
      000054                        492 	.ds 2
      000056                        493 _set_alarms_total_mins1_50002_140:
      000056                        494 	.ds 2
      000058                        495 _set_alarms_sloc0_1_0:
      000058                        496 	.ds 2
      00005A                        497 _main_checker_10001_169:
      00005A                        498 	.ds 4
                                    499 ;--------------------------------------------------------
                                    500 ; overlayable items in internal ram
                                    501 ;--------------------------------------------------------
                                    502 	.area	OSEG    (OVR,DATA)
                                    503 	.area	OSEG    (OVR,DATA)
                                    504 	.area	OSEG    (OVR,DATA)
      000000                        505 _int_to_str_PARM_2:
      000000                        506 	.ds 3
                                    507 	.area	OSEG    (OVR,DATA)
                                    508 	.area	OSEG    (OVR,DATA)
                                    509 	.area	OSEG    (OVR,DATA)
      000000                        510 _alarm_arranger_PARM_2:
      000000                        511 	.ds 3
      000003                        512 _alarm_arranger_PARM_3:
      000003                        513 	.ds 3
      000006                        514 _alarm_arranger_hours_10000_63:
      000006                        515 	.ds 3
      000009                        516 _alarm_arranger_i_10000_64:
      000009                        517 	.ds 1
      00000A                        518 _alarm_arranger_min_idx_10000_64:
      00000A                        519 	.ds 1
      00000B                        520 _alarm_arranger_temp_30001_71:
      00000B                        521 	.ds 2
      00000D                        522 _alarm_arranger___index_10001_72:
      00000D                        523 	.ds 2
      00000F                        524 _alarm_arranger_sloc0_1_0:
      00000F                        525 	.ds 1
      000010                        526 _alarm_arranger_sloc1_1_0:
      000010                        527 	.ds 3
                                    528 ;--------------------------------------------------------
                                    529 ; Stack segment in internal ram
                                    530 ;--------------------------------------------------------
                                    531 	.area SSEG
      000000                        532 __start__stack:
      000000                        533 	.ds	1
                                    534 
                                    535 ;--------------------------------------------------------
                                    536 ; indirectly addressable internal ram data
                                    537 ;--------------------------------------------------------
                                    538 	.area ISEG    (DATA)
      000000                        539 _alarm_hours::
      000000                        540 	.ds 8
      000008                        541 _alarm_minutes::
      000008                        542 	.ds 8
      000010                        543 _max_vals::
      000010                        544 	.ds 7
      000017                        545 _min_vals::
      000017                        546 	.ds 7
                                    547 ;--------------------------------------------------------
                                    548 ; absolute internal ram data
                                    549 ;--------------------------------------------------------
                                    550 	.area IABS    (ABS,DATA)
                                    551 	.area IABS    (ABS,DATA)
                                    552 ;--------------------------------------------------------
                                    553 ; bit data
                                    554 ;--------------------------------------------------------
                                    555 	.area BSEG    (BIT)
      000000                        556 _i2c_write_ack_10000_29:
      000000                        557 	.ds 1
      000001                        558 _i2c_read_sloc0_1_0:
      000001                        559 	.ds 1
                                    560 ;--------------------------------------------------------
                                    561 ; paged external ram data
                                    562 ;--------------------------------------------------------
                                    563 	.area PSEG    (PAG,XDATA)
                                    564 ;--------------------------------------------------------
                                    565 ; uninitialized external ram data
                                    566 ;--------------------------------------------------------
                                    567 	.area XSEG    (XDATA)
                                    568 ;--------------------------------------------------------
                                    569 ; absolute external ram data
                                    570 ;--------------------------------------------------------
                                    571 	.area XABS    (ABS,XDATA)
                                    572 ;--------------------------------------------------------
                                    573 ; initialized external ram data
                                    574 ;--------------------------------------------------------
                                    575 	.area XISEG   (XDATA)
                                    576 	.area HOME    (CODE)
                                    577 	.area GSINIT0 (CODE)
                                    578 	.area GSINIT1 (CODE)
                                    579 	.area GSINIT2 (CODE)
                                    580 	.area GSINIT3 (CODE)
                                    581 	.area GSINIT4 (CODE)
                                    582 	.area GSINIT5 (CODE)
                                    583 	.area GSINIT  (CODE)
                                    584 	.area GSFINAL (CODE)
                                    585 	.area CSEG    (CODE)
                                    586 ;--------------------------------------------------------
                                    587 ; interrupt vector
                                    588 ;--------------------------------------------------------
                                    589 	.area HOME    (CODE)
      000000                        590 __interrupt_vect:
      000000 02r00r00         [24]  591 	ljmp	__sdcc_gsinit_startup
      000003 02r0FrC4         [24]  592 	ljmp	_alarm_triggered
      000006                        593 	.ds	5
      00000B 32               [24]  594 	reti
      00000C                        595 	.ds	7
      000013 02r10rED         [24]  596 	ljmp	_configuration
                                    597 ; restartable atomic support routines
      000016                        598 	.ds	2
      000018                        599 sdcc_atomic_exchange_rollback_start::
      000018 00               [12]  600 	nop
      000019 00               [12]  601 	nop
      00001A                        602 sdcc_atomic_exchange_pdata_impl:
      00001A E2               [24]  603 	movx	a, @r0
      00001B FB               [12]  604 	mov	r3, a
      00001C EA               [12]  605 	mov	a, r2
      00001D F2               [24]  606 	movx	@r0, a
      00001E 80 2C            [24]  607 	sjmp	sdcc_atomic_exchange_exit
      000020 00               [12]  608 	nop
      000021 00               [12]  609 	nop
      000022                        610 sdcc_atomic_exchange_xdata_impl:
      000022 E0               [24]  611 	movx	a, @dptr
      000023 FB               [12]  612 	mov	r3, a
      000024 EA               [12]  613 	mov	a, r2
      000025 F0               [24]  614 	movx	@dptr, a
      000026 80 24            [24]  615 	sjmp	sdcc_atomic_exchange_exit
      000028                        616 sdcc_atomic_compare_exchange_idata_impl:
      000028 E6               [12]  617 	mov	a, @r0
      000029 B5 02 02         [24]  618 	cjne	a, ar2, .+#5
      00002C EB               [12]  619 	mov	a, r3
      00002D F6               [12]  620 	mov	@r0, a
      00002E 22               [24]  621 	ret
      00002F 00               [12]  622 	nop
      000030                        623 sdcc_atomic_compare_exchange_pdata_impl:
      000030 E2               [24]  624 	movx	a, @r0
      000031 B5 02 02         [24]  625 	cjne	a, ar2, .+#5
      000034 EB               [12]  626 	mov	a, r3
      000035 F2               [24]  627 	movx	@r0, a
      000036 22               [24]  628 	ret
      000037 00               [12]  629 	nop
      000038                        630 sdcc_atomic_compare_exchange_xdata_impl:
      000038 E0               [24]  631 	movx	a, @dptr
      000039 B5 02 02         [24]  632 	cjne	a, ar2, .+#5
      00003C EB               [12]  633 	mov	a, r3
      00003D F0               [24]  634 	movx	@dptr, a
      00003E 22               [24]  635 	ret
      00003F                        636 sdcc_atomic_exchange_rollback_end::
                                    637 
      00003F                        638 sdcc_atomic_exchange_gptr_impl::
      00003F 30 F6 E0         [24]  639 	jnb	b.6, sdcc_atomic_exchange_xdata_impl
      000042 A8 82            [24]  640 	mov	r0, dpl
      000044 20 F5 D3         [24]  641 	jb	b.5, sdcc_atomic_exchange_pdata_impl
      000047                        642 sdcc_atomic_exchange_idata_impl:
      000047 EA               [12]  643 	mov	a, r2
      000048 C6               [12]  644 	xch	a, @r0
      000049 F5 82            [12]  645 	mov	dpl, a
      00004B 22               [24]  646 	ret
      00004C                        647 sdcc_atomic_exchange_exit:
      00004C 8B 82            [24]  648 	mov	dpl, r3
      00004E 22               [24]  649 	ret
      00004F                        650 sdcc_atomic_compare_exchange_gptr_impl::
      00004F 30 F6 E6         [24]  651 	jnb	b.6, sdcc_atomic_compare_exchange_xdata_impl
      000052 A8 82            [24]  652 	mov	r0, dpl
      000054 20 F5 D9         [24]  653 	jb	b.5, sdcc_atomic_compare_exchange_pdata_impl
      000057 80 CF            [24]  654 	sjmp	sdcc_atomic_compare_exchange_idata_impl
                                    655 ;--------------------------------------------------------
                                    656 ; global & static initialisations
                                    657 ;--------------------------------------------------------
                                    658 	.area HOME    (CODE)
                                    659 	.area GSINIT  (CODE)
                                    660 	.area GSFINAL (CODE)
                                    661 	.area GSINIT  (CODE)
                                    662 	.globl __sdcc_gsinit_startup
                                    663 	.globl __sdcc_program_startup
                                    664 	.globl __start__stack
                                    665 	.globl __mcs51_genXINIT
                                    666 	.globl __mcs51_genXRAMCLEAR
                                    667 	.globl __mcs51_genRAMCLEAR
                                    668 ;	main.c:19: unsigned char time_date[7] = {0,0,0,0,1,1,25};  //starting time
      000000 75*00 00         [24]  669 	mov	_time_date,#0x00
      000003 75*01 00         [24]  670 	mov	(_time_date + 0x0001),#0x00
      000006 75*02 00         [24]  671 	mov	(_time_date + 0x0002),#0x00
      000009 75*03 00         [24]  672 	mov	(_time_date + 0x0003),#0x00
      00000C 75*04 01         [24]  673 	mov	(_time_date + 0x0004),#0x01
      00000F 75*05 01         [24]  674 	mov	(_time_date + 0x0005),#0x01
      000012 75*06 19         [24]  675 	mov	(_time_date + 0x0006),#0x19
                                    676 ;	main.c:21: unsigned char num_alarms = 1;
      000015 75*07 01         [24]  677 	mov	_num_alarms,#0x01
                                    678 ;	main.c:22: unsigned int idle_counter = 0;
      000018 E4               [12]  679 	clr	a
      000019 F5*08            [12]  680 	mov	_idle_counter,a
      00001B F5*09            [12]  681 	mov	(_idle_counter + 1),a
                                    682 ;	main.c:25: const unsigned char __idata max_vals[] = {24, 60, 60, 7, 31, 12, 100};
      00001D 78r10            [12]  683 	mov	r0,#_max_vals
      00001F 76 18            [12]  684 	mov	@r0,#0x18
      000021 78r11            [12]  685 	mov	r0,#(_max_vals + 0x0001)
      000023 76 3C            [12]  686 	mov	@r0,#0x3c
      000025 78r12            [12]  687 	mov	r0,#(_max_vals + 0x0002)
      000027 76 3C            [12]  688 	mov	@r0,#0x3c
      000029 78r13            [12]  689 	mov	r0,#(_max_vals + 0x0003)
      00002B 76 07            [12]  690 	mov	@r0,#0x07
      00002D 78r14            [12]  691 	mov	r0,#(_max_vals + 0x0004)
      00002F 76 1F            [12]  692 	mov	@r0,#0x1f
      000031 78r15            [12]  693 	mov	r0,#(_max_vals + 0x0005)
      000033 76 0C            [12]  694 	mov	@r0,#0x0c
      000035 78r16            [12]  695 	mov	r0,#(_max_vals + 0x0006)
      000037 76 64            [12]  696 	mov	@r0,#0x64
                                    697 ;	main.c:26: const unsigned char __idata min_vals[] = {0, 0, 0, 0, 1, 1, 0};
      000039 78r17            [12]  698 	mov	r0,#_min_vals
      00003B 76 00            [12]  699 	mov	@r0,#0x00
      00003D 78r18            [12]  700 	mov	r0,#(_min_vals + 0x0001)
      00003F 76 00            [12]  701 	mov	@r0,#0x00
      000041 78r19            [12]  702 	mov	r0,#(_min_vals + 0x0002)
      000043 76 00            [12]  703 	mov	@r0,#0x00
      000045 78r1A            [12]  704 	mov	r0,#(_min_vals + 0x0003)
      000047 76 00            [12]  705 	mov	@r0,#0x00
      000049 78r1B            [12]  706 	mov	r0,#(_min_vals + 0x0004)
      00004B 76 01            [12]  707 	mov	@r0,#0x01
      00004D 78r1C            [12]  708 	mov	r0,#(_min_vals + 0x0005)
      00004F 76 01            [12]  709 	mov	@r0,#0x01
      000051 78r1D            [12]  710 	mov	r0,#(_min_vals + 0x0006)
      000053 76 00            [12]  711 	mov	@r0,#0x00
                                    712 	.area GSFINAL (CODE)
      000000 02r00r59         [24]  713 	ljmp	__sdcc_program_startup
                                    714 ;--------------------------------------------------------
                                    715 ; Home
                                    716 ;--------------------------------------------------------
                                    717 	.area HOME    (CODE)
                                    718 	.area HOME    (CODE)
      000059                        719 __sdcc_program_startup:
      000059 02r12r8A         [24]  720 	ljmp	_main
                                    721 ;	return from main will return to caller
                                    722 ;--------------------------------------------------------
                                    723 ; code
                                    724 ;--------------------------------------------------------
                                    725 	.area CSEG    (CODE)
                                    726 ;------------------------------------------------------------
                                    727 ;Allocation info for local variables in function 'delay'
                                    728 ;------------------------------------------------------------
                                    729 ;cycles        Allocated to registers r6 r7 
                                    730 ;i             Allocated to registers r4 r5 
                                    731 ;j             Allocated to registers r2 r3 
                                    732 ;------------------------------------------------------------
                                    733 ;	main.c:65: void delay(unsigned int cycles) {
                                    734 ;	-----------------------------------------
                                    735 ;	 function delay
                                    736 ;	-----------------------------------------
      000000                        737 _delay:
                           000007   738 	ar7 = 0x07
                           000006   739 	ar6 = 0x06
                           000005   740 	ar5 = 0x05
                           000004   741 	ar4 = 0x04
                           000003   742 	ar3 = 0x03
                           000002   743 	ar2 = 0x02
                           000001   744 	ar1 = 0x01
                           000000   745 	ar0 = 0x00
      000000 AE 82            [24]  746 	mov	r6, dpl
      000002 AF 83            [24]  747 	mov	r7, dph
                                    748 ;	main.c:67: for(i = 0; i < cycles; i++)
      000004 7C 00            [12]  749 	mov	r4,#0x00
      000006 7D 00            [12]  750 	mov	r5,#0x00
      000008                        751 00107$:
      000008 C3               [12]  752 	clr	c
      000009 EC               [12]  753 	mov	a,r4
      00000A 9E               [12]  754 	subb	a,r6
      00000B ED               [12]  755 	mov	a,r5
      00000C 9F               [12]  756 	subb	a,r7
      00000D 50 14            [24]  757 	jnc	00109$
                                    758 ;	main.c:68: for(j = 0; j < 5; j++);
      00000F 7A 05            [12]  759 	mov	r2,#0x05
      000011 7B 00            [12]  760 	mov	r3,#0x00
      000013                        761 00105$:
      000013 1A               [12]  762 	dec	r2
      000014 BA FF 01         [24]  763 	cjne	r2,#0xff,00138$
      000017 1B               [12]  764 	dec	r3
      000018                        765 00138$:
      000018 EA               [12]  766 	mov	a,r2
      000019 4B               [12]  767 	orl	a,r3
      00001A 70 F7            [24]  768 	jnz	00105$
                                    769 ;	main.c:67: for(i = 0; i < cycles; i++)
      00001C 0C               [12]  770 	inc	r4
      00001D BC 00 E8         [24]  771 	cjne	r4,#0x00,00107$
      000020 0D               [12]  772 	inc	r5
      000021 80 E5            [24]  773 	sjmp	00107$
      000023                        774 00109$:
                                    775 ;	main.c:69: }
      000023 22               [24]  776 	ret
                                    777 ;------------------------------------------------------------
                                    778 ;Allocation info for local variables in function 'delay_ms'
                                    779 ;------------------------------------------------------------
                                    780 ;ms            Allocated to registers r6 r7 
                                    781 ;i             Allocated to registers r4 r5 
                                    782 ;j             Allocated to registers r2 r3 
                                    783 ;------------------------------------------------------------
                                    784 ;	main.c:71: void delay_ms(unsigned int ms) {
                                    785 ;	-----------------------------------------
                                    786 ;	 function delay_ms
                                    787 ;	-----------------------------------------
      000024                        788 _delay_ms:
      000024 AE 82            [24]  789 	mov	r6, dpl
      000026 AF 83            [24]  790 	mov	r7, dph
                                    791 ;	main.c:73: for(i=0; i<ms; i++)
      000028 7C 00            [12]  792 	mov	r4,#0x00
      00002A 7D 00            [12]  793 	mov	r5,#0x00
      00002C                        794 00107$:
      00002C C3               [12]  795 	clr	c
      00002D EC               [12]  796 	mov	a,r4
      00002E 9E               [12]  797 	subb	a,r6
      00002F ED               [12]  798 	mov	a,r5
      000030 9F               [12]  799 	subb	a,r7
      000031 50 14            [24]  800 	jnc	00109$
                                    801 ;	main.c:74: for(j=0; j<1275; j++);
      000033 7A FB            [12]  802 	mov	r2,#0xfb
      000035 7B 04            [12]  803 	mov	r3,#0x04
      000037                        804 00105$:
      000037 1A               [12]  805 	dec	r2
      000038 BA FF 01         [24]  806 	cjne	r2,#0xff,00138$
      00003B 1B               [12]  807 	dec	r3
      00003C                        808 00138$:
      00003C EA               [12]  809 	mov	a,r2
      00003D 4B               [12]  810 	orl	a,r3
      00003E 70 F7            [24]  811 	jnz	00105$
                                    812 ;	main.c:73: for(i=0; i<ms; i++)
      000040 0C               [12]  813 	inc	r4
      000041 BC 00 E8         [24]  814 	cjne	r4,#0x00,00107$
      000044 0D               [12]  815 	inc	r5
      000045 80 E5            [24]  816 	sjmp	00107$
      000047                        817 00109$:
                                    818 ;	main.c:75: }
      000047 22               [24]  819 	ret
                                    820 ;------------------------------------------------------------
                                    821 ;Allocation info for local variables in function 'pulse_enable'
                                    822 ;------------------------------------------------------------
                                    823 ;	main.c:77: void pulse_enable() {
                                    824 ;	-----------------------------------------
                                    825 ;	 function pulse_enable
                                    826 ;	-----------------------------------------
      000048                        827 _pulse_enable:
                                    828 ;	main.c:78: LCD_EN = 1;
                                    829 ;	assignBit
      000048 D2 92            [12]  830 	setb	_LCD_EN
                                    831 ;	main.c:79: delay(50);
      00004A 90 00 32         [24]  832 	mov	dptr,#0x0032
      00004D 12r00r00         [24]  833 	lcall	_delay
                                    834 ;	main.c:80: LCD_EN = 0;
                                    835 ;	assignBit
      000050 C2 92            [12]  836 	clr	_LCD_EN
                                    837 ;	main.c:81: delay(50);
      000052 90 00 32         [24]  838 	mov	dptr,#0x0032
                                    839 ;	main.c:82: }
      000055 02r00r00         [24]  840 	ljmp	_delay
                                    841 ;------------------------------------------------------------
                                    842 ;Allocation info for local variables in function 'send_nibble'
                                    843 ;------------------------------------------------------------
                                    844 ;nibble        Allocated to registers r7 
                                    845 ;------------------------------------------------------------
                                    846 ;	main.c:84: void send_nibble(unsigned char nibble) {
                                    847 ;	-----------------------------------------
                                    848 ;	 function send_nibble
                                    849 ;	-----------------------------------------
      000058                        850 _send_nibble:
                                    851 ;	main.c:85: LCD_D4 = (nibble >> 0) & 1;
      000058 E5 82            [12]  852 	mov	a,dpl
      00005A FF               [12]  853 	mov	r7,a
      00005B 54 01            [12]  854 	anl	a,#0x01
                                    855 ;	assignBit
      00005D 24 FF            [12]  856 	add	a,#0xff
      00005F 92 93            [24]  857 	mov	_LCD_D4,c
                                    858 ;	main.c:86: LCD_D5 = (nibble >> 1) & 1;
      000061 EF               [12]  859 	mov	a,r7
      000062 03               [12]  860 	rr	a
      000063 54 01            [12]  861 	anl	a,#0x01
                                    862 ;	assignBit
      000065 24 FF            [12]  863 	add	a,#0xff
      000067 92 94            [24]  864 	mov	_LCD_D5,c
                                    865 ;	main.c:87: LCD_D6 = (nibble >> 2) & 1;
      000069 EF               [12]  866 	mov	a,r7
      00006A 03               [12]  867 	rr	a
      00006B 03               [12]  868 	rr	a
      00006C 54 01            [12]  869 	anl	a,#0x01
                                    870 ;	assignBit
      00006E 24 FF            [12]  871 	add	a,#0xff
      000070 92 95            [24]  872 	mov	_LCD_D6,c
                                    873 ;	main.c:88: LCD_D7 = (nibble >> 3) & 1;
      000072 EF               [12]  874 	mov	a,r7
      000073 A2 E3            [12]  875 	mov	c,acc.3
      000075 E4               [12]  876 	clr	a
      000076 33               [12]  877 	rlc	a
                                    878 ;	assignBit
      000077 24 FF            [12]  879 	add	a,#0xff
      000079 92 96            [24]  880 	mov	_LCD_D7,c
                                    881 ;	main.c:89: pulse_enable();
                                    882 ;	main.c:90: }
      00007B 02r00r48         [24]  883 	ljmp	_pulse_enable
                                    884 ;------------------------------------------------------------
                                    885 ;Allocation info for local variables in function 'lcd_cmd'
                                    886 ;------------------------------------------------------------
                                    887 ;cmd           Allocated to registers r7 
                                    888 ;------------------------------------------------------------
                                    889 ;	main.c:92: void lcd_cmd(unsigned char cmd) {
                                    890 ;	-----------------------------------------
                                    891 ;	 function lcd_cmd
                                    892 ;	-----------------------------------------
      00007E                        893 _lcd_cmd:
      00007E AF 82            [24]  894 	mov	r7, dpl
                                    895 ;	main.c:93: LCD_RS = 0;
                                    896 ;	assignBit
      000080 C2 90            [12]  897 	clr	_LCD_RS
                                    898 ;	main.c:94: LCD_RW = 0;
                                    899 ;	assignBit
      000082 C2 91            [12]  900 	clr	_LCD_RW
                                    901 ;	main.c:95: send_nibble(cmd >> 4);
      000084 EF               [12]  902 	mov	a,r7
      000085 C4               [12]  903 	swap	a
      000086 54 0F            [12]  904 	anl	a,#0x0f
      000088 F5 82            [12]  905 	mov	dpl,a
      00008A C0 07            [24]  906 	push	ar7
      00008C 12r00r58         [24]  907 	lcall	_send_nibble
      00008F D0 07            [24]  908 	pop	ar7
                                    909 ;	main.c:96: send_nibble(cmd & 0x0F);
      000091 74 0F            [12]  910 	mov	a,#0x0f
      000093 5F               [12]  911 	anl	a,r7
      000094 F5 82            [12]  912 	mov	dpl,a
      000096 12r00r58         [24]  913 	lcall	_send_nibble
                                    914 ;	main.c:97: delay(50);
      000099 90 00 32         [24]  915 	mov	dptr,#0x0032
                                    916 ;	main.c:98: }
      00009C 02r00r00         [24]  917 	ljmp	_delay
                                    918 ;------------------------------------------------------------
                                    919 ;Allocation info for local variables in function 'lcd_char'
                                    920 ;------------------------------------------------------------
                                    921 ;ch            Allocated to registers r7 
                                    922 ;------------------------------------------------------------
                                    923 ;	main.c:100: void lcd_char(unsigned char ch) {
                                    924 ;	-----------------------------------------
                                    925 ;	 function lcd_char
                                    926 ;	-----------------------------------------
      00009F                        927 _lcd_char:
      00009F AF 82            [24]  928 	mov	r7, dpl
                                    929 ;	main.c:101: LCD_RS = 1;
                                    930 ;	assignBit
      0000A1 D2 90            [12]  931 	setb	_LCD_RS
                                    932 ;	main.c:102: LCD_RW = 0;
                                    933 ;	assignBit
      0000A3 C2 91            [12]  934 	clr	_LCD_RW
                                    935 ;	main.c:103: send_nibble(ch >> 4);
      0000A5 EF               [12]  936 	mov	a,r7
      0000A6 C4               [12]  937 	swap	a
      0000A7 54 0F            [12]  938 	anl	a,#0x0f
      0000A9 F5 82            [12]  939 	mov	dpl,a
      0000AB C0 07            [24]  940 	push	ar7
      0000AD 12r00r58         [24]  941 	lcall	_send_nibble
      0000B0 D0 07            [24]  942 	pop	ar7
                                    943 ;	main.c:104: send_nibble(ch & 0x0F);
      0000B2 74 0F            [12]  944 	mov	a,#0x0f
      0000B4 5F               [12]  945 	anl	a,r7
      0000B5 F5 82            [12]  946 	mov	dpl,a
      0000B7 12r00r58         [24]  947 	lcall	_send_nibble
                                    948 ;	main.c:105: delay(50);
      0000BA 90 00 32         [24]  949 	mov	dptr,#0x0032
                                    950 ;	main.c:106: }
      0000BD 02r00r00         [24]  951 	ljmp	_delay
                                    952 ;------------------------------------------------------------
                                    953 ;Allocation info for local variables in function 'lcd_string'
                                    954 ;------------------------------------------------------------
                                    955 ;str           Allocated to registers 
                                    956 ;------------------------------------------------------------
                                    957 ;	main.c:108: void lcd_string(char *str) {
                                    958 ;	-----------------------------------------
                                    959 ;	 function lcd_string
                                    960 ;	-----------------------------------------
      0000C0                        961 _lcd_string:
      0000C0 AD 82            [24]  962 	mov	r5, dpl
      0000C2 AE 83            [24]  963 	mov	r6, dph
      0000C4 AF F0            [24]  964 	mov	r7, b
                                    965 ;	main.c:109: while(*str) {
      0000C6                        966 00101$:
      0000C6 8D 82            [24]  967 	mov	dpl,r5
      0000C8 8E 83            [24]  968 	mov	dph,r6
      0000CA 8F F0            [24]  969 	mov	b,r7
      0000CC 12r00r00         [24]  970 	lcall	__gptrget
      0000CF FC               [12]  971 	mov	r4,a
      0000D0 60 18            [24]  972 	jz	00104$
                                    973 ;	main.c:110: lcd_char(*str++);
      0000D2 8C 82            [24]  974 	mov	dpl,r4
      0000D4 0D               [12]  975 	inc	r5
      0000D5 BD 00 01         [24]  976 	cjne	r5,#0x00,00120$
      0000D8 0E               [12]  977 	inc	r6
      0000D9                        978 00120$:
      0000D9 C0 07            [24]  979 	push	ar7
      0000DB C0 06            [24]  980 	push	ar6
      0000DD C0 05            [24]  981 	push	ar5
      0000DF 12r00r9F         [24]  982 	lcall	_lcd_char
      0000E2 D0 05            [24]  983 	pop	ar5
      0000E4 D0 06            [24]  984 	pop	ar6
      0000E6 D0 07            [24]  985 	pop	ar7
      0000E8 80 DC            [24]  986 	sjmp	00101$
      0000EA                        987 00104$:
                                    988 ;	main.c:112: }
      0000EA 22               [24]  989 	ret
                                    990 ;------------------------------------------------------------
                                    991 ;Allocation info for local variables in function 'lcd_clear'
                                    992 ;------------------------------------------------------------
                                    993 ;	main.c:114: void lcd_clear() {
                                    994 ;	-----------------------------------------
                                    995 ;	 function lcd_clear
                                    996 ;	-----------------------------------------
      0000EB                        997 _lcd_clear:
                                    998 ;	main.c:115: lcd_cmd(0x01);
      0000EB 75 82 01         [24]  999 	mov	dpl, #0x01
      0000EE 12r00r7E         [24] 1000 	lcall	_lcd_cmd
                                   1001 ;	main.c:116: delay(50);
      0000F1 90 00 32         [24] 1002 	mov	dptr,#0x0032
                                   1003 ;	main.c:117: }
      0000F4 02r00r00         [24] 1004 	ljmp	_delay
                                   1005 ;------------------------------------------------------------
                                   1006 ;Allocation info for local variables in function 'lcd_goto'
                                   1007 ;------------------------------------------------------------
                                   1008 ;col           Allocated with name '_lcd_goto_PARM_2'
                                   1009 ;row           Allocated to registers r7 
                                   1010 ;address       Allocated to registers 
                                   1011 ;------------------------------------------------------------
                                   1012 ;	main.c:119: void lcd_goto(unsigned char row, unsigned char col) {
                                   1013 ;	-----------------------------------------
                                   1014 ;	 function lcd_goto
                                   1015 ;	-----------------------------------------
      0000F7                       1016 _lcd_goto:
                                   1017 ;	main.c:120: unsigned char address = (row == 0) ? (0x80 + col) : (0xC0 + col);
      0000F7 E5 82            [12] 1018 	mov	a,dpl
      0000F9 70 08            [24] 1019 	jnz	00103$
      0000FB AF*30            [24] 1020 	mov	r7,_lcd_goto_PARM_2
      0000FD 74 80            [12] 1021 	mov	a,#0x80
      0000FF 2F               [12] 1022 	add	a, r7
      000100 FF               [12] 1023 	mov	r7,a
      000101 80 06            [24] 1024 	sjmp	00104$
      000103                       1025 00103$:
      000103 AE*30            [24] 1026 	mov	r6,_lcd_goto_PARM_2
      000105 74 C0            [12] 1027 	mov	a,#0xc0
      000107 2E               [12] 1028 	add	a, r6
      000108 FF               [12] 1029 	mov	r7,a
      000109                       1030 00104$:
      000109 8F 82            [24] 1031 	mov	dpl,r7
                                   1032 ;	main.c:121: lcd_cmd(address);
                                   1033 ;	main.c:122: }
      00010B 02r00r7E         [24] 1034 	ljmp	_lcd_cmd
                                   1035 ;------------------------------------------------------------
                                   1036 ;Allocation info for local variables in function 'lcd_init'
                                   1037 ;------------------------------------------------------------
                                   1038 ;	main.c:124: void lcd_init() {
                                   1039 ;	-----------------------------------------
                                   1040 ;	 function lcd_init
                                   1041 ;	-----------------------------------------
      00010E                       1042 _lcd_init:
                                   1043 ;	main.c:125: LCD_RS = 0;
                                   1044 ;	assignBit
      00010E C2 90            [12] 1045 	clr	_LCD_RS
                                   1046 ;	main.c:126: LCD_RW = 0;
                                   1047 ;	assignBit
      000110 C2 91            [12] 1048 	clr	_LCD_RW
                                   1049 ;	main.c:127: LCD_EN = 0;
                                   1050 ;	assignBit
      000112 C2 92            [12] 1051 	clr	_LCD_EN
                                   1052 ;	main.c:129: delay(20);
      000114 90 00 14         [24] 1053 	mov	dptr,#0x0014
      000117 12r00r00         [24] 1054 	lcall	_delay
                                   1055 ;	main.c:131: send_nibble(0x03);
      00011A 75 82 03         [24] 1056 	mov	dpl, #0x03
      00011D 12r00r58         [24] 1057 	lcall	_send_nibble
                                   1058 ;	main.c:132: delay(5);
      000120 90 00 05         [24] 1059 	mov	dptr,#0x0005
      000123 12r00r00         [24] 1060 	lcall	_delay
                                   1061 ;	main.c:133: send_nibble(0x03);
      000126 75 82 03         [24] 1062 	mov	dpl, #0x03
      000129 12r00r58         [24] 1063 	lcall	_send_nibble
                                   1064 ;	main.c:134: delay(5);
      00012C 90 00 05         [24] 1065 	mov	dptr,#0x0005
      00012F 12r00r00         [24] 1066 	lcall	_delay
                                   1067 ;	main.c:135: send_nibble(0x03);
      000132 75 82 03         [24] 1068 	mov	dpl, #0x03
      000135 12r00r58         [24] 1069 	lcall	_send_nibble
                                   1070 ;	main.c:136: delay(5);
      000138 90 00 05         [24] 1071 	mov	dptr,#0x0005
      00013B 12r00r00         [24] 1072 	lcall	_delay
                                   1073 ;	main.c:137: send_nibble(0x02);
      00013E 75 82 02         [24] 1074 	mov	dpl, #0x02
      000141 12r00r58         [24] 1075 	lcall	_send_nibble
                                   1076 ;	main.c:139: lcd_cmd(0x28);
      000144 75 82 28         [24] 1077 	mov	dpl, #0x28
      000147 12r00r7E         [24] 1078 	lcall	_lcd_cmd
                                   1079 ;	main.c:140: lcd_cmd(0x0C);
      00014A 75 82 0C         [24] 1080 	mov	dpl, #0x0c
      00014D 12r00r7E         [24] 1081 	lcall	_lcd_cmd
                                   1082 ;	main.c:141: lcd_cmd(0x06);
      000150 75 82 06         [24] 1083 	mov	dpl, #0x06
      000153 12r00r7E         [24] 1084 	lcall	_lcd_cmd
                                   1085 ;	main.c:142: lcd_cmd(0x01);
      000156 75 82 01         [24] 1086 	mov	dpl, #0x01
      000159 12r00r7E         [24] 1087 	lcall	_lcd_cmd
                                   1088 ;	main.c:143: delay(2);
      00015C 90 00 02         [24] 1089 	mov	dptr,#0x0002
                                   1090 ;	main.c:144: }
      00015F 02r00r00         [24] 1091 	ljmp	_delay
                                   1092 ;------------------------------------------------------------
                                   1093 ;Allocation info for local variables in function 'int_to_str'
                                   1094 ;------------------------------------------------------------
                                   1095 ;str           Allocated with name '_int_to_str_PARM_2'
                                   1096 ;val           Allocated to registers r7 
                                   1097 ;------------------------------------------------------------
                                   1098 ;	main.c:146: void int_to_str(unsigned char val, char *str) {
                                   1099 ;	-----------------------------------------
                                   1100 ;	 function int_to_str
                                   1101 ;	-----------------------------------------
      000162                       1102 _int_to_str:
      000162 AF 82            [24] 1103 	mov	r7, dpl
                                   1104 ;	main.c:147: str[0] = (val / 10) + '0';
      000164 AC*00            [24] 1105 	mov	r4,_int_to_str_PARM_2
      000166 AD*01            [24] 1106 	mov	r5,(_int_to_str_PARM_2 + 1)
      000168 AE*02            [24] 1107 	mov	r6,(_int_to_str_PARM_2 + 2)
      00016A 8F 03            [24] 1108 	mov	ar3,r7
      00016C 75 F0 0A         [24] 1109 	mov	b,#0x0a
      00016F EB               [12] 1110 	mov	a,r3
      000170 84               [48] 1111 	div	ab
      000171 24 30            [12] 1112 	add	a,#0x30
      000173 8C 82            [24] 1113 	mov	dpl,r4
      000175 8D 83            [24] 1114 	mov	dph,r5
      000177 8E F0            [24] 1115 	mov	b,r6
      000179 12r00r00         [24] 1116 	lcall	__gptrput
                                   1117 ;	main.c:148: str[1] = (val % 10) + '0';
      00017C 74 01            [12] 1118 	mov	a,#0x01
      00017E 2C               [12] 1119 	add	a, r4
      00017F F9               [12] 1120 	mov	r1,a
      000180 E4               [12] 1121 	clr	a
      000181 3D               [12] 1122 	addc	a, r5
      000182 FA               [12] 1123 	mov	r2,a
      000183 8E 03            [24] 1124 	mov	ar3,r6
      000185 75 F0 0A         [24] 1125 	mov	b,#0x0a
      000188 EF               [12] 1126 	mov	a,r7
      000189 84               [48] 1127 	div	ab
      00018A AF F0            [24] 1128 	mov	r7,b
      00018C 74 30            [12] 1129 	mov	a,#0x30
      00018E 2F               [12] 1130 	add	a, r7
      00018F 89 82            [24] 1131 	mov	dpl,r1
      000191 8A 83            [24] 1132 	mov	dph,r2
      000193 8B F0            [24] 1133 	mov	b,r3
      000195 12r00r00         [24] 1134 	lcall	__gptrput
                                   1135 ;	main.c:149: str[2] = '\0';
      000198 74 02            [12] 1136 	mov	a,#0x02
      00019A 2C               [12] 1137 	add	a, r4
      00019B FC               [12] 1138 	mov	r4,a
      00019C E4               [12] 1139 	clr	a
      00019D 3D               [12] 1140 	addc	a, r5
      00019E FD               [12] 1141 	mov	r5,a
      00019F 8C 82            [24] 1142 	mov	dpl,r4
      0001A1 8D 83            [24] 1143 	mov	dph,r5
      0001A3 8E F0            [24] 1144 	mov	b,r6
      0001A5 E4               [12] 1145 	clr	a
                                   1146 ;	main.c:150: }
      0001A6 02r00r00         [24] 1147 	ljmp	__gptrput
                                   1148 ;------------------------------------------------------------
                                   1149 ;Allocation info for local variables in function 'i2c_init'
                                   1150 ;------------------------------------------------------------
                                   1151 ;	main.c:152: void i2c_init() {
                                   1152 ;	-----------------------------------------
                                   1153 ;	 function i2c_init
                                   1154 ;	-----------------------------------------
      0001A9                       1155 _i2c_init:
                                   1156 ;	main.c:153: SDA = 1;
                                   1157 ;	assignBit
      0001A9 D2 B1            [12] 1158 	setb	_SDA
                                   1159 ;	main.c:154: SCL = 1;
                                   1160 ;	assignBit
      0001AB D2 B0            [12] 1161 	setb	_SCL
                                   1162 ;	main.c:155: delay(1);
      0001AD 90 00 01         [24] 1163 	mov	dptr,#0x0001
                                   1164 ;	main.c:156: }
      0001B0 02r00r00         [24] 1165 	ljmp	_delay
                                   1166 ;------------------------------------------------------------
                                   1167 ;Allocation info for local variables in function 'i2c_start'
                                   1168 ;------------------------------------------------------------
                                   1169 ;	main.c:158: void i2c_start() {
                                   1170 ;	-----------------------------------------
                                   1171 ;	 function i2c_start
                                   1172 ;	-----------------------------------------
      0001B3                       1173 _i2c_start:
                                   1174 ;	main.c:159: SDA = 1;
                                   1175 ;	assignBit
      0001B3 D2 B1            [12] 1176 	setb	_SDA
                                   1177 ;	main.c:160: SCL = 1;
                                   1178 ;	assignBit
      0001B5 D2 B0            [12] 1179 	setb	_SCL
                                   1180 ;	main.c:161: delay(1);
      0001B7 90 00 01         [24] 1181 	mov	dptr,#0x0001
      0001BA 12r00r00         [24] 1182 	lcall	_delay
                                   1183 ;	main.c:162: SDA = 0;
                                   1184 ;	assignBit
      0001BD C2 B1            [12] 1185 	clr	_SDA
                                   1186 ;	main.c:163: delay(1);
      0001BF 90 00 01         [24] 1187 	mov	dptr,#0x0001
      0001C2 12r00r00         [24] 1188 	lcall	_delay
                                   1189 ;	main.c:164: SCL = 0;
                                   1190 ;	assignBit
      0001C5 C2 B0            [12] 1191 	clr	_SCL
                                   1192 ;	main.c:165: }
      0001C7 22               [24] 1193 	ret
                                   1194 ;------------------------------------------------------------
                                   1195 ;Allocation info for local variables in function 'i2c_stop'
                                   1196 ;------------------------------------------------------------
                                   1197 ;	main.c:167: void i2c_stop() {
                                   1198 ;	-----------------------------------------
                                   1199 ;	 function i2c_stop
                                   1200 ;	-----------------------------------------
      0001C8                       1201 _i2c_stop:
                                   1202 ;	main.c:168: SDA = 0;
                                   1203 ;	assignBit
      0001C8 C2 B1            [12] 1204 	clr	_SDA
                                   1205 ;	main.c:169: SCL = 1;
                                   1206 ;	assignBit
      0001CA D2 B0            [12] 1207 	setb	_SCL
                                   1208 ;	main.c:170: delay(1);
      0001CC 90 00 01         [24] 1209 	mov	dptr,#0x0001
      0001CF 12r00r00         [24] 1210 	lcall	_delay
                                   1211 ;	main.c:171: SDA = 1;
                                   1212 ;	assignBit
      0001D2 D2 B1            [12] 1213 	setb	_SDA
                                   1214 ;	main.c:172: delay(1);
      0001D4 90 00 01         [24] 1215 	mov	dptr,#0x0001
                                   1216 ;	main.c:173: }
      0001D7 02r00r00         [24] 1217 	ljmp	_delay
                                   1218 ;------------------------------------------------------------
                                   1219 ;Allocation info for local variables in function 'i2c_write'
                                   1220 ;------------------------------------------------------------
                                   1221 ;value         Allocated to registers r7 
                                   1222 ;i             Allocated to registers r6 
                                   1223 ;------------------------------------------------------------
                                   1224 ;	main.c:175: __bit i2c_write(unsigned char value) {
                                   1225 ;	-----------------------------------------
                                   1226 ;	 function i2c_write
                                   1227 ;	-----------------------------------------
      0001DA                       1228 _i2c_write:
      0001DA AF 82            [24] 1229 	mov	r7, dpl
                                   1230 ;	main.c:179: for (i = 0; i < 8; i++) {
      0001DC 7E 00            [12] 1231 	mov	r6,#0x00
      0001DE                       1232 00102$:
                                   1233 ;	main.c:180: SDA = (value & 0x80) ? 1 : 0;
      0001DE 8F 05            [24] 1234 	mov	ar5,r7
      0001E0 53 05 80         [24] 1235 	anl	ar5,#0x80
                                   1236 ;	assignBit
      0001E3 ED               [12] 1237 	mov	a,r5
      0001E4 24 FF            [12] 1238 	add	a,#0xff
      0001E6 92 B1            [24] 1239 	mov	_SDA,c
                                   1240 ;	main.c:181: SCL = 1;
                                   1241 ;	assignBit
      0001E8 D2 B0            [12] 1242 	setb	_SCL
                                   1243 ;	main.c:182: delay(1);
      0001EA 90 00 01         [24] 1244 	mov	dptr,#0x0001
      0001ED C0 07            [24] 1245 	push	ar7
      0001EF C0 06            [24] 1246 	push	ar6
      0001F1 12r00r00         [24] 1247 	lcall	_delay
      0001F4 D0 06            [24] 1248 	pop	ar6
      0001F6 D0 07            [24] 1249 	pop	ar7
                                   1250 ;	main.c:183: SCL = 0;
                                   1251 ;	assignBit
      0001F8 C2 B0            [12] 1252 	clr	_SCL
                                   1253 ;	main.c:184: value <<= 1;
      0001FA EF               [12] 1254 	mov	a,r7
      0001FB 2F               [12] 1255 	add	a,r7
      0001FC FF               [12] 1256 	mov	r7,a
                                   1257 ;	main.c:179: for (i = 0; i < 8; i++) {
      0001FD 0E               [12] 1258 	inc	r6
      0001FE BE 08 00         [24] 1259 	cjne	r6,#0x08,00119$
      000201                       1260 00119$:
      000201 40 DB            [24] 1261 	jc	00102$
                                   1262 ;	main.c:187: SDA = 1;
                                   1263 ;	assignBit
      000203 D2 B1            [12] 1264 	setb	_SDA
                                   1265 ;	main.c:188: SCL = 1;
                                   1266 ;	assignBit
      000205 D2 B0            [12] 1267 	setb	_SCL
                                   1268 ;	main.c:189: delay(1);
      000207 90 00 01         [24] 1269 	mov	dptr,#0x0001
      00020A 12r00r00         [24] 1270 	lcall	_delay
                                   1271 ;	main.c:190: ack = SDA;
                                   1272 ;	assignBit
      00020D A2 B1            [12] 1273 	mov	c,_SDA
      00020F 92*00            [24] 1274 	mov	_i2c_write_ack_10000_29,c
                                   1275 ;	main.c:191: SCL = 0;
                                   1276 ;	assignBit
      000211 C2 B0            [12] 1277 	clr	_SCL
                                   1278 ;	main.c:192: return !ack;
      000213 A2*00            [12] 1279 	mov	c,_i2c_write_ack_10000_29
      000215 B3               [12] 1280 	cpl	c
                                   1281 ;	main.c:193: }
      000216 22               [24] 1282 	ret
                                   1283 ;------------------------------------------------------------
                                   1284 ;Allocation info for local variables in function 'i2c_read'
                                   1285 ;------------------------------------------------------------
                                   1286 ;ack           Allocated to registers r7 
                                   1287 ;i             Allocated to registers r5 
                                   1288 ;value         Allocated to registers r6 
                                   1289 ;------------------------------------------------------------
                                   1290 ;	main.c:195: unsigned char i2c_read(unsigned char ack) {
                                   1291 ;	-----------------------------------------
                                   1292 ;	 function i2c_read
                                   1293 ;	-----------------------------------------
      000217                       1294 _i2c_read:
      000217 AF 82            [24] 1295 	mov	r7, dpl
                                   1296 ;	main.c:196: unsigned char i, value = 0;
      000219 7E 00            [12] 1297 	mov	r6,#0x00
                                   1298 ;	main.c:198: SDA = 1;
                                   1299 ;	assignBit
      00021B D2 B1            [12] 1300 	setb	_SDA
                                   1301 ;	main.c:200: for (i = 0; i < 8; i++) {
      00021D 7D 00            [12] 1302 	mov	r5,#0x00
      00021F                       1303 00104$:
                                   1304 ;	main.c:201: value <<= 1;
      00021F EE               [12] 1305 	mov	a,r6
      000220 2E               [12] 1306 	add	a,r6
      000221 FE               [12] 1307 	mov	r6,a
                                   1308 ;	main.c:202: SCL = 1;
                                   1309 ;	assignBit
      000222 D2 B0            [12] 1310 	setb	_SCL
                                   1311 ;	main.c:203: delay(1);
      000224 90 00 01         [24] 1312 	mov	dptr,#0x0001
      000227 C0 07            [24] 1313 	push	ar7
      000229 C0 06            [24] 1314 	push	ar6
      00022B C0 05            [24] 1315 	push	ar5
      00022D 12r00r00         [24] 1316 	lcall	_delay
      000230 D0 05            [24] 1317 	pop	ar5
      000232 D0 06            [24] 1318 	pop	ar6
      000234 D0 07            [24] 1319 	pop	ar7
                                   1320 ;	main.c:204: if (SDA)
      000236 30 B1 03         [24] 1321 	jnb	_SDA,00102$
                                   1322 ;	main.c:205: value |= 1;
      000239 43 06 01         [24] 1323 	orl	ar6,#0x01
      00023C                       1324 00102$:
                                   1325 ;	main.c:206: SCL = 0;
                                   1326 ;	assignBit
      00023C C2 B0            [12] 1327 	clr	_SCL
                                   1328 ;	main.c:207: delay(1);
      00023E 90 00 01         [24] 1329 	mov	dptr,#0x0001
      000241 C0 07            [24] 1330 	push	ar7
      000243 C0 06            [24] 1331 	push	ar6
      000245 C0 05            [24] 1332 	push	ar5
      000247 12r00r00         [24] 1333 	lcall	_delay
      00024A D0 05            [24] 1334 	pop	ar5
      00024C D0 06            [24] 1335 	pop	ar6
      00024E D0 07            [24] 1336 	pop	ar7
                                   1337 ;	main.c:200: for (i = 0; i < 8; i++) {
      000250 0D               [12] 1338 	inc	r5
      000251 BD 08 00         [24] 1339 	cjne	r5,#0x08,00128$
      000254                       1340 00128$:
      000254 40 C9            [24] 1341 	jc	00104$
                                   1342 ;	main.c:210: SDA = (ack) ? 0 : 1;
      000256 EF               [12] 1343 	mov	a,r7
      000257 B4 01 00         [24] 1344 	cjne	a,#0x01,00130$
      00025A                       1345 00130$:
      00025A 92*01            [24] 1346 	mov  _i2c_read_sloc0_1_0,c
      00025C E4               [12] 1347 	clr	a
      00025D 33               [12] 1348 	rlc	a
      00025E 24 FF            [12] 1349 	add	a,#0xff
      000260 92 B1            [24] 1350 	mov	_SDA,c
                                   1351 ;	main.c:211: SCL = 1;
                                   1352 ;	assignBit
      000262 D2 B0            [12] 1353 	setb	_SCL
                                   1354 ;	main.c:212: delay(1);
      000264 90 00 01         [24] 1355 	mov	dptr,#0x0001
      000267 C0 06            [24] 1356 	push	ar6
      000269 12r00r00         [24] 1357 	lcall	_delay
      00026C D0 06            [24] 1358 	pop	ar6
                                   1359 ;	main.c:213: SCL = 0;
                                   1360 ;	assignBit
      00026E C2 B0            [12] 1361 	clr	_SCL
                                   1362 ;	main.c:214: SDA = 1;
                                   1363 ;	assignBit
      000270 D2 B1            [12] 1364 	setb	_SDA
                                   1365 ;	main.c:215: return value;
      000272 8E 82            [24] 1366 	mov	dpl, r6
                                   1367 ;	main.c:216: }
      000274 22               [24] 1368 	ret
                                   1369 ;------------------------------------------------------------
                                   1370 ;Allocation info for local variables in function 'dec_to_bcd'
                                   1371 ;------------------------------------------------------------
                                   1372 ;val           Allocated to registers r7 
                                   1373 ;------------------------------------------------------------
                                   1374 ;	main.c:218: unsigned char dec_to_bcd(unsigned char val) {
                                   1375 ;	-----------------------------------------
                                   1376 ;	 function dec_to_bcd
                                   1377 ;	-----------------------------------------
      000275                       1378 _dec_to_bcd:
      000275 AF 82            [24] 1379 	mov	r7, dpl
                                   1380 ;	main.c:219: return ((val / 10) << 4) | (val % 10);
      000277 8F 06            [24] 1381 	mov	ar6,r7
      000279 75 F0 0A         [24] 1382 	mov	b,#0x0a
      00027C EE               [12] 1383 	mov	a,r6
      00027D 84               [48] 1384 	div	ab
      00027E C4               [12] 1385 	swap	a
      00027F 54 F0            [12] 1386 	anl	a,#0xf0
      000281 FE               [12] 1387 	mov	r6,a
      000282 75 F0 0A         [24] 1388 	mov	b,#0x0a
      000285 EF               [12] 1389 	mov	a,r7
      000286 84               [48] 1390 	div	ab
      000287 E5 F0            [12] 1391 	mov	a,b
      000289 4E               [12] 1392 	orl	a,r6
      00028A F5 82            [12] 1393 	mov	dpl,a
                                   1394 ;	main.c:220: }
      00028C 22               [24] 1395 	ret
                                   1396 ;------------------------------------------------------------
                                   1397 ;Allocation info for local variables in function 'bcd_to_dec'
                                   1398 ;------------------------------------------------------------
                                   1399 ;val           Allocated to registers r7 
                                   1400 ;------------------------------------------------------------
                                   1401 ;	main.c:222: unsigned char bcd_to_dec(unsigned char val) {
                                   1402 ;	-----------------------------------------
                                   1403 ;	 function bcd_to_dec
                                   1404 ;	-----------------------------------------
      00028D                       1405 _bcd_to_dec:
                                   1406 ;	main.c:223: return ((val >> 4) * 10) + (val & 0x0F);
      00028D E5 82            [12] 1407 	mov	a,dpl
      00028F FF               [12] 1408 	mov	r7,a
      000290 C4               [12] 1409 	swap	a
      000291 54 0F            [12] 1410 	anl	a,#0x0f
      000293 75 F0 0A         [24] 1411 	mov	b,#0x0a
      000296 A4               [48] 1412 	mul	ab
      000297 FE               [12] 1413 	mov	r6,a
      000298 74 0F            [12] 1414 	mov	a,#0x0f
      00029A 5F               [12] 1415 	anl	a,r7
      00029B 2E               [12] 1416 	add	a, r6
      00029C F5 82            [12] 1417 	mov	dpl,a
                                   1418 ;	main.c:224: }
      00029E 22               [24] 1419 	ret
                                   1420 ;------------------------------------------------------------
                                   1421 ;Allocation info for local variables in function 'ds3232_init'
                                   1422 ;------------------------------------------------------------
                                   1423 ;	main.c:226: void ds3232_init(void) {
                                   1424 ;	-----------------------------------------
                                   1425 ;	 function ds3232_init
                                   1426 ;	-----------------------------------------
      00029F                       1427 _ds3232_init:
                                   1428 ;	main.c:227: i2c_start();
      00029F 12r01rB3         [24] 1429 	lcall	_i2c_start
                                   1430 ;	main.c:228: i2c_write((DS3232_ADDRESS << 1) | 0); // Write mode
      0002A2 75 82 D0         [24] 1431 	mov	dpl, #0xd0
      0002A5 12r01rDA         [24] 1432 	lcall	_i2c_write
                                   1433 ;	main.c:229: i2c_write(0x00); // Point to seconds register
      0002A8 75 82 00         [24] 1434 	mov	dpl, #0x00
      0002AB 12r01rDA         [24] 1435 	lcall	_i2c_write
                                   1436 ;	main.c:230: i2c_write(0x00); // Start oscillator (CH = 0)
      0002AE 75 82 00         [24] 1437 	mov	dpl, #0x00
      0002B1 12r01rDA         [24] 1438 	lcall	_i2c_write
                                   1439 ;	main.c:231: i2c_stop();
                                   1440 ;	main.c:232: }
      0002B4 02r01rC8         [24] 1441 	ljmp	_i2c_stop
                                   1442 ;------------------------------------------------------------
                                   1443 ;Allocation info for local variables in function 'ds3232_set_time_date'
                                   1444 ;------------------------------------------------------------
                                   1445 ;min           Allocated with name '_ds3232_set_time_date_PARM_2'
                                   1446 ;sec           Allocated with name '_ds3232_set_time_date_PARM_3'
                                   1447 ;day           Allocated with name '_ds3232_set_time_date_PARM_4'
                                   1448 ;date          Allocated with name '_ds3232_set_time_date_PARM_5'
                                   1449 ;month         Allocated with name '_ds3232_set_time_date_PARM_6'
                                   1450 ;year          Allocated with name '_ds3232_set_time_date_PARM_7'
                                   1451 ;hrs           Allocated to registers r7 
                                   1452 ;------------------------------------------------------------
                                   1453 ;	main.c:234: void ds3232_set_time_date(unsigned char hrs, unsigned char min, unsigned char sec, unsigned char day, unsigned char date, unsigned char month, unsigned char year) {
                                   1454 ;	-----------------------------------------
                                   1455 ;	 function ds3232_set_time_date
                                   1456 ;	-----------------------------------------
      0002B7                       1457 _ds3232_set_time_date:
      0002B7 AF 82            [24] 1458 	mov	r7, dpl
                                   1459 ;	main.c:235: i2c_start();
      0002B9 C0 07            [24] 1460 	push	ar7
      0002BB 12r01rB3         [24] 1461 	lcall	_i2c_start
                                   1462 ;	main.c:236: i2c_write((DS3232_ADDRESS << 1) | 0);
      0002BE 75 82 D0         [24] 1463 	mov	dpl, #0xd0
      0002C1 12r01rDA         [24] 1464 	lcall	_i2c_write
                                   1465 ;	main.c:237: i2c_write(0x00);
      0002C4 75 82 00         [24] 1466 	mov	dpl, #0x00
      0002C7 12r01rDA         [24] 1467 	lcall	_i2c_write
                                   1468 ;	main.c:238: i2c_write(dec_to_bcd(sec));
      0002CA 85*32 82         [24] 1469 	mov	dpl, _ds3232_set_time_date_PARM_3
      0002CD 12r02r75         [24] 1470 	lcall	_dec_to_bcd
      0002D0 12r01rDA         [24] 1471 	lcall	_i2c_write
                                   1472 ;	main.c:239: i2c_write(dec_to_bcd(min));
      0002D3 85*31 82         [24] 1473 	mov	dpl, _ds3232_set_time_date_PARM_2
      0002D6 12r02r75         [24] 1474 	lcall	_dec_to_bcd
      0002D9 12r01rDA         [24] 1475 	lcall	_i2c_write
      0002DC D0 07            [24] 1476 	pop	ar7
                                   1477 ;	main.c:240: i2c_write(dec_to_bcd(hrs));
      0002DE 8F 82            [24] 1478 	mov	dpl, r7
      0002E0 12r02r75         [24] 1479 	lcall	_dec_to_bcd
      0002E3 12r01rDA         [24] 1480 	lcall	_i2c_write
                                   1481 ;	main.c:241: i2c_write(dec_to_bcd(day));
      0002E6 85*33 82         [24] 1482 	mov	dpl, _ds3232_set_time_date_PARM_4
      0002E9 12r02r75         [24] 1483 	lcall	_dec_to_bcd
      0002EC 12r01rDA         [24] 1484 	lcall	_i2c_write
                                   1485 ;	main.c:242: i2c_write(dec_to_bcd(date));
      0002EF 85*34 82         [24] 1486 	mov	dpl, _ds3232_set_time_date_PARM_5
      0002F2 12r02r75         [24] 1487 	lcall	_dec_to_bcd
      0002F5 12r01rDA         [24] 1488 	lcall	_i2c_write
                                   1489 ;	main.c:243: i2c_write(dec_to_bcd(month));
      0002F8 85*35 82         [24] 1490 	mov	dpl, _ds3232_set_time_date_PARM_6
      0002FB 12r02r75         [24] 1491 	lcall	_dec_to_bcd
      0002FE 12r01rDA         [24] 1492 	lcall	_i2c_write
                                   1493 ;	main.c:244: i2c_write(dec_to_bcd(year));
      000301 85*36 82         [24] 1494 	mov	dpl, _ds3232_set_time_date_PARM_7
      000304 12r02r75         [24] 1495 	lcall	_dec_to_bcd
      000307 12r01rDA         [24] 1496 	lcall	_i2c_write
                                   1497 ;	main.c:245: i2c_stop();
                                   1498 ;	main.c:246: }
      00030A 02r01rC8         [24] 1499 	ljmp	_i2c_stop
                                   1500 ;------------------------------------------------------------
                                   1501 ;Allocation info for local variables in function 'ds3232_get_time_date'
                                   1502 ;------------------------------------------------------------
                                   1503 ;min           Allocated with name '_ds3232_get_time_date_PARM_2'
                                   1504 ;sec           Allocated with name '_ds3232_get_time_date_PARM_3'
                                   1505 ;day           Allocated with name '_ds3232_get_time_date_PARM_4'
                                   1506 ;date          Allocated with name '_ds3232_get_time_date_PARM_5'
                                   1507 ;month         Allocated with name '_ds3232_get_time_date_PARM_6'
                                   1508 ;year          Allocated with name '_ds3232_get_time_date_PARM_7'
                                   1509 ;hrs           Allocated to registers r5 r6 r7 
                                   1510 ;------------------------------------------------------------
                                   1511 ;	main.c:248: void ds3232_get_time_date(unsigned char *hrs, unsigned char *min, unsigned char *sec, unsigned char *day, unsigned char *date, unsigned char *month, unsigned char *year) {
                                   1512 ;	-----------------------------------------
                                   1513 ;	 function ds3232_get_time_date
                                   1514 ;	-----------------------------------------
      00030D                       1515 _ds3232_get_time_date:
      00030D AD 82            [24] 1516 	mov	r5, dpl
      00030F AE 83            [24] 1517 	mov	r6, dph
      000311 AF F0            [24] 1518 	mov	r7, b
                                   1519 ;	main.c:249: i2c_start();
      000313 C0 07            [24] 1520 	push	ar7
      000315 C0 06            [24] 1521 	push	ar6
      000317 C0 05            [24] 1522 	push	ar5
      000319 12r01rB3         [24] 1523 	lcall	_i2c_start
                                   1524 ;	main.c:250: i2c_write((DS3232_ADDRESS << 1) | 0);
      00031C 75 82 D0         [24] 1525 	mov	dpl, #0xd0
      00031F 12r01rDA         [24] 1526 	lcall	_i2c_write
                                   1527 ;	main.c:251: i2c_write(0x00);
      000322 75 82 00         [24] 1528 	mov	dpl, #0x00
      000325 12r01rDA         [24] 1529 	lcall	_i2c_write
                                   1530 ;	main.c:252: i2c_stop();
      000328 12r01rC8         [24] 1531 	lcall	_i2c_stop
                                   1532 ;	main.c:254: i2c_start();
      00032B 12r01rB3         [24] 1533 	lcall	_i2c_start
                                   1534 ;	main.c:255: i2c_write((DS3232_ADDRESS << 1) | 1);
      00032E 75 82 D1         [24] 1535 	mov	dpl, #0xd1
      000331 12r01rDA         [24] 1536 	lcall	_i2c_write
                                   1537 ;	main.c:256: *sec   = bcd_to_dec(i2c_read(1));
      000334 AA*3A            [24] 1538 	mov	r2,_ds3232_get_time_date_PARM_3
      000336 AB*3B            [24] 1539 	mov	r3,(_ds3232_get_time_date_PARM_3 + 1)
      000338 AC*3C            [24] 1540 	mov	r4,(_ds3232_get_time_date_PARM_3 + 2)
      00033A 75 82 01         [24] 1541 	mov	dpl, #0x01
      00033D C0 04            [24] 1542 	push	ar4
      00033F C0 03            [24] 1543 	push	ar3
      000341 C0 02            [24] 1544 	push	ar2
      000343 12r02r17         [24] 1545 	lcall	_i2c_read
      000346 12r02r8D         [24] 1546 	lcall	_bcd_to_dec
      000349 A9 82            [24] 1547 	mov	r1, dpl
      00034B D0 02            [24] 1548 	pop	ar2
      00034D D0 03            [24] 1549 	pop	ar3
      00034F D0 04            [24] 1550 	pop	ar4
      000351 8A 82            [24] 1551 	mov	dpl,r2
      000353 8B 83            [24] 1552 	mov	dph,r3
      000355 8C F0            [24] 1553 	mov	b,r4
      000357 E9               [12] 1554 	mov	a,r1
      000358 12r00r00         [24] 1555 	lcall	__gptrput
                                   1556 ;	main.c:257: *min   = bcd_to_dec(i2c_read(1));
      00035B AA*37            [24] 1557 	mov	r2,_ds3232_get_time_date_PARM_2
      00035D AB*38            [24] 1558 	mov	r3,(_ds3232_get_time_date_PARM_2 + 1)
      00035F AC*39            [24] 1559 	mov	r4,(_ds3232_get_time_date_PARM_2 + 2)
      000361 75 82 01         [24] 1560 	mov	dpl, #0x01
      000364 C0 04            [24] 1561 	push	ar4
      000366 C0 03            [24] 1562 	push	ar3
      000368 C0 02            [24] 1563 	push	ar2
      00036A 12r02r17         [24] 1564 	lcall	_i2c_read
      00036D 12r02r8D         [24] 1565 	lcall	_bcd_to_dec
      000370 A9 82            [24] 1566 	mov	r1, dpl
      000372 D0 02            [24] 1567 	pop	ar2
      000374 D0 03            [24] 1568 	pop	ar3
      000376 D0 04            [24] 1569 	pop	ar4
      000378 8A 82            [24] 1570 	mov	dpl,r2
      00037A 8B 83            [24] 1571 	mov	dph,r3
      00037C 8C F0            [24] 1572 	mov	b,r4
      00037E E9               [12] 1573 	mov	a,r1
      00037F 12r00r00         [24] 1574 	lcall	__gptrput
                                   1575 ;	main.c:258: *hrs   = bcd_to_dec(i2c_read(1));
      000382 75 82 01         [24] 1576 	mov	dpl, #0x01
      000385 12r02r17         [24] 1577 	lcall	_i2c_read
      000388 12r02r8D         [24] 1578 	lcall	_bcd_to_dec
      00038B AC 82            [24] 1579 	mov	r4, dpl
      00038D D0 05            [24] 1580 	pop	ar5
      00038F D0 06            [24] 1581 	pop	ar6
      000391 D0 07            [24] 1582 	pop	ar7
      000393 8D 82            [24] 1583 	mov	dpl,r5
      000395 8E 83            [24] 1584 	mov	dph,r6
      000397 8F F0            [24] 1585 	mov	b,r7
      000399 EC               [12] 1586 	mov	a,r4
      00039A 12r00r00         [24] 1587 	lcall	__gptrput
                                   1588 ;	main.c:259: *day   = bcd_to_dec(i2c_read(1));
      00039D AD*3D            [24] 1589 	mov	r5,_ds3232_get_time_date_PARM_4
      00039F AE*3E            [24] 1590 	mov	r6,(_ds3232_get_time_date_PARM_4 + 1)
      0003A1 AF*3F            [24] 1591 	mov	r7,(_ds3232_get_time_date_PARM_4 + 2)
      0003A3 75 82 01         [24] 1592 	mov	dpl, #0x01
      0003A6 C0 07            [24] 1593 	push	ar7
      0003A8 C0 06            [24] 1594 	push	ar6
      0003AA C0 05            [24] 1595 	push	ar5
      0003AC 12r02r17         [24] 1596 	lcall	_i2c_read
      0003AF 12r02r8D         [24] 1597 	lcall	_bcd_to_dec
      0003B2 AC 82            [24] 1598 	mov	r4, dpl
      0003B4 D0 05            [24] 1599 	pop	ar5
      0003B6 D0 06            [24] 1600 	pop	ar6
      0003B8 D0 07            [24] 1601 	pop	ar7
      0003BA 8D 82            [24] 1602 	mov	dpl,r5
      0003BC 8E 83            [24] 1603 	mov	dph,r6
      0003BE 8F F0            [24] 1604 	mov	b,r7
      0003C0 EC               [12] 1605 	mov	a,r4
      0003C1 12r00r00         [24] 1606 	lcall	__gptrput
                                   1607 ;	main.c:260: *date  = bcd_to_dec(i2c_read(1));
      0003C4 AD*40            [24] 1608 	mov	r5,_ds3232_get_time_date_PARM_5
      0003C6 AE*41            [24] 1609 	mov	r6,(_ds3232_get_time_date_PARM_5 + 1)
      0003C8 AF*42            [24] 1610 	mov	r7,(_ds3232_get_time_date_PARM_5 + 2)
      0003CA 75 82 01         [24] 1611 	mov	dpl, #0x01
      0003CD C0 07            [24] 1612 	push	ar7
      0003CF C0 06            [24] 1613 	push	ar6
      0003D1 C0 05            [24] 1614 	push	ar5
      0003D3 12r02r17         [24] 1615 	lcall	_i2c_read
      0003D6 12r02r8D         [24] 1616 	lcall	_bcd_to_dec
      0003D9 AC 82            [24] 1617 	mov	r4, dpl
      0003DB D0 05            [24] 1618 	pop	ar5
      0003DD D0 06            [24] 1619 	pop	ar6
      0003DF D0 07            [24] 1620 	pop	ar7
      0003E1 8D 82            [24] 1621 	mov	dpl,r5
      0003E3 8E 83            [24] 1622 	mov	dph,r6
      0003E5 8F F0            [24] 1623 	mov	b,r7
      0003E7 EC               [12] 1624 	mov	a,r4
      0003E8 12r00r00         [24] 1625 	lcall	__gptrput
                                   1626 ;	main.c:261: *month = bcd_to_dec(i2c_read(1));
      0003EB AD*43            [24] 1627 	mov	r5,_ds3232_get_time_date_PARM_6
      0003ED AE*44            [24] 1628 	mov	r6,(_ds3232_get_time_date_PARM_6 + 1)
      0003EF AF*45            [24] 1629 	mov	r7,(_ds3232_get_time_date_PARM_6 + 2)
      0003F1 75 82 01         [24] 1630 	mov	dpl, #0x01
      0003F4 C0 07            [24] 1631 	push	ar7
      0003F6 C0 06            [24] 1632 	push	ar6
      0003F8 C0 05            [24] 1633 	push	ar5
      0003FA 12r02r17         [24] 1634 	lcall	_i2c_read
      0003FD 12r02r8D         [24] 1635 	lcall	_bcd_to_dec
      000400 AC 82            [24] 1636 	mov	r4, dpl
      000402 D0 05            [24] 1637 	pop	ar5
      000404 D0 06            [24] 1638 	pop	ar6
      000406 D0 07            [24] 1639 	pop	ar7
      000408 8D 82            [24] 1640 	mov	dpl,r5
      00040A 8E 83            [24] 1641 	mov	dph,r6
      00040C 8F F0            [24] 1642 	mov	b,r7
      00040E EC               [12] 1643 	mov	a,r4
      00040F 12r00r00         [24] 1644 	lcall	__gptrput
                                   1645 ;	main.c:262: *year  = bcd_to_dec(i2c_read(0));
      000412 AD*46            [24] 1646 	mov	r5,_ds3232_get_time_date_PARM_7
      000414 AE*47            [24] 1647 	mov	r6,(_ds3232_get_time_date_PARM_7 + 1)
      000416 AF*48            [24] 1648 	mov	r7,(_ds3232_get_time_date_PARM_7 + 2)
      000418 75 82 00         [24] 1649 	mov	dpl, #0x00
      00041B C0 07            [24] 1650 	push	ar7
      00041D C0 06            [24] 1651 	push	ar6
      00041F C0 05            [24] 1652 	push	ar5
      000421 12r02r17         [24] 1653 	lcall	_i2c_read
      000424 12r02r8D         [24] 1654 	lcall	_bcd_to_dec
      000427 AC 82            [24] 1655 	mov	r4, dpl
      000429 D0 05            [24] 1656 	pop	ar5
      00042B D0 06            [24] 1657 	pop	ar6
      00042D D0 07            [24] 1658 	pop	ar7
      00042F 8D 82            [24] 1659 	mov	dpl,r5
      000431 8E 83            [24] 1660 	mov	dph,r6
      000433 8F F0            [24] 1661 	mov	b,r7
      000435 EC               [12] 1662 	mov	a,r4
      000436 12r00r00         [24] 1663 	lcall	__gptrput
                                   1664 ;	main.c:263: i2c_stop();
                                   1665 ;	main.c:264: }
      000439 02r01rC8         [24] 1666 	ljmp	_i2c_stop
                                   1667 ;------------------------------------------------------------
                                   1668 ;Allocation info for local variables in function 'display'
                                   1669 ;------------------------------------------------------------
                                   1670 ;m             Allocated with name '_display_PARM_2'
                                   1671 ;s             Allocated with name '_display_PARM_3'
                                   1672 ;d             Allocated with name '_display_PARM_4'
                                   1673 ;mo            Allocated with name '_display_PARM_5'
                                   1674 ;y             Allocated with name '_display_PARM_6'
                                   1675 ;day           Allocated with name '_display_PARM_7'
                                   1676 ;h             Allocated to registers r7 
                                   1677 ;------------------------------------------------------------
                                   1678 ;	main.c:266: void display(unsigned char h, unsigned char m, unsigned char s, unsigned char d, unsigned char mo, unsigned char y, unsigned char day ) {
                                   1679 ;	-----------------------------------------
                                   1680 ;	 function display
                                   1681 ;	-----------------------------------------
      00043C                       1682 _display:
      00043C AF 82            [24] 1683 	mov	r7, dpl
                                   1684 ;	main.c:267: int_to_str(h, buf);
      00043E 75*00r2B         [24] 1685 	mov	_int_to_str_PARM_2,#_buf
      000441 75*01 00         [24] 1686 	mov	(_int_to_str_PARM_2 + 1),#0x00
      000444 75*02 40         [24] 1687 	mov	(_int_to_str_PARM_2 + 2),#0x40
      000447 8F 82            [24] 1688 	mov	dpl, r7
      000449 12r01r62         [24] 1689 	lcall	_int_to_str
                                   1690 ;	main.c:268: time_str[0] = buf[0];
      00044C 85*2B*15         [24] 1691 	mov	_time_str,_buf
                                   1692 ;	main.c:269: time_str[1] = buf[1];
      00044F 85*2C*16         [24] 1693 	mov	(_time_str + 0x0001),(_buf + 0x0001)
                                   1694 ;	main.c:270: time_str[2] = ':';
      000452 75*17 3A         [24] 1695 	mov	(_time_str + 0x0002),#0x3a
                                   1696 ;	main.c:271: int_to_str(m, buf);
      000455 75*00r2B         [24] 1697 	mov	_int_to_str_PARM_2,#_buf
      000458 75*01 00         [24] 1698 	mov	(_int_to_str_PARM_2 + 1),#0x00
      00045B 75*02 40         [24] 1699 	mov	(_int_to_str_PARM_2 + 2),#0x40
      00045E 85*49 82         [24] 1700 	mov	dpl, _display_PARM_2
      000461 12r01r62         [24] 1701 	lcall	_int_to_str
                                   1702 ;	main.c:272: time_str[3] = buf[0];
      000464 85*2B*18         [24] 1703 	mov	(_time_str + 0x0003),_buf
                                   1704 ;	main.c:273: time_str[4] = buf[1];
      000467 85*2C*19         [24] 1705 	mov	(_time_str + 0x0004),(_buf + 0x0001)
                                   1706 ;	main.c:274: time_str[5] = ':';
      00046A 75*1A 3A         [24] 1707 	mov	(_time_str + 0x0005),#0x3a
                                   1708 ;	main.c:275: int_to_str(s, buf);
      00046D 75*00r2B         [24] 1709 	mov	_int_to_str_PARM_2,#_buf
      000470 75*01 00         [24] 1710 	mov	(_int_to_str_PARM_2 + 1),#0x00
      000473 75*02 40         [24] 1711 	mov	(_int_to_str_PARM_2 + 2),#0x40
      000476 85*4A 82         [24] 1712 	mov	dpl, _display_PARM_3
      000479 12r01r62         [24] 1713 	lcall	_int_to_str
                                   1714 ;	main.c:276: time_str[6] = buf[0];
      00047C 85*2B*1B         [24] 1715 	mov	(_time_str + 0x0006),_buf
                                   1716 ;	main.c:277: time_str[7] = buf[1];
      00047F 85*2C*1C         [24] 1717 	mov	(_time_str + 0x0007),(_buf + 0x0001)
                                   1718 ;	main.c:278: time_str[8] = '\0';
      000482 75*1D 00         [24] 1719 	mov	(_time_str + 0x0008),#0x00
                                   1720 ;	main.c:281: int_to_str(d, buf);
      000485 75*00r2B         [24] 1721 	mov	_int_to_str_PARM_2,#_buf
      000488 75*01 00         [24] 1722 	mov	(_int_to_str_PARM_2 + 1),#0x00
      00048B 75*02 40         [24] 1723 	mov	(_int_to_str_PARM_2 + 2),#0x40
      00048E 85*4B 82         [24] 1724 	mov	dpl, _display_PARM_4
      000491 12r01r62         [24] 1725 	lcall	_int_to_str
                                   1726 ;	main.c:282: date_str[0] = buf[0];
      000494 85*2B*1E         [24] 1727 	mov	_date_str,_buf
                                   1728 ;	main.c:283: date_str[1] = buf[1];
      000497 85*2C*1F         [24] 1729 	mov	(_date_str + 0x0001),(_buf + 0x0001)
                                   1730 ;	main.c:284: date_str[2] = ':';
      00049A 75*20 3A         [24] 1731 	mov	(_date_str + 0x0002),#0x3a
                                   1732 ;	main.c:285: int_to_str(mo, buf);
      00049D 75*00r2B         [24] 1733 	mov	_int_to_str_PARM_2,#_buf
      0004A0 75*01 00         [24] 1734 	mov	(_int_to_str_PARM_2 + 1),#0x00
      0004A3 75*02 40         [24] 1735 	mov	(_int_to_str_PARM_2 + 2),#0x40
      0004A6 85*4C 82         [24] 1736 	mov	dpl, _display_PARM_5
      0004A9 12r01r62         [24] 1737 	lcall	_int_to_str
                                   1738 ;	main.c:286: date_str[3] = buf[0];
      0004AC 85*2B*21         [24] 1739 	mov	(_date_str + 0x0003),_buf
                                   1740 ;	main.c:287: date_str[4] = buf[1];
      0004AF 85*2C*22         [24] 1741 	mov	(_date_str + 0x0004),(_buf + 0x0001)
                                   1742 ;	main.c:288: date_str[5] = ':';
      0004B2 75*23 3A         [24] 1743 	mov	(_date_str + 0x0005),#0x3a
                                   1744 ;	main.c:289: int_to_str(y, buf);
      0004B5 75*00r2B         [24] 1745 	mov	_int_to_str_PARM_2,#_buf
      0004B8 75*01 00         [24] 1746 	mov	(_int_to_str_PARM_2 + 1),#0x00
      0004BB 75*02 40         [24] 1747 	mov	(_int_to_str_PARM_2 + 2),#0x40
      0004BE 85*4D 82         [24] 1748 	mov	dpl, _display_PARM_6
      0004C1 12r01r62         [24] 1749 	lcall	_int_to_str
                                   1750 ;	main.c:290: date_str[6] = buf[0];
      0004C4 85*2B*24         [24] 1751 	mov	(_date_str + 0x0006),_buf
                                   1752 ;	main.c:291: date_str[7] = buf[1];
      0004C7 85*2C*25         [24] 1753 	mov	(_date_str + 0x0007),(_buf + 0x0001)
                                   1754 ;	main.c:292: date_str[8] = ' ';
      0004CA 75*26 20         [24] 1755 	mov	(_date_str + 0x0008),#0x20
                                   1756 ;	main.c:294: switch(day) {
      0004CD E5*4E            [12] 1757 	mov	a,_display_PARM_7
      0004CF 24 F8            [12] 1758 	add	a,#0xff - 0x07
      0004D1 40 6B            [24] 1759 	jc	00108$
      0004D3 E5*4E            [12] 1760 	mov	a,_display_PARM_7
      0004D5 24 0B            [12] 1761 	add	a,#(00118$-3-.)
      0004D7 83               [24] 1762 	movc	a,@a+pc
      0004D8 F5 82            [12] 1763 	mov	dpl,a
      0004DA E5*4E            [12] 1764 	mov	a,_display_PARM_7
      0004DC 24 0C            [12] 1765 	add	a,#(00119$-3-.)
      0004DE 83               [24] 1766 	movc	a,@a+pc
      0004DF F5 83            [12] 1767 	mov	dph,a
      0004E1 E4               [12] 1768 	clr	a
      0004E2 73               [24] 1769 	jmp	@a+dptr
      0004E3                       1770 00118$:
      0004E3r3E                    1771 	.db	00108$
      0004E4rF3                    1772 	.db	00101$
      0004E5rFE                    1773 	.db	00102$
      0004E6r09                    1774 	.db	00103$
      0004E7r14                    1775 	.db	00104$
      0004E8r1F                    1776 	.db	00105$
      0004E9r2A                    1777 	.db	00106$
      0004EAr35                    1778 	.db	00107$
      0004EB                       1779 00119$:
      0004EBs05                    1780 	.db	00108$>>8
      0004ECs04                    1781 	.db	00101$>>8
      0004EDs04                    1782 	.db	00102$>>8
      0004EEs05                    1783 	.db	00103$>>8
      0004EFs05                    1784 	.db	00104$>>8
      0004F0s05                    1785 	.db	00105$>>8
      0004F1s05                    1786 	.db	00106$>>8
      0004F2s05                    1787 	.db	00107$>>8
                                   1788 ;	main.c:295: case 1:
      0004F3                       1789 00101$:
                                   1790 ;	main.c:296: buf[0] = 'S';
      0004F3 75*2B 53         [24] 1791 	mov	_buf,#0x53
                                   1792 ;	main.c:297: buf[1] = 'u';
      0004F6 75*2C 75         [24] 1793 	mov	(_buf + 0x0001),#0x75
                                   1794 ;	main.c:298: buf[2] = 'n';
      0004F9 75*2D 6E         [24] 1795 	mov	(_buf + 0x0002),#0x6e
                                   1796 ;	main.c:299: break;
                                   1797 ;	main.c:300: case 2:
      0004FC 80 40            [24] 1798 	sjmp	00108$
      0004FE                       1799 00102$:
                                   1800 ;	main.c:301: buf[0] = 'M';
      0004FE 75*2B 4D         [24] 1801 	mov	_buf,#0x4d
                                   1802 ;	main.c:302: buf[1] = 'o';
      000501 75*2C 6F         [24] 1803 	mov	(_buf + 0x0001),#0x6f
                                   1804 ;	main.c:303: buf[2] = 'n';
      000504 75*2D 6E         [24] 1805 	mov	(_buf + 0x0002),#0x6e
                                   1806 ;	main.c:304: break;
                                   1807 ;	main.c:305: case 3:
      000507 80 35            [24] 1808 	sjmp	00108$
      000509                       1809 00103$:
                                   1810 ;	main.c:306: buf[0] = 'T';
      000509 75*2B 54         [24] 1811 	mov	_buf,#0x54
                                   1812 ;	main.c:307: buf[1] = 'u';
      00050C 75*2C 75         [24] 1813 	mov	(_buf + 0x0001),#0x75
                                   1814 ;	main.c:308: buf[2] = 'e';
      00050F 75*2D 65         [24] 1815 	mov	(_buf + 0x0002),#0x65
                                   1816 ;	main.c:309: break;
                                   1817 ;	main.c:310: case 4:
      000512 80 2A            [24] 1818 	sjmp	00108$
      000514                       1819 00104$:
                                   1820 ;	main.c:311: buf[0] = 'W';
      000514 75*2B 57         [24] 1821 	mov	_buf,#0x57
                                   1822 ;	main.c:312: buf[1] = 'e';
      000517 75*2C 65         [24] 1823 	mov	(_buf + 0x0001),#0x65
                                   1824 ;	main.c:313: buf[2] = 'd';
      00051A 75*2D 64         [24] 1825 	mov	(_buf + 0x0002),#0x64
                                   1826 ;	main.c:314: break;
                                   1827 ;	main.c:315: case 5:
      00051D 80 1F            [24] 1828 	sjmp	00108$
      00051F                       1829 00105$:
                                   1830 ;	main.c:316: buf[0] = 'T';
      00051F 75*2B 54         [24] 1831 	mov	_buf,#0x54
                                   1832 ;	main.c:317: buf[1] = 'h';
      000522 75*2C 68         [24] 1833 	mov	(_buf + 0x0001),#0x68
                                   1834 ;	main.c:318: buf[2] = 'u';
      000525 75*2D 75         [24] 1835 	mov	(_buf + 0x0002),#0x75
                                   1836 ;	main.c:319: break;
                                   1837 ;	main.c:320: case 6:
      000528 80 14            [24] 1838 	sjmp	00108$
      00052A                       1839 00106$:
                                   1840 ;	main.c:321: buf[0] = 'F';
      00052A 75*2B 46         [24] 1841 	mov	_buf,#0x46
                                   1842 ;	main.c:322: buf[1] = 'r';
      00052D 75*2C 72         [24] 1843 	mov	(_buf + 0x0001),#0x72
                                   1844 ;	main.c:323: buf[2] = 'i';
      000530 75*2D 69         [24] 1845 	mov	(_buf + 0x0002),#0x69
                                   1846 ;	main.c:324: break;
                                   1847 ;	main.c:325: case 7:
      000533 80 09            [24] 1848 	sjmp	00108$
      000535                       1849 00107$:
                                   1850 ;	main.c:326: buf[0] = 'S';
      000535 75*2B 53         [24] 1851 	mov	_buf,#0x53
                                   1852 ;	main.c:327: buf[1] = 'a';
      000538 75*2C 61         [24] 1853 	mov	(_buf + 0x0001),#0x61
                                   1854 ;	main.c:328: buf[2] = 't';
      00053B 75*2D 74         [24] 1855 	mov	(_buf + 0x0002),#0x74
                                   1856 ;	main.c:330: }
      00053E                       1857 00108$:
                                   1858 ;	main.c:331: date_str[9] = buf[0];
      00053E 85*2B*27         [24] 1859 	mov	(_date_str + 0x0009),_buf
                                   1860 ;	main.c:332: date_str[10] = buf[1];
      000541 85*2C*28         [24] 1861 	mov	(_date_str + 0x000a),(_buf + 0x0001)
                                   1862 ;	main.c:333: date_str[11] = buf[2];
      000544 85*2D*29         [24] 1863 	mov	(_date_str + 0x000b),(_buf + 0x0002)
                                   1864 ;	main.c:334: date_str[12] = '\0';
      000547 75*2A 00         [24] 1865 	mov	(_date_str + 0x000c),#0x00
                                   1866 ;	main.c:337: lcd_goto(0, 0);
      00054A 75*30 00         [24] 1867 	mov	_lcd_goto_PARM_2,#0x00
      00054D 75 82 00         [24] 1868 	mov	dpl, #0x00
      000550 12r00rF7         [24] 1869 	lcall	_lcd_goto
                                   1870 ;	main.c:338: lcd_string(time_str);
      000553 90r00r15         [24] 1871 	mov	dptr,#_time_str
      000556 75 F0 40         [24] 1872 	mov	b, #0x40
      000559 12r00rC0         [24] 1873 	lcall	_lcd_string
                                   1874 ;	main.c:339: lcd_goto(1, 0);
      00055C 75*30 00         [24] 1875 	mov	_lcd_goto_PARM_2,#0x00
      00055F 75 82 01         [24] 1876 	mov	dpl, #0x01
      000562 12r00rF7         [24] 1877 	lcall	_lcd_goto
                                   1878 ;	main.c:340: lcd_string(date_str);
      000565 90r00r1E         [24] 1879 	mov	dptr,#_date_str
      000568 75 F0 40         [24] 1880 	mov	b, #0x40
                                   1881 ;	main.c:341: }
      00056B 02r00rC0         [24] 1882 	ljmp	_lcd_string
                                   1883 ;------------------------------------------------------------
                                   1884 ;Allocation info for local variables in function 'step_motor'
                                   1885 ;------------------------------------------------------------
                                   1886 ;step          Allocated to registers r6 r7 
                                   1887 ;------------------------------------------------------------
                                   1888 ;	main.c:343: void step_motor(int step) {
                                   1889 ;	-----------------------------------------
                                   1890 ;	 function step_motor
                                   1891 ;	-----------------------------------------
      00056E                       1892 _step_motor:
                                   1893 ;	main.c:344: switch(step % 8) {
      00056E 75*00 08         [24] 1894 	mov	__modsint_PARM_2,#0x08
      000571 75*01 00         [24] 1895 	mov	(__modsint_PARM_2 + 1),#0x00
      000574 12r00r00         [24] 1896 	lcall	__modsint
      000577 AE 82            [24] 1897 	mov	r6, dpl
      000579 E5 83            [12] 1898 	mov	a,dph
      00057B FF               [12] 1899 	mov	r7,a
      00057C 30 E7 01         [24] 1900 	jnb	acc.7,00124$
      00057F 22               [24] 1901 	ret
      000580                       1902 00124$:
      000580 C3               [12] 1903 	clr	c
      000581 74 07            [12] 1904 	mov	a,#0x07
      000583 9E               [12] 1905 	subb	a,r6
      000584 74 80            [12] 1906 	mov	a,#(0x00 ^ 0x80)
      000586 8F F0            [24] 1907 	mov	b,r7
      000588 63 F0 80         [24] 1908 	xrl	b,#0x80
      00058B 95 F0            [12] 1909 	subb	a,b
      00058D 40 65            [24] 1910 	jc	00110$
      00058F EE               [12] 1911 	mov	a,r6
      000590 24 0A            [12] 1912 	add	a,#(00126$-3-.)
      000592 83               [24] 1913 	movc	a,@a+pc
      000593 F5 82            [12] 1914 	mov	dpl,a
      000595 EE               [12] 1915 	mov	a,r6
      000596 24 0C            [12] 1916 	add	a,#(00127$-3-.)
      000598 83               [24] 1917 	movc	a,@a+pc
      000599 F5 83            [12] 1918 	mov	dph,a
      00059B E4               [12] 1919 	clr	a
      00059C 73               [24] 1920 	jmp	@a+dptr
      00059D                       1921 00126$:
      00059DrAD                    1922 	.db	00101$
      00059ErB6                    1923 	.db	00102$
      00059FrBF                    1924 	.db	00103$
      0005A0rC8                    1925 	.db	00104$
      0005A1rD1                    1926 	.db	00105$
      0005A2rDA                    1927 	.db	00106$
      0005A3rE3                    1928 	.db	00107$
      0005A4rEC                    1929 	.db	00108$
      0005A5                       1930 00127$:
      0005A5s05                    1931 	.db	00101$>>8
      0005A6s05                    1932 	.db	00102$>>8
      0005A7s05                    1933 	.db	00103$>>8
      0005A8s05                    1934 	.db	00104$>>8
      0005A9s05                    1935 	.db	00105$>>8
      0005AAs05                    1936 	.db	00106$>>8
      0005ABs05                    1937 	.db	00107$>>8
      0005ACs05                    1938 	.db	00108$>>8
                                   1939 ;	main.c:345: case 0:
      0005AD                       1940 00101$:
                                   1941 ;	main.c:346: IN1=1;
                                   1942 ;	assignBit
      0005AD D2 A4            [12] 1943 	setb	_IN1
                                   1944 ;	main.c:347: IN2=0;
                                   1945 ;	assignBit
      0005AF C2 A3            [12] 1946 	clr	_IN2
                                   1947 ;	main.c:348: IN3=0;
                                   1948 ;	assignBit
      0005B1 C2 A2            [12] 1949 	clr	_IN3
                                   1950 ;	main.c:349: IN4=0;
                                   1951 ;	assignBit
      0005B3 C2 A1            [12] 1952 	clr	_IN4
                                   1953 ;	main.c:350: break;
                                   1954 ;	main.c:351: case 1:
      0005B5 22               [24] 1955 	ret
      0005B6                       1956 00102$:
                                   1957 ;	main.c:352: IN1=1;
                                   1958 ;	assignBit
      0005B6 D2 A4            [12] 1959 	setb	_IN1
                                   1960 ;	main.c:353: IN2=1;
                                   1961 ;	assignBit
      0005B8 D2 A3            [12] 1962 	setb	_IN2
                                   1963 ;	main.c:354: IN3=0;
                                   1964 ;	assignBit
      0005BA C2 A2            [12] 1965 	clr	_IN3
                                   1966 ;	main.c:355: IN4=0;
                                   1967 ;	assignBit
      0005BC C2 A1            [12] 1968 	clr	_IN4
                                   1969 ;	main.c:356: break;
                                   1970 ;	main.c:357: case 2:
      0005BE 22               [24] 1971 	ret
      0005BF                       1972 00103$:
                                   1973 ;	main.c:358: IN1=0;
                                   1974 ;	assignBit
      0005BF C2 A4            [12] 1975 	clr	_IN1
                                   1976 ;	main.c:359: IN2=1;
                                   1977 ;	assignBit
      0005C1 D2 A3            [12] 1978 	setb	_IN2
                                   1979 ;	main.c:360: IN3=0;
                                   1980 ;	assignBit
      0005C3 C2 A2            [12] 1981 	clr	_IN3
                                   1982 ;	main.c:361: IN4=0;
                                   1983 ;	assignBit
      0005C5 C2 A1            [12] 1984 	clr	_IN4
                                   1985 ;	main.c:362: break;
                                   1986 ;	main.c:363: case 3:
      0005C7 22               [24] 1987 	ret
      0005C8                       1988 00104$:
                                   1989 ;	main.c:364: IN1=0;
                                   1990 ;	assignBit
      0005C8 C2 A4            [12] 1991 	clr	_IN1
                                   1992 ;	main.c:365: IN2=1;
                                   1993 ;	assignBit
      0005CA D2 A3            [12] 1994 	setb	_IN2
                                   1995 ;	main.c:366: IN3=1;
                                   1996 ;	assignBit
      0005CC D2 A2            [12] 1997 	setb	_IN3
                                   1998 ;	main.c:367: IN4=0;
                                   1999 ;	assignBit
      0005CE C2 A1            [12] 2000 	clr	_IN4
                                   2001 ;	main.c:368: break;
                                   2002 ;	main.c:369: case 4:
      0005D0 22               [24] 2003 	ret
      0005D1                       2004 00105$:
                                   2005 ;	main.c:370: IN1=0;
                                   2006 ;	assignBit
      0005D1 C2 A4            [12] 2007 	clr	_IN1
                                   2008 ;	main.c:371: IN2=0;
                                   2009 ;	assignBit
      0005D3 C2 A3            [12] 2010 	clr	_IN2
                                   2011 ;	main.c:372: IN3=1;
                                   2012 ;	assignBit
      0005D5 D2 A2            [12] 2013 	setb	_IN3
                                   2014 ;	main.c:373: IN4=0;
                                   2015 ;	assignBit
      0005D7 C2 A1            [12] 2016 	clr	_IN4
                                   2017 ;	main.c:374: break;
                                   2018 ;	main.c:375: case 5:
      0005D9 22               [24] 2019 	ret
      0005DA                       2020 00106$:
                                   2021 ;	main.c:376: IN1=0;
                                   2022 ;	assignBit
      0005DA C2 A4            [12] 2023 	clr	_IN1
                                   2024 ;	main.c:377: IN2=0;
                                   2025 ;	assignBit
      0005DC C2 A3            [12] 2026 	clr	_IN2
                                   2027 ;	main.c:378: IN3=1;
                                   2028 ;	assignBit
      0005DE D2 A2            [12] 2029 	setb	_IN3
                                   2030 ;	main.c:379: IN4=1;
                                   2031 ;	assignBit
      0005E0 D2 A1            [12] 2032 	setb	_IN4
                                   2033 ;	main.c:380: break;
                                   2034 ;	main.c:381: case 6:
      0005E2 22               [24] 2035 	ret
      0005E3                       2036 00107$:
                                   2037 ;	main.c:382: IN1=0;
                                   2038 ;	assignBit
      0005E3 C2 A4            [12] 2039 	clr	_IN1
                                   2040 ;	main.c:383: IN2=0;
                                   2041 ;	assignBit
      0005E5 C2 A3            [12] 2042 	clr	_IN2
                                   2043 ;	main.c:384: IN3=0;
                                   2044 ;	assignBit
      0005E7 C2 A2            [12] 2045 	clr	_IN3
                                   2046 ;	main.c:385: IN4=1;
                                   2047 ;	assignBit
      0005E9 D2 A1            [12] 2048 	setb	_IN4
                                   2049 ;	main.c:386: break;
                                   2050 ;	main.c:387: case 7:
      0005EB 22               [24] 2051 	ret
      0005EC                       2052 00108$:
                                   2053 ;	main.c:388: IN1=1;
                                   2054 ;	assignBit
      0005EC D2 A4            [12] 2055 	setb	_IN1
                                   2056 ;	main.c:389: IN2=0;
                                   2057 ;	assignBit
      0005EE C2 A3            [12] 2058 	clr	_IN2
                                   2059 ;	main.c:390: IN3=0;
                                   2060 ;	assignBit
      0005F0 C2 A2            [12] 2061 	clr	_IN3
                                   2062 ;	main.c:391: IN4=1;
                                   2063 ;	assignBit
      0005F2 D2 A1            [12] 2064 	setb	_IN4
                                   2065 ;	main.c:393: }
      0005F4                       2066 00110$:
                                   2067 ;	main.c:394: }
      0005F4 22               [24] 2068 	ret
                                   2069 ;------------------------------------------------------------
                                   2070 ;Allocation info for local variables in function 'write_eeprom'
                                   2071 ;------------------------------------------------------------
                                   2072 ;value         Allocated with name '_write_eeprom_PARM_2'
                                   2073 ;addr          Allocated to registers r6 r7 
                                   2074 ;------------------------------------------------------------
                                   2075 ;	main.c:396: void write_eeprom(unsigned int addr, unsigned char value) {
                                   2076 ;	-----------------------------------------
                                   2077 ;	 function write_eeprom
                                   2078 ;	-----------------------------------------
      0005F5                       2079 _write_eeprom:
      0005F5 AE 82            [24] 2080 	mov	r6, dpl
      0005F7 AF 83            [24] 2081 	mov	r7, dph
                                   2082 ;	main.c:398: if (addr > 0x0FFF) return;
      0005F9 C3               [12] 2083 	clr	c
      0005FA 74 FF            [12] 2084 	mov	a,#0xff
      0005FC 9E               [12] 2085 	subb	a,r6
      0005FD 74 0F            [12] 2086 	mov	a,#0x0f
      0005FF 9F               [12] 2087 	subb	a,r7
      000600 50 01            [24] 2088 	jnc	00102$
      000602 22               [24] 2089 	ret
      000603                       2090 00102$:
                                   2091 ;	main.c:400: i2c_start();
      000603 C0 07            [24] 2092 	push	ar7
      000605 C0 06            [24] 2093 	push	ar6
      000607 12r01rB3         [24] 2094 	lcall	_i2c_start
                                   2095 ;	main.c:401: i2c_write((AT24C512B_ADDRESS << 1) | 0);  // Write mode
      00060A 75 82 AE         [24] 2096 	mov	dpl, #0xae
      00060D 12r01rDA         [24] 2097 	lcall	_i2c_write
      000610 D0 06            [24] 2098 	pop	ar6
      000612 D0 07            [24] 2099 	pop	ar7
                                   2100 ;	main.c:402: i2c_write((addr>>8) & 0xFF);                       // upper byte RAM address
      000614 8F 82            [24] 2101 	mov	dpl,r7
      000616 C0 07            [24] 2102 	push	ar7
      000618 C0 06            [24] 2103 	push	ar6
      00061A 12r01rDA         [24] 2104 	lcall	_i2c_write
      00061D D0 06            [24] 2105 	pop	ar6
      00061F D0 07            [24] 2106 	pop	ar7
                                   2107 ;	main.c:403: i2c_write(addr & 0xFF);				  			  // lower byte RAM address
      000621 8E 82            [24] 2108 	mov	dpl,r6
      000623 12r01rDA         [24] 2109 	lcall	_i2c_write
                                   2110 ;	main.c:404: i2c_write(value);                      // Data
      000626 85*4F 82         [24] 2111 	mov	dpl, _write_eeprom_PARM_2
      000629 12r01rDA         [24] 2112 	lcall	_i2c_write
                                   2113 ;	main.c:405: i2c_stop();
      00062C 12r01rC8         [24] 2114 	lcall	_i2c_stop
                                   2115 ;	main.c:406: delay(5000);
      00062F 90 13 88         [24] 2116 	mov	dptr,#0x1388
                                   2117 ;	main.c:407: }
      000632 02r00r00         [24] 2118 	ljmp	_delay
                                   2119 ;------------------------------------------------------------
                                   2120 ;Allocation info for local variables in function 'read_eeprom'
                                   2121 ;------------------------------------------------------------
                                   2122 ;addr          Allocated to registers r6 r7 
                                   2123 ;data          Allocated to registers r7 
                                   2124 ;------------------------------------------------------------
                                   2125 ;	main.c:409: unsigned char read_eeprom(unsigned int addr) {
                                   2126 ;	-----------------------------------------
                                   2127 ;	 function read_eeprom
                                   2128 ;	-----------------------------------------
      000635                       2129 _read_eeprom:
      000635 AE 82            [24] 2130 	mov	r6, dpl
      000637 AF 83            [24] 2131 	mov	r7, dph
                                   2132 ;	main.c:412: if (addr > 0x0FFF) return 0xFF; // Return invalid value if out of range
      000639 C3               [12] 2133 	clr	c
      00063A 74 FF            [12] 2134 	mov	a,#0xff
      00063C 9E               [12] 2135 	subb	a,r6
      00063D 74 0F            [12] 2136 	mov	a,#0x0f
      00063F 9F               [12] 2137 	subb	a,r7
      000640 50 04            [24] 2138 	jnc	00102$
      000642 75 82 FF         [24] 2139 	mov	dpl, #0xff
      000645 22               [24] 2140 	ret
      000646                       2141 00102$:
                                   2142 ;	main.c:414: i2c_start();
      000646 C0 07            [24] 2143 	push	ar7
      000648 C0 06            [24] 2144 	push	ar6
      00064A 12r01rB3         [24] 2145 	lcall	_i2c_start
                                   2146 ;	main.c:415: i2c_write((AT24C512B_ADDRESS << 1) | 0);  // Write mode to set address pointer
      00064D 75 82 AE         [24] 2147 	mov	dpl, #0xae
      000650 12r01rDA         [24] 2148 	lcall	_i2c_write
      000653 D0 06            [24] 2149 	pop	ar6
      000655 D0 07            [24] 2150 	pop	ar7
                                   2151 ;	main.c:416: i2c_write((addr>>8) & 0xFF); 
      000657 8F 82            [24] 2152 	mov	dpl,r7
      000659 C0 07            [24] 2153 	push	ar7
      00065B C0 06            [24] 2154 	push	ar6
      00065D 12r01rDA         [24] 2155 	lcall	_i2c_write
      000660 D0 06            [24] 2156 	pop	ar6
      000662 D0 07            [24] 2157 	pop	ar7
                                   2158 ;	main.c:417: i2c_write(addr & 0xFF);	
      000664 8E 82            [24] 2159 	mov	dpl,r6
      000666 12r01rDA         [24] 2160 	lcall	_i2c_write
                                   2161 ;	main.c:419: i2c_start();                           // Repeated start
      000669 12r01rB3         [24] 2162 	lcall	_i2c_start
                                   2163 ;	main.c:420: i2c_write((AT24C512B_ADDRESS << 1) | 1);  // Read mode
      00066C 75 82 AF         [24] 2164 	mov	dpl, #0xaf
      00066F 12r01rDA         [24] 2165 	lcall	_i2c_write
                                   2166 ;	main.c:421: data = i2c_read(0);                    // No ACK
      000672 75 82 00         [24] 2167 	mov	dpl, #0x00
      000675 12r02r17         [24] 2168 	lcall	_i2c_read
      000678 AF 82            [24] 2169 	mov	r7, dpl
                                   2170 ;	main.c:422: i2c_stop();
      00067A C0 07            [24] 2171 	push	ar7
      00067C 12r01rC8         [24] 2172 	lcall	_i2c_stop
      00067F D0 07            [24] 2173 	pop	ar7
                                   2174 ;	main.c:423: return data;
      000681 8F 82            [24] 2175 	mov	dpl, r7
                                   2176 ;	main.c:424: }
      000683 22               [24] 2177 	ret
                                   2178 ;------------------------------------------------------------
                                   2179 ;Allocation info for local variables in function 'write_alarm_to_eeprom'
                                   2180 ;------------------------------------------------------------
                                   2181 ;h             Allocated with name '_write_alarm_to_eeprom_PARM_2'
                                   2182 ;m             Allocated with name '_write_alarm_to_eeprom_PARM_3'
                                   2183 ;index         Allocated to registers r7 
                                   2184 ;------------------------------------------------------------
                                   2185 ;	main.c:426: void write_alarm_to_eeprom(unsigned char index, unsigned char h, unsigned char m) {
                                   2186 ;	-----------------------------------------
                                   2187 ;	 function write_alarm_to_eeprom
                                   2188 ;	-----------------------------------------
      000684                       2189 _write_alarm_to_eeprom:
      000684 AF 82            [24] 2190 	mov	r7, dpl
                                   2191 ;	main.c:427: write_eeprom(EEPROM_BASE + (index * 2) + 1, h);
      000686 7E 00            [12] 2192 	mov	r6,#0x00
      000688 EF               [12] 2193 	mov	a,r7
      000689 2F               [12] 2194 	add	a,r7
      00068A FF               [12] 2195 	mov	r7,a
      00068B EE               [12] 2196 	mov	a,r6
      00068C 33               [12] 2197 	rlc	a
      00068D FE               [12] 2198 	mov	r6,a
      00068E 8F 82            [24] 2199 	mov	dpl,r7
      000690 8E 83            [24] 2200 	mov	dph,r6
      000692 A3               [24] 2201 	inc	dptr
      000693 85*50*4F         [24] 2202 	mov	_write_eeprom_PARM_2,_write_alarm_to_eeprom_PARM_2
      000696 C0 07            [24] 2203 	push	ar7
      000698 C0 06            [24] 2204 	push	ar6
      00069A 12r05rF5         [24] 2205 	lcall	_write_eeprom
      00069D D0 06            [24] 2206 	pop	ar6
      00069F D0 07            [24] 2207 	pop	ar7
                                   2208 ;	main.c:428: write_eeprom(EEPROM_BASE + (index * 2) + 2, m);
      0006A1 8F 82            [24] 2209 	mov	dpl,r7
      0006A3 8E 83            [24] 2210 	mov	dph,r6
      0006A5 A3               [24] 2211 	inc	dptr
      0006A6 A3               [24] 2212 	inc	dptr
      0006A7 85*51*4F         [24] 2213 	mov	_write_eeprom_PARM_2,_write_alarm_to_eeprom_PARM_3
                                   2214 ;	main.c:429: }
      0006AA 02r05rF5         [24] 2215 	ljmp	_write_eeprom
                                   2216 ;------------------------------------------------------------
                                   2217 ;Allocation info for local variables in function 'alarm_arranger'
                                   2218 ;------------------------------------------------------------
                                   2219 ;minutes       Allocated with name '_alarm_arranger_PARM_2'
                                   2220 ;n             Allocated with name '_alarm_arranger_PARM_3'
                                   2221 ;hours         Allocated with name '_alarm_arranger_hours_10000_63'
                                   2222 ;i             Allocated with name '_alarm_arranger_i_10000_64'
                                   2223 ;j             Allocated to registers 
                                   2224 ;min_idx       Allocated with name '_alarm_arranger_min_idx_10000_64'
                                   2225 ;temp          Allocated with name '_alarm_arranger_temp_30001_71'
                                   2226 ;__index       Allocated with name '_alarm_arranger___index_10001_72'
                                   2227 ;sloc0         Allocated with name '_alarm_arranger_sloc0_1_0'
                                   2228 ;sloc1         Allocated with name '_alarm_arranger_sloc1_1_0'
                                   2229 ;------------------------------------------------------------
                                   2230 ;	main.c:432: void alarm_arranger(unsigned char hours[], unsigned char minutes[], unsigned char *n){
                                   2231 ;	-----------------------------------------
                                   2232 ;	 function alarm_arranger
                                   2233 ;	-----------------------------------------
      0006AD                       2234 _alarm_arranger:
      0006AD 85 82*06         [24] 2235 	mov	_alarm_arranger_hours_10000_63,dpl
      0006B0 85 83*07         [24] 2236 	mov	(_alarm_arranger_hours_10000_63 + 1),dph
      0006B3 85 F0*08         [24] 2237 	mov	(_alarm_arranger_hours_10000_63 + 2),b
                                   2238 ;	main.c:436: for (i = 0; i < *n - 1; i++) {
      0006B6 AA*03            [24] 2239 	mov	r2,_alarm_arranger_PARM_3
      0006B8 AB*04            [24] 2240 	mov	r3,(_alarm_arranger_PARM_3 + 1)
      0006BA AC*05            [24] 2241 	mov	r4,(_alarm_arranger_PARM_3 + 2)
      0006BC 79 00            [12] 2242 	mov	r1,#0x00
      0006BE                       2243 00115$:
      0006BE 8A 82            [24] 2244 	mov	dpl,r2
      0006C0 8B 83            [24] 2245 	mov	dph,r3
      0006C2 8C F0            [24] 2246 	mov	b,r4
      0006C4 12r00r00         [24] 2247 	lcall	__gptrget
      0006C7 F8               [12] 2248 	mov	r0,a
      0006C8 7F 00            [12] 2249 	mov	r7,#0x00
      0006CA 18               [12] 2250 	dec	r0
      0006CB B8 FF 01         [24] 2251 	cjne	r0,#0xff,00188$
      0006CE 1F               [12] 2252 	dec	r7
      0006CF                       2253 00188$:
      0006CF 89 05            [24] 2254 	mov	ar5,r1
      0006D1 7E 00            [12] 2255 	mov	r6,#0x00
      0006D3 C3               [12] 2256 	clr	c
      0006D4 ED               [12] 2257 	mov	a,r5
      0006D5 98               [12] 2258 	subb	a,r0
      0006D6 EE               [12] 2259 	mov	a,r6
      0006D7 64 80            [12] 2260 	xrl	a,#0x80
      0006D9 8F F0            [24] 2261 	mov	b,r7
      0006DB 63 F0 80         [24] 2262 	xrl	b,#0x80
      0006DE 95 F0            [12] 2263 	subb	a,b
      0006E0 40 03            [24] 2264 	jc	00189$
      0006E2 02r08r14         [24] 2265 	ljmp	00106$
      0006E5                       2266 00189$:
                                   2267 ;	main.c:437: min_idx = i;
      0006E5 89 07            [24] 2268 	mov	ar7,r1
                                   2269 ;	main.c:438: for (j = i + 1; j < *n; j++) {
      0006E7 89 06            [24] 2270 	mov	ar6,r1
      0006E9 EE               [12] 2271 	mov	a,r6
      0006EA 04               [12] 2272 	inc	a
      0006EB F5*0A            [12] 2273 	mov	_alarm_arranger_min_idx_10000_64,a
      0006ED                       2274 00112$:
      0006ED 8A 82            [24] 2275 	mov	dpl,r2
      0006EF 8B 83            [24] 2276 	mov	dph,r3
      0006F1 8C F0            [24] 2277 	mov	b,r4
      0006F3 12r00r00         [24] 2278 	lcall	__gptrget
      0006F6 FD               [12] 2279 	mov	r5,a
      0006F7 C3               [12] 2280 	clr	c
      0006F8 E5*0A            [12] 2281 	mov	a,_alarm_arranger_min_idx_10000_64
      0006FA 9D               [12] 2282 	subb	a,r5
      0006FB 40 03            [24] 2283 	jc	00190$
      0006FD 02r07r81         [24] 2284 	ljmp	00105$
      000700                       2285 00190$:
                                   2286 ;	main.c:439: if (hours[j] < hours[min_idx] || (hours[j] == hours[min_idx] && minutes[j] < minutes[min_idx])) {
      000700 C0 02            [24] 2287 	push	ar2
      000702 C0 03            [24] 2288 	push	ar3
      000704 C0 04            [24] 2289 	push	ar4
      000706 E5*0A            [12] 2290 	mov	a,_alarm_arranger_min_idx_10000_64
      000708 25*06            [12] 2291 	add	a, _alarm_arranger_hours_10000_63
      00070A F8               [12] 2292 	mov	r0,a
      00070B E4               [12] 2293 	clr	a
      00070C 35*07            [12] 2294 	addc	a, (_alarm_arranger_hours_10000_63 + 1)
      00070E FD               [12] 2295 	mov	r5,a
      00070F AE*08            [24] 2296 	mov	r6,(_alarm_arranger_hours_10000_63 + 2)
      000711 88 82            [24] 2297 	mov	dpl,r0
      000713 8D 83            [24] 2298 	mov	dph,r5
      000715 8E F0            [24] 2299 	mov	b,r6
      000717 12r00r00         [24] 2300 	lcall	__gptrget
      00071A FE               [12] 2301 	mov	r6,a
      00071B EF               [12] 2302 	mov	a,r7
      00071C 25*06            [12] 2303 	add	a, _alarm_arranger_hours_10000_63
      00071E F8               [12] 2304 	mov	r0,a
      00071F E4               [12] 2305 	clr	a
      000720 35*07            [12] 2306 	addc	a, (_alarm_arranger_hours_10000_63 + 1)
      000722 FC               [12] 2307 	mov	r4,a
      000723 AD*08            [24] 2308 	mov	r5,(_alarm_arranger_hours_10000_63 + 2)
      000725 88 82            [24] 2309 	mov	dpl,r0
      000727 8C 83            [24] 2310 	mov	dph,r4
      000729 8D F0            [24] 2311 	mov	b,r5
      00072B 12r00r00         [24] 2312 	lcall	__gptrget
      00072E F5*0F            [12] 2313 	mov	_alarm_arranger_sloc0_1_0,a
      000730 C3               [12] 2314 	clr	c
      000731 EE               [12] 2315 	mov	a,r6
      000732 95*0F            [12] 2316 	subb	a,_alarm_arranger_sloc0_1_0
      000734 D0 04            [24] 2317 	pop	ar4
      000736 D0 03            [24] 2318 	pop	ar3
      000738 D0 02            [24] 2319 	pop	ar2
      00073A 40 3E            [24] 2320 	jc	00101$
      00073C EE               [12] 2321 	mov	a,r6
      00073D B5*0F 3C         [24] 2322 	cjne	a,_alarm_arranger_sloc0_1_0,00113$
      000740 C0 02            [24] 2323 	push	ar2
      000742 C0 03            [24] 2324 	push	ar3
      000744 C0 04            [24] 2325 	push	ar4
      000746 E5*0A            [12] 2326 	mov	a,_alarm_arranger_min_idx_10000_64
      000748 25*00            [12] 2327 	add	a, _alarm_arranger_PARM_2
      00074A F8               [12] 2328 	mov	r0,a
      00074B E4               [12] 2329 	clr	a
      00074C 35*01            [12] 2330 	addc	a, (_alarm_arranger_PARM_2 + 1)
      00074E FD               [12] 2331 	mov	r5,a
      00074F AE*02            [24] 2332 	mov	r6,(_alarm_arranger_PARM_2 + 2)
      000751 88 82            [24] 2333 	mov	dpl,r0
      000753 8D 83            [24] 2334 	mov	dph,r5
      000755 8E F0            [24] 2335 	mov	b,r6
      000757 12r00r00         [24] 2336 	lcall	__gptrget
      00075A F8               [12] 2337 	mov	r0,a
      00075B EF               [12] 2338 	mov	a,r7
      00075C 25*00            [12] 2339 	add	a, _alarm_arranger_PARM_2
      00075E FC               [12] 2340 	mov	r4,a
      00075F E4               [12] 2341 	clr	a
      000760 35*01            [12] 2342 	addc	a, (_alarm_arranger_PARM_2 + 1)
      000762 FD               [12] 2343 	mov	r5,a
      000763 AE*02            [24] 2344 	mov	r6,(_alarm_arranger_PARM_2 + 2)
      000765 8C 82            [24] 2345 	mov	dpl,r4
      000767 8D 83            [24] 2346 	mov	dph,r5
      000769 8E F0            [24] 2347 	mov	b,r6
      00076B 12r00r00         [24] 2348 	lcall	__gptrget
      00076E FC               [12] 2349 	mov	r4,a
      00076F C3               [12] 2350 	clr	c
      000770 E8               [12] 2351 	mov	a,r0
      000771 9C               [12] 2352 	subb	a,r4
      000772 D0 04            [24] 2353 	pop	ar4
      000774 D0 03            [24] 2354 	pop	ar3
      000776 D0 02            [24] 2355 	pop	ar2
      000778 50 02            [24] 2356 	jnc	00113$
      00077A                       2357 00101$:
                                   2358 ;	main.c:440: min_idx = j;
      00077A AF*0A            [24] 2359 	mov	r7,_alarm_arranger_min_idx_10000_64
      00077C                       2360 00113$:
                                   2361 ;	main.c:438: for (j = i + 1; j < *n; j++) {
      00077C 05*0A            [12] 2362 	inc	_alarm_arranger_min_idx_10000_64
      00077E 02r06rED         [24] 2363 	ljmp	00112$
      000781                       2364 00105$:
                                   2365 ;	main.c:444: unsigned temp = hours[i];
      000781 C0 02            [24] 2366 	push	ar2
      000783 C0 03            [24] 2367 	push	ar3
      000785 C0 04            [24] 2368 	push	ar4
      000787 E9               [12] 2369 	mov	a,r1
      000788 25*06            [12] 2370 	add	a, _alarm_arranger_hours_10000_63
      00078A F8               [12] 2371 	mov	r0,a
      00078B E4               [12] 2372 	clr	a
      00078C 35*07            [12] 2373 	addc	a, (_alarm_arranger_hours_10000_63 + 1)
      00078E FD               [12] 2374 	mov	r5,a
      00078F AE*08            [24] 2375 	mov	r6,(_alarm_arranger_hours_10000_63 + 2)
      000791 88 82            [24] 2376 	mov	dpl,r0
      000793 8D 83            [24] 2377 	mov	dph,r5
      000795 8E F0            [24] 2378 	mov	b,r6
      000797 12r00r00         [24] 2379 	lcall	__gptrget
      00079A F5*0F            [12] 2380 	mov	_alarm_arranger_sloc0_1_0, a
                                   2381 ;	main.c:445: hours[i] = hours[min_idx];
      00079C EF               [12] 2382 	mov	a,r7
      00079D 25*06            [12] 2383 	add	a, _alarm_arranger_hours_10000_63
      00079F F5*10            [12] 2384 	mov	_alarm_arranger_sloc1_1_0,a
      0007A1 E4               [12] 2385 	clr	a
      0007A2 35*07            [12] 2386 	addc	a, (_alarm_arranger_hours_10000_63 + 1)
      0007A4 F5*11            [12] 2387 	mov	(_alarm_arranger_sloc1_1_0 + 1),a
      0007A6 85*08*12         [24] 2388 	mov	(_alarm_arranger_sloc1_1_0 + 2),(_alarm_arranger_hours_10000_63 + 2)
      0007A9 85*10 82         [24] 2389 	mov	dpl,_alarm_arranger_sloc1_1_0
      0007AC 85*11 83         [24] 2390 	mov	dph,(_alarm_arranger_sloc1_1_0 + 1)
      0007AF 85*12 F0         [24] 2391 	mov	b,(_alarm_arranger_sloc1_1_0 + 2)
      0007B2 12r00r00         [24] 2392 	lcall	__gptrget
      0007B5 88 82            [24] 2393 	mov	dpl,r0
      0007B7 8D 83            [24] 2394 	mov	dph,r5
      0007B9 8E F0            [24] 2395 	mov	b,r6
      0007BB 12r00r00         [24] 2396 	lcall	__gptrput
                                   2397 ;	main.c:446: hours[min_idx] = temp;
      0007BE AC*0F            [24] 2398 	mov	r4,_alarm_arranger_sloc0_1_0
      0007C0 85*10 82         [24] 2399 	mov	dpl,_alarm_arranger_sloc1_1_0
      0007C3 85*11 83         [24] 2400 	mov	dph,(_alarm_arranger_sloc1_1_0 + 1)
      0007C6 85*12 F0         [24] 2401 	mov	b,(_alarm_arranger_sloc1_1_0 + 2)
      0007C9 EC               [12] 2402 	mov	a,r4
      0007CA 12r00r00         [24] 2403 	lcall	__gptrput
                                   2404 ;	main.c:449: temp = minutes[i];
      0007CD E9               [12] 2405 	mov	a,r1
      0007CE 25*00            [12] 2406 	add	a, _alarm_arranger_PARM_2
      0007D0 FC               [12] 2407 	mov	r4,a
      0007D1 E4               [12] 2408 	clr	a
      0007D2 35*01            [12] 2409 	addc	a, (_alarm_arranger_PARM_2 + 1)
      0007D4 FD               [12] 2410 	mov	r5,a
      0007D5 AE*02            [24] 2411 	mov	r6,(_alarm_arranger_PARM_2 + 2)
      0007D7 8C 82            [24] 2412 	mov	dpl,r4
      0007D9 8D 83            [24] 2413 	mov	dph,r5
      0007DB 8E F0            [24] 2414 	mov	b,r6
      0007DD 12r00r00         [24] 2415 	lcall	__gptrget
      0007E0 F5*0B            [12] 2416 	mov	_alarm_arranger_temp_30001_71, a
                                   2417 ;	main.c:450: minutes[i] = minutes[min_idx];
      0007E2 EF               [12] 2418 	mov	a,r7
      0007E3 25*00            [12] 2419 	add	a, _alarm_arranger_PARM_2
      0007E5 F8               [12] 2420 	mov	r0,a
      0007E6 E4               [12] 2421 	clr	a
      0007E7 35*01            [12] 2422 	addc	a, (_alarm_arranger_PARM_2 + 1)
      0007E9 FA               [12] 2423 	mov	r2,a
      0007EA AF*02            [24] 2424 	mov	r7,(_alarm_arranger_PARM_2 + 2)
      0007EC 88 82            [24] 2425 	mov	dpl,r0
      0007EE 8A 83            [24] 2426 	mov	dph,r2
      0007F0 8F F0            [24] 2427 	mov	b,r7
      0007F2 12r00r00         [24] 2428 	lcall	__gptrget
      0007F5 8C 82            [24] 2429 	mov	dpl,r4
      0007F7 8D 83            [24] 2430 	mov	dph,r5
      0007F9 8E F0            [24] 2431 	mov	b,r6
      0007FB 12r00r00         [24] 2432 	lcall	__gptrput
                                   2433 ;	main.c:451: minutes[min_idx] = temp;
      0007FE AB*0B            [24] 2434 	mov	r3,_alarm_arranger_temp_30001_71
      000800 88 82            [24] 2435 	mov	dpl,r0
      000802 8A 83            [24] 2436 	mov	dph,r2
      000804 8F F0            [24] 2437 	mov	b,r7
      000806 EB               [12] 2438 	mov	a,r3
      000807 12r00r00         [24] 2439 	lcall	__gptrput
                                   2440 ;	main.c:436: for (i = 0; i < *n - 1; i++) {
      00080A 09               [12] 2441 	inc	r1
      00080B D0 04            [24] 2442 	pop	ar4
      00080D D0 03            [24] 2443 	pop	ar3
      00080F D0 02            [24] 2444 	pop	ar2
      000811 02r06rBE         [24] 2445 	ljmp	00115$
      000814                       2446 00106$:
                                   2447 ;	main.c:456: for (i = 1; i < *n; i++) {
      000814 75*0D 01         [24] 2448 	mov	_alarm_arranger___index_10001_72,#0x01
      000817 75*0E 00         [24] 2449 	mov	(_alarm_arranger___index_10001_72 + 1),#0x00
      00081A 75*09 01         [24] 2450 	mov	_alarm_arranger_i_10000_64,#0x01
      00081D                       2451 00118$:
      00081D 8A 82            [24] 2452 	mov	dpl,r2
      00081F 8B 83            [24] 2453 	mov	dph,r3
      000821 8C F0            [24] 2454 	mov	b,r4
      000823 12r00r00         [24] 2455 	lcall	__gptrget
      000826 F9               [12] 2456 	mov	r1,a
      000827 C3               [12] 2457 	clr	c
      000828 E5*09            [12] 2458 	mov	a,_alarm_arranger_i_10000_64
      00082A 99               [12] 2459 	subb	a,r1
      00082B 40 03            [24] 2460 	jc	00195$
      00082D 02r09r0B         [24] 2461 	ljmp	00110$
      000830                       2462 00195$:
                                   2463 ;	main.c:457: if (!(hours[i] == hours[__index - 1] && minutes[i] == minutes[__index - 1])) {
      000830 E5*09            [12] 2464 	mov	a,_alarm_arranger_i_10000_64
      000832 25*06            [12] 2465 	add	a, _alarm_arranger_hours_10000_63
      000834 F8               [12] 2466 	mov	r0,a
      000835 E4               [12] 2467 	clr	a
      000836 35*07            [12] 2468 	addc	a, (_alarm_arranger_hours_10000_63 + 1)
      000838 F9               [12] 2469 	mov	r1,a
      000839 AF*08            [24] 2470 	mov	r7,(_alarm_arranger_hours_10000_63 + 2)
      00083B 88 82            [24] 2471 	mov	dpl,r0
      00083D 89 83            [24] 2472 	mov	dph,r1
      00083F 8F F0            [24] 2473 	mov	b,r7
      000841 12r00r00         [24] 2474 	lcall	__gptrget
      000844 F8               [12] 2475 	mov	r0,a
      000845 E5*0D            [12] 2476 	mov	a,_alarm_arranger___index_10001_72
      000847 24 FF            [12] 2477 	add	a,#0xff
      000849 FE               [12] 2478 	mov	r6,a
      00084A E5*0E            [12] 2479 	mov	a,(_alarm_arranger___index_10001_72 + 1)
      00084C 34 FF            [12] 2480 	addc	a,#0xff
      00084E FF               [12] 2481 	mov	r7,a
      00084F EE               [12] 2482 	mov	a,r6
      000850 25*06            [12] 2483 	add	a, _alarm_arranger_hours_10000_63
      000852 FE               [12] 2484 	mov	r6,a
      000853 EF               [12] 2485 	mov	a,r7
      000854 35*07            [12] 2486 	addc	a, (_alarm_arranger_hours_10000_63 + 1)
      000856 F9               [12] 2487 	mov	r1,a
      000857 AF*08            [24] 2488 	mov	r7,(_alarm_arranger_hours_10000_63 + 2)
      000859 8E 82            [24] 2489 	mov	dpl,r6
      00085B 89 83            [24] 2490 	mov	dph,r1
      00085D 8F F0            [24] 2491 	mov	b,r7
      00085F 12r00r00         [24] 2492 	lcall	__gptrget
      000862 FE               [12] 2493 	mov	r6,a
      000863 E8               [12] 2494 	mov	a,r0
      000864 B5 06 39         [24] 2495 	cjne	a,ar6,00107$
      000867 E5*09            [12] 2496 	mov	a,_alarm_arranger_i_10000_64
      000869 25*00            [12] 2497 	add	a, _alarm_arranger_PARM_2
      00086B F9               [12] 2498 	mov	r1,a
      00086C E4               [12] 2499 	clr	a
      00086D 35*01            [12] 2500 	addc	a, (_alarm_arranger_PARM_2 + 1)
      00086F FE               [12] 2501 	mov	r6,a
      000870 AF*02            [24] 2502 	mov	r7,(_alarm_arranger_PARM_2 + 2)
      000872 89 82            [24] 2503 	mov	dpl,r1
      000874 8E 83            [24] 2504 	mov	dph,r6
      000876 8F F0            [24] 2505 	mov	b,r7
      000878 12r00r00         [24] 2506 	lcall	__gptrget
      00087B F9               [12] 2507 	mov	r1,a
      00087C E5*0D            [12] 2508 	mov	a,_alarm_arranger___index_10001_72
      00087E 24 FF            [12] 2509 	add	a,#0xff
      000880 FE               [12] 2510 	mov	r6,a
      000881 E5*0E            [12] 2511 	mov	a,(_alarm_arranger___index_10001_72 + 1)
      000883 34 FF            [12] 2512 	addc	a,#0xff
      000885 FF               [12] 2513 	mov	r7,a
      000886 EE               [12] 2514 	mov	a,r6
      000887 25*00            [12] 2515 	add	a, _alarm_arranger_PARM_2
      000889 FE               [12] 2516 	mov	r6,a
      00088A EF               [12] 2517 	mov	a,r7
      00088B 35*01            [12] 2518 	addc	a, (_alarm_arranger_PARM_2 + 1)
      00088D F8               [12] 2519 	mov	r0,a
      00088E AF*02            [24] 2520 	mov	r7,(_alarm_arranger_PARM_2 + 2)
      000890 8E 82            [24] 2521 	mov	dpl,r6
      000892 88 83            [24] 2522 	mov	dph,r0
      000894 8F F0            [24] 2523 	mov	b,r7
      000896 12r00r00         [24] 2524 	lcall	__gptrget
      000899 FE               [12] 2525 	mov	r6,a
      00089A E9               [12] 2526 	mov	a,r1
      00089B B5 06 02         [24] 2527 	cjne	a,ar6,00198$
      00089E 80 66            [24] 2528 	sjmp	00119$
      0008A0                       2529 00198$:
      0008A0                       2530 00107$:
                                   2531 ;	main.c:458: hours[__index] = hours[i];
      0008A0 C0 02            [24] 2532 	push	ar2
      0008A2 C0 03            [24] 2533 	push	ar3
      0008A4 C0 04            [24] 2534 	push	ar4
      0008A6 E5*0D            [12] 2535 	mov	a,_alarm_arranger___index_10001_72
      0008A8 25*06            [12] 2536 	add	a, _alarm_arranger_hours_10000_63
      0008AA F9               [12] 2537 	mov	r1,a
      0008AB E5*0E            [12] 2538 	mov	a,(_alarm_arranger___index_10001_72 + 1)
      0008AD 35*07            [12] 2539 	addc	a, (_alarm_arranger_hours_10000_63 + 1)
      0008AF FE               [12] 2540 	mov	r6,a
      0008B0 AF*08            [24] 2541 	mov	r7,(_alarm_arranger_hours_10000_63 + 2)
      0008B2 E5*09            [12] 2542 	mov	a,_alarm_arranger_i_10000_64
      0008B4 25*06            [12] 2543 	add	a, _alarm_arranger_hours_10000_63
      0008B6 F8               [12] 2544 	mov	r0,a
      0008B7 E4               [12] 2545 	clr	a
      0008B8 35*07            [12] 2546 	addc	a, (_alarm_arranger_hours_10000_63 + 1)
      0008BA FC               [12] 2547 	mov	r4,a
      0008BB AD*08            [24] 2548 	mov	r5,(_alarm_arranger_hours_10000_63 + 2)
      0008BD 88 82            [24] 2549 	mov	dpl,r0
      0008BF 8C 83            [24] 2550 	mov	dph,r4
      0008C1 8D F0            [24] 2551 	mov	b,r5
      0008C3 12r00r00         [24] 2552 	lcall	__gptrget
      0008C6 89 82            [24] 2553 	mov	dpl,r1
      0008C8 8E 83            [24] 2554 	mov	dph,r6
      0008CA 8F F0            [24] 2555 	mov	b,r7
      0008CC 12r00r00         [24] 2556 	lcall	__gptrput
                                   2557 ;	main.c:459: minutes[__index] = minutes[i];
      0008CF E5*0D            [12] 2558 	mov	a,_alarm_arranger___index_10001_72
      0008D1 25*00            [12] 2559 	add	a, _alarm_arranger_PARM_2
      0008D3 FD               [12] 2560 	mov	r5,a
      0008D4 E5*0E            [12] 2561 	mov	a,(_alarm_arranger___index_10001_72 + 1)
      0008D6 35*01            [12] 2562 	addc	a, (_alarm_arranger_PARM_2 + 1)
      0008D8 FE               [12] 2563 	mov	r6,a
      0008D9 AF*02            [24] 2564 	mov	r7,(_alarm_arranger_PARM_2 + 2)
      0008DB E5*09            [12] 2565 	mov	a,_alarm_arranger_i_10000_64
      0008DD 25*00            [12] 2566 	add	a, _alarm_arranger_PARM_2
      0008DF FA               [12] 2567 	mov	r2,a
      0008E0 E4               [12] 2568 	clr	a
      0008E1 35*01            [12] 2569 	addc	a, (_alarm_arranger_PARM_2 + 1)
      0008E3 FB               [12] 2570 	mov	r3,a
      0008E4 AC*02            [24] 2571 	mov	r4,(_alarm_arranger_PARM_2 + 2)
      0008E6 8A 82            [24] 2572 	mov	dpl,r2
      0008E8 8B 83            [24] 2573 	mov	dph,r3
      0008EA 8C F0            [24] 2574 	mov	b,r4
      0008EC 12r00r00         [24] 2575 	lcall	__gptrget
      0008EF 8D 82            [24] 2576 	mov	dpl,r5
      0008F1 8E 83            [24] 2577 	mov	dph,r6
      0008F3 8F F0            [24] 2578 	mov	b,r7
      0008F5 12r00r00         [24] 2579 	lcall	__gptrput
                                   2580 ;	main.c:460: __index++;
      0008F8 05*0D            [12] 2581 	inc	_alarm_arranger___index_10001_72
      0008FA E4               [12] 2582 	clr	a
      0008FB B5*0D 02         [24] 2583 	cjne	a,_alarm_arranger___index_10001_72,00199$
      0008FE 05*0E            [12] 2584 	inc	(_alarm_arranger___index_10001_72 + 1)
      000900                       2585 00199$:
                                   2586 ;	main.c:465: *n = __index;
      000900 D0 04            [24] 2587 	pop	ar4
      000902 D0 03            [24] 2588 	pop	ar3
      000904 D0 02            [24] 2589 	pop	ar2
                                   2590 ;	main.c:460: __index++;
      000906                       2591 00119$:
                                   2592 ;	main.c:456: for (i = 1; i < *n; i++) {
      000906 05*09            [12] 2593 	inc	_alarm_arranger_i_10000_64
      000908 02r08r1D         [24] 2594 	ljmp	00118$
      00090B                       2595 00110$:
                                   2596 ;	main.c:465: *n = __index;
      00090B AE*0D            [24] 2597 	mov	r6,_alarm_arranger___index_10001_72
      00090D 8A 82            [24] 2598 	mov	dpl,r2
      00090F 8B 83            [24] 2599 	mov	dph,r3
      000911 8C F0            [24] 2600 	mov	b,r4
      000913 EE               [12] 2601 	mov	a,r6
                                   2602 ;	main.c:467: }
      000914 02r00r00         [24] 2603 	ljmp	__gptrput
                                   2604 ;------------------------------------------------------------
                                   2605 ;Allocation info for local variables in function 'ds3232_set_alarm1'
                                   2606 ;------------------------------------------------------------
                                   2607 ;min           Allocated with name '_ds3232_set_alarm1_PARM_2'
                                   2608 ;sec           Allocated with name '_ds3232_set_alarm1_PARM_3'
                                   2609 ;hrs           Allocated to registers r7 
                                   2610 ;bcd_sec       Allocated to registers r6 
                                   2611 ;bcd_min       Allocated to registers r5 
                                   2612 ;bcd_hrs       Allocated to registers r7 
                                   2613 ;------------------------------------------------------------
                                   2614 ;	main.c:469: void ds3232_set_alarm1(unsigned char hrs, unsigned char min, unsigned char sec) {
                                   2615 ;	-----------------------------------------
                                   2616 ;	 function ds3232_set_alarm1
                                   2617 ;	-----------------------------------------
      000917                       2618 _ds3232_set_alarm1:
      000917 AF 82            [24] 2619 	mov	r7, dpl
                                   2620 ;	main.c:471: unsigned char bcd_sec = dec_to_bcd(sec);
      000919 85*53 82         [24] 2621 	mov	dpl, _ds3232_set_alarm1_PARM_3
      00091C C0 07            [24] 2622 	push	ar7
      00091E 12r02r75         [24] 2623 	lcall	_dec_to_bcd
      000921 AE 82            [24] 2624 	mov	r6, dpl
                                   2625 ;	main.c:472: unsigned char bcd_min = dec_to_bcd(min);
      000923 85*52 82         [24] 2626 	mov	dpl, _ds3232_set_alarm1_PARM_2
      000926 C0 06            [24] 2627 	push	ar6
      000928 12r02r75         [24] 2628 	lcall	_dec_to_bcd
      00092B AD 82            [24] 2629 	mov	r5, dpl
      00092D D0 06            [24] 2630 	pop	ar6
      00092F D0 07            [24] 2631 	pop	ar7
                                   2632 ;	main.c:473: unsigned char bcd_hrs = dec_to_bcd(hrs);
      000931 8F 82            [24] 2633 	mov	dpl, r7
      000933 C0 06            [24] 2634 	push	ar6
      000935 C0 05            [24] 2635 	push	ar5
      000937 12r02r75         [24] 2636 	lcall	_dec_to_bcd
      00093A AF 82            [24] 2637 	mov	r7, dpl
      00093C D0 05            [24] 2638 	pop	ar5
      00093E D0 06            [24] 2639 	pop	ar6
                                   2640 ;	main.c:476: i2c_start();
      000940 C0 07            [24] 2641 	push	ar7
      000942 C0 06            [24] 2642 	push	ar6
      000944 C0 05            [24] 2643 	push	ar5
      000946 12r01rB3         [24] 2644 	lcall	_i2c_start
                                   2645 ;	main.c:477: i2c_write((DS3232_ADDRESS << 1) | 0);  // Write mode
      000949 75 82 D0         [24] 2646 	mov	dpl, #0xd0
      00094C 12r01rDA         [24] 2647 	lcall	_i2c_write
                                   2648 ;	main.c:478: i2c_write(0x07); // Alarm1 register start
      00094F 75 82 07         [24] 2649 	mov	dpl, #0x07
      000952 12r01rDA         [24] 2650 	lcall	_i2c_write
      000955 D0 05            [24] 2651 	pop	ar5
      000957 D0 06            [24] 2652 	pop	ar6
                                   2653 ;	main.c:480: i2c_write(bcd_sec & 0x7F);      // A1 Seconds, A1M1 = 0
      000959 74 7F            [12] 2654 	mov	a,#0x7f
      00095B 5E               [12] 2655 	anl	a,r6
      00095C F5 82            [12] 2656 	mov	dpl,a
      00095E C0 05            [24] 2657 	push	ar5
      000960 12r01rDA         [24] 2658 	lcall	_i2c_write
      000963 D0 05            [24] 2659 	pop	ar5
                                   2660 ;	main.c:481: i2c_write(bcd_min & 0x7F);      // A1 Minutes, A1M2 = 0
      000965 74 7F            [12] 2661 	mov	a,#0x7f
      000967 5D               [12] 2662 	anl	a,r5
      000968 F5 82            [12] 2663 	mov	dpl,a
      00096A 12r01rDA         [24] 2664 	lcall	_i2c_write
      00096D D0 07            [24] 2665 	pop	ar7
                                   2666 ;	main.c:482: i2c_write(bcd_hrs & 0x7F);      // A1 Hours, A1M3 = 0
      00096F 74 7F            [12] 2667 	mov	a,#0x7f
      000971 5F               [12] 2668 	anl	a,r7
      000972 F5 82            [12] 2669 	mov	dpl,a
      000974 12r01rDA         [24] 2670 	lcall	_i2c_write
                                   2671 ;	main.c:483: i2c_write(0x80);                // A1 Day/Date, A1M4 = 1 (donÃ¢â‚¬â„¢t care about day/date)
      000977 75 82 80         [24] 2672 	mov	dpl, #0x80
      00097A 12r01rDA         [24] 2673 	lcall	_i2c_write
                                   2674 ;	main.c:484: i2c_stop();
      00097D 12r01rC8         [24] 2675 	lcall	_i2c_stop
                                   2676 ;	main.c:487: i2c_start();
      000980 12r01rB3         [24] 2677 	lcall	_i2c_start
                                   2678 ;	main.c:488: i2c_write((DS3232_ADDRESS << 1) | 0);
      000983 75 82 D0         [24] 2679 	mov	dpl, #0xd0
      000986 12r01rDA         [24] 2680 	lcall	_i2c_write
                                   2681 ;	main.c:489: i2c_write(0x0E); // Control register
      000989 75 82 0E         [24] 2682 	mov	dpl, #0x0e
      00098C 12r01rDA         [24] 2683 	lcall	_i2c_write
                                   2684 ;	main.c:490: i2c_write(0x05); // 00000101 => A1IE = 1, INTCN = 1
      00098F 75 82 05         [24] 2685 	mov	dpl, #0x05
      000992 12r01rDA         [24] 2686 	lcall	_i2c_write
                                   2687 ;	main.c:491: i2c_stop();
      000995 12r01rC8         [24] 2688 	lcall	_i2c_stop
                                   2689 ;	main.c:494: i2c_start();
      000998 12r01rB3         [24] 2690 	lcall	_i2c_start
                                   2691 ;	main.c:495: i2c_write((DS3232_ADDRESS << 1) | 0);
      00099B 75 82 D0         [24] 2692 	mov	dpl, #0xd0
      00099E 12r01rDA         [24] 2693 	lcall	_i2c_write
                                   2694 ;	main.c:496: i2c_write(0x0F); // Status register
      0009A1 75 82 0F         [24] 2695 	mov	dpl, #0x0f
      0009A4 12r01rDA         [24] 2696 	lcall	_i2c_write
                                   2697 ;	main.c:497: i2c_write(0x00); // Clear A1F
      0009A7 75 82 00         [24] 2698 	mov	dpl, #0x00
      0009AA 12r01rDA         [24] 2699 	lcall	_i2c_write
                                   2700 ;	main.c:498: i2c_stop();
                                   2701 ;	main.c:499: }
      0009AD 02r01rC8         [24] 2702 	ljmp	_i2c_stop
                                   2703 ;------------------------------------------------------------
                                   2704 ;Allocation info for local variables in function 'set_clock'
                                   2705 ;------------------------------------------------------------
                                   2706 ;	main.c:501: void set_clock() {
                                   2707 ;	-----------------------------------------
                                   2708 ;	 function set_clock
                                   2709 ;	-----------------------------------------
      0009B0                       2710 _set_clock:
                                   2711 ;	main.c:502: idle_counter = 0;
      0009B0 E4               [12] 2712 	clr	a
      0009B1 F5*08            [12] 2713 	mov	_idle_counter,a
      0009B3 F5*09            [12] 2714 	mov	(_idle_counter + 1),a
                                   2715 ;	main.c:503: index = 0;
      0009B5 F5*13            [12] 2716 	mov	_index,a
      0009B7 F5*14            [12] 2717 	mov	(_index + 1),a
                                   2718 ;	main.c:504: display(time_date[0], time_date[1], time_date[2], time_date[4], time_date[5], time_date[6], time_date[3] + 1);
      0009B9 85*00 82         [24] 2719 	mov	dpl,_time_date
      0009BC 85*01*49         [24] 2720 	mov	_display_PARM_2,(_time_date + 0x0001)
      0009BF 85*02*4A         [24] 2721 	mov	_display_PARM_3,(_time_date + 0x0002)
      0009C2 85*04*4B         [24] 2722 	mov	_display_PARM_4,(_time_date + 0x0004)
      0009C5 85*05*4C         [24] 2723 	mov	_display_PARM_5,(_time_date + 0x0005)
      0009C8 85*06*4D         [24] 2724 	mov	_display_PARM_6,(_time_date + 0x0006)
      0009CB E5*03            [12] 2725 	mov	a,(_time_date + 0x0003)
      0009CD 04               [12] 2726 	inc	a
      0009CE F5*4E            [12] 2727 	mov	_display_PARM_7,a
      0009D0 12r04r3C         [24] 2728 	lcall	_display
                                   2729 ;	main.c:506: while (index < 7) {
      0009D3                       2730 00116$:
      0009D3 C3               [12] 2731 	clr	c
      0009D4 E5*13            [12] 2732 	mov	a,_index
      0009D6 94 07            [12] 2733 	subb	a,#0x07
      0009D8 E5*14            [12] 2734 	mov	a,(_index + 1)
      0009DA 64 80            [12] 2735 	xrl	a,#0x80
      0009DC 94 80            [12] 2736 	subb	a,#0x80
      0009DE 40 03            [24] 2737 	jc	00177$
      0009E0 02r0ArBE         [24] 2738 	ljmp	00118$
      0009E3                       2739 00177$:
                                   2740 ;	main.c:507: delay(10000);
      0009E3 90 27 10         [24] 2741 	mov	dptr,#0x2710
      0009E6 12r00r00         [24] 2742 	lcall	_delay
                                   2743 ;	main.c:508: if (!up) {
      0009E9 20 B4 48         [24] 2744 	jb	_up,00104$
                                   2745 ;	main.c:509: delay(10000); // debounce
      0009EC 90 27 10         [24] 2746 	mov	dptr,#0x2710
      0009EF 12r00r00         [24] 2747 	lcall	_delay
                                   2748 ;	main.c:510: time_date[index]++;
      0009F2 E5*13            [12] 2749 	mov	a,_index
      0009F4 24r00            [12] 2750 	add	a, #_time_date
      0009F6 F9               [12] 2751 	mov	r1,a
      0009F7 07               [12] 2752 	inc	@r1
      0009F8 E7               [12] 2753 	mov	a,@r1
                                   2754 ;	main.c:511: if (time_date[index] >= max_vals[index]) {
      0009F9 E5*13            [12] 2755 	mov	a,_index
      0009FB 24r00            [12] 2756 	add	a, #_time_date
      0009FD F9               [12] 2757 	mov	r1,a
      0009FE 87 07            [24] 2758 	mov	ar7,@r1
      000A00 E5*13            [12] 2759 	mov	a,_index
      000A02 24r10            [12] 2760 	add	a, #_max_vals
      000A04 F8               [12] 2761 	mov	r0,a
      000A05 86 06            [24] 2762 	mov	ar6,@r0
      000A07 C3               [12] 2763 	clr	c
      000A08 EF               [12] 2764 	mov	a,r7
      000A09 9E               [12] 2765 	subb	a,r6
      000A0A 40 09            [24] 2766 	jc	00102$
                                   2767 ;	main.c:512: time_date[index] = min_vals[index];
      000A0C E5*13            [12] 2768 	mov	a,_index
      000A0E 24r17            [12] 2769 	add	a, #_min_vals
      000A10 F8               [12] 2770 	mov	r0,a
      000A11 86 07            [24] 2771 	mov	ar7,@r0
      000A13 A7 07            [24] 2772 	mov	@r1,ar7
      000A15                       2773 00102$:
                                   2774 ;	main.c:514: display(time_date[0], time_date[1], time_date[2], time_date[4], time_date[5], time_date[6], time_date[3] + 1);
      000A15 85*00 82         [24] 2775 	mov	dpl,_time_date
      000A18 85*01*49         [24] 2776 	mov	_display_PARM_2,(_time_date + 0x0001)
      000A1B 85*02*4A         [24] 2777 	mov	_display_PARM_3,(_time_date + 0x0002)
      000A1E 85*04*4B         [24] 2778 	mov	_display_PARM_4,(_time_date + 0x0004)
      000A21 85*05*4C         [24] 2779 	mov	_display_PARM_5,(_time_date + 0x0005)
      000A24 85*06*4D         [24] 2780 	mov	_display_PARM_6,(_time_date + 0x0006)
      000A27 E5*03            [12] 2781 	mov	a,(_time_date + 0x0003)
      000A29 04               [12] 2782 	inc	a
      000A2A F5*4E            [12] 2783 	mov	_display_PARM_7,a
      000A2C 12r04r3C         [24] 2784 	lcall	_display
                                   2785 ;	main.c:515: idle_counter = 0;
      000A2F E4               [12] 2786 	clr	a
      000A30 F5*08            [12] 2787 	mov	_idle_counter,a
      000A32 F5*09            [12] 2788 	mov	(_idle_counter + 1),a
      000A34                       2789 00104$:
                                   2790 ;	main.c:518: if (!down) {
      000A34 20 B5 45         [24] 2791 	jb	_down,00109$
                                   2792 ;	main.c:519: delay(10000); // debounce
      000A37 90 27 10         [24] 2793 	mov	dptr,#0x2710
      000A3A 12r00r00         [24] 2794 	lcall	_delay
                                   2795 ;	main.c:520: if (time_date[index] <= min_vals[index]) {
      000A3D E5*13            [12] 2796 	mov	a,_index
      000A3F 24r00            [12] 2797 	add	a, #_time_date
      000A41 F9               [12] 2798 	mov	r1,a
      000A42 87 07            [24] 2799 	mov	ar7,@r1
      000A44 E5*13            [12] 2800 	mov	a,_index
      000A46 24r17            [12] 2801 	add	a, #_min_vals
      000A48 F8               [12] 2802 	mov	r0,a
      000A49 86 06            [24] 2803 	mov	ar6,@r0
      000A4B C3               [12] 2804 	clr	c
      000A4C EE               [12] 2805 	mov	a,r6
      000A4D 9F               [12] 2806 	subb	a,r7
      000A4E 40 0A            [24] 2807 	jc	00106$
                                   2808 ;	main.c:521: time_date[index] = max_vals[index] - 1;
      000A50 E5*13            [12] 2809 	mov	a,_index
      000A52 24r10            [12] 2810 	add	a, #_max_vals
      000A54 F8               [12] 2811 	mov	r0,a
      000A55 E6               [12] 2812 	mov	a,@r0
      000A56 14               [12] 2813 	dec	a
      000A57 F7               [12] 2814 	mov	@r1,a
      000A58 80 03            [24] 2815 	sjmp	00107$
      000A5A                       2816 00106$:
                                   2817 ;	main.c:523: time_date[index]--;
      000A5A E7               [12] 2818 	mov	a,@r1
      000A5B 14               [12] 2819 	dec	a
      000A5C F7               [12] 2820 	mov	@r1,a
      000A5D                       2821 00107$:
                                   2822 ;	main.c:525: display(time_date[0], time_date[1], time_date[2], time_date[4], time_date[5], time_date[6], time_date[3] + 1);
      000A5D 85*00 82         [24] 2823 	mov	dpl,_time_date
      000A60 85*01*49         [24] 2824 	mov	_display_PARM_2,(_time_date + 0x0001)
      000A63 85*02*4A         [24] 2825 	mov	_display_PARM_3,(_time_date + 0x0002)
      000A66 85*04*4B         [24] 2826 	mov	_display_PARM_4,(_time_date + 0x0004)
      000A69 85*05*4C         [24] 2827 	mov	_display_PARM_5,(_time_date + 0x0005)
      000A6C 85*06*4D         [24] 2828 	mov	_display_PARM_6,(_time_date + 0x0006)
      000A6F E5*03            [12] 2829 	mov	a,(_time_date + 0x0003)
      000A71 04               [12] 2830 	inc	a
      000A72 F5*4E            [12] 2831 	mov	_display_PARM_7,a
      000A74 12r04r3C         [24] 2832 	lcall	_display
                                   2833 ;	main.c:526: idle_counter = 0;
      000A77 E4               [12] 2834 	clr	a
      000A78 F5*08            [12] 2835 	mov	_idle_counter,a
      000A7A F5*09            [12] 2836 	mov	(_idle_counter + 1),a
      000A7C                       2837 00109$:
                                   2838 ;	main.c:529: if (!next) {
      000A7C 20 B6 13         [24] 2839 	jb	_next,00111$
                                   2840 ;	main.c:530: delay(10000); // debounce
      000A7F 90 27 10         [24] 2841 	mov	dptr,#0x2710
      000A82 12r00r00         [24] 2842 	lcall	_delay
                                   2843 ;	main.c:531: index = index+1;
      000A85 05*13            [12] 2844 	inc	_index
      000A87 E4               [12] 2845 	clr	a
      000A88 B5*13 02         [24] 2846 	cjne	a,_index,00183$
      000A8B 05*14            [12] 2847 	inc	(_index + 1)
      000A8D                       2848 00183$:
                                   2849 ;	main.c:532: idle_counter = 0;
      000A8D E4               [12] 2850 	clr	a
      000A8E F5*08            [12] 2851 	mov	_idle_counter,a
      000A90 F5*09            [12] 2852 	mov	(_idle_counter + 1),a
      000A92                       2853 00111$:
                                   2854 ;	main.c:535: if (!back) {
      000A92 20 B7 14         [24] 2855 	jb	_back,00113$
                                   2856 ;	main.c:536: delay(10000); // debounce
      000A95 90 27 10         [24] 2857 	mov	dptr,#0x2710
      000A98 12r00r00         [24] 2858 	lcall	_delay
                                   2859 ;	main.c:537: index = index-1;
      000A9B 15*13            [12] 2860 	dec	_index
      000A9D 74 FF            [12] 2861 	mov	a,#0xff
      000A9F B5*13 02         [24] 2862 	cjne	a,_index,00185$
      000AA2 15*14            [12] 2863 	dec	(_index + 1)
      000AA4                       2864 00185$:
                                   2865 ;	main.c:538: idle_counter = 0;
      000AA4 E4               [12] 2866 	clr	a
      000AA5 F5*08            [12] 2867 	mov	_idle_counter,a
      000AA7 F5*09            [12] 2868 	mov	(_idle_counter + 1),a
      000AA9                       2869 00113$:
                                   2870 ;	main.c:540: if (++idle_counter >30) {
      000AA9 05*08            [12] 2871 	inc	_idle_counter
      000AAB E4               [12] 2872 	clr	a
      000AAC B5*08 02         [24] 2873 	cjne	a,_idle_counter,00186$
      000AAF 05*09            [12] 2874 	inc	(_idle_counter + 1)
      000AB1                       2875 00186$:
      000AB1 C3               [12] 2876 	clr	c
      000AB2 74 1E            [12] 2877 	mov	a,#0x1e
      000AB4 95*08            [12] 2878 	subb	a,_idle_counter
      000AB6 E4               [12] 2879 	clr	a
      000AB7 95*09            [12] 2880 	subb	a,(_idle_counter + 1)
      000AB9 40 03            [24] 2881 	jc	00187$
      000ABB 02r09rD3         [24] 2882 	ljmp	00116$
      000ABE                       2883 00187$:
                                   2884 ;	main.c:541: break;
      000ABE                       2885 00118$:
                                   2886 ;	main.c:544: if (idle_counter <= 30) {
      000ABE C3               [12] 2887 	clr	c
      000ABF 74 1E            [12] 2888 	mov	a,#0x1e
      000AC1 95*08            [12] 2889 	subb	a,_idle_counter
      000AC3 E4               [12] 2890 	clr	a
      000AC4 95*09            [12] 2891 	subb	a,(_idle_counter + 1)
      000AC6 40 1A            [24] 2892 	jc	00120$
                                   2893 ;	main.c:545: ds3232_set_time_date(time_date[0], time_date[1], time_date[2], time_date[3] + 1, time_date[4], time_date[5], time_date[6]);
      000AC8 85*00 82         [24] 2894 	mov	dpl,_time_date
      000ACB 85*01*31         [24] 2895 	mov	_ds3232_set_time_date_PARM_2,(_time_date + 0x0001)
      000ACE 85*02*32         [24] 2896 	mov	_ds3232_set_time_date_PARM_3,(_time_date + 0x0002)
      000AD1 E5*03            [12] 2897 	mov	a,(_time_date + 0x0003)
      000AD3 04               [12] 2898 	inc	a
      000AD4 F5*33            [12] 2899 	mov	_ds3232_set_time_date_PARM_4,a
      000AD6 85*04*34         [24] 2900 	mov	_ds3232_set_time_date_PARM_5,(_time_date + 0x0004)
      000AD9 85*05*35         [24] 2901 	mov	_ds3232_set_time_date_PARM_6,(_time_date + 0x0005)
      000ADC 85*06*36         [24] 2902 	mov	_ds3232_set_time_date_PARM_7,(_time_date + 0x0006)
      000ADF 12r02rB7         [24] 2903 	lcall	_ds3232_set_time_date
      000AE2                       2904 00120$:
                                   2905 ;	main.c:548: idle_counter = 0;
      000AE2 E4               [12] 2906 	clr	a
      000AE3 F5*08            [12] 2907 	mov	_idle_counter,a
      000AE5 F5*09            [12] 2908 	mov	(_idle_counter + 1),a
                                   2909 ;	main.c:549: }
      000AE7 22               [24] 2910 	ret
                                   2911 ;------------------------------------------------------------
                                   2912 ;Allocation info for local variables in function 'set_alarms'
                                   2913 ;------------------------------------------------------------
                                   2914 ;i             Allocated to registers r7 
                                   2915 ;total_mins    Allocated with name '_set_alarms_total_mins_10002_135'
                                   2916 ;total_mins1   Allocated with name '_set_alarms_total_mins1_50002_140'
                                   2917 ;total_mins2   Allocated to registers r6 r4 
                                   2918 ;sloc0         Allocated with name '_set_alarms_sloc0_1_0'
                                   2919 ;------------------------------------------------------------
                                   2920 ;	main.c:551: void set_alarms() {
                                   2921 ;	-----------------------------------------
                                   2922 ;	 function set_alarms
                                   2923 ;	-----------------------------------------
      000AE8                       2924 _set_alarms:
                                   2925 ;	main.c:552: idle_counter = 0;
      000AE8 E4               [12] 2926 	clr	a
      000AE9 F5*08            [12] 2927 	mov	_idle_counter,a
      000AEB F5*09            [12] 2928 	mov	(_idle_counter + 1),a
                                   2929 ;	main.c:555: lcd_clear();
      000AED 12r00rEB         [24] 2930 	lcall	_lcd_clear
                                   2931 ;	main.c:556: lcd_goto(0, 0);
      000AF0 75*30 00         [24] 2932 	mov	_lcd_goto_PARM_2,#0x00
      000AF3 75 82 00         [24] 2933 	mov	dpl, #0x00
      000AF6 12r00rF7         [24] 2934 	lcall	_lcd_goto
                                   2935 ;	main.c:557: lcd_string(" How many alarms");
      000AF9 90r00r00         [24] 2936 	mov	dptr,#___str_0
      000AFC 75 F0 80         [24] 2937 	mov	b, #0x80
      000AFF 12r00rC0         [24] 2938 	lcall	_lcd_string
                                   2939 ;	main.c:558: while (1) {
      000B02                       2940 00114$:
                                   2941 ;	main.c:559: lcd_goto(1, 6);
      000B02 75*30 06         [24] 2942 	mov	_lcd_goto_PARM_2,#0x06
      000B05 75 82 01         [24] 2943 	mov	dpl, #0x01
      000B08 12r00rF7         [24] 2944 	lcall	_lcd_goto
                                   2945 ;	main.c:560: lcd_char(num_alarms + '0');
      000B0B AF*07            [24] 2946 	mov	r7,_num_alarms
      000B0D 74 30            [12] 2947 	mov	a,#0x30
      000B0F 2F               [12] 2948 	add	a, r7
      000B10 F5 82            [12] 2949 	mov	dpl,a
      000B12 12r00r9F         [24] 2950 	lcall	_lcd_char
                                   2951 ;	main.c:561: delay(10000);
      000B15 90 27 10         [24] 2952 	mov	dptr,#0x2710
      000B18 12r00r00         [24] 2953 	lcall	_delay
                                   2954 ;	main.c:563: if (!up) {
      000B1B 20 B4 13         [24] 2955 	jb	_up,00104$
                                   2956 ;	main.c:564: delay(10000);
      000B1E 90 27 10         [24] 2957 	mov	dptr,#0x2710
      000B21 12r00r00         [24] 2958 	lcall	_delay
                                   2959 ;	main.c:565: if (num_alarms < NUM_ALARMS) num_alarms++;
      000B24 74 F8            [12] 2960 	mov	a,#0x100 - 0x08
      000B26 25*07            [12] 2961 	add	a,_num_alarms
      000B28 40 02            [24] 2962 	jc	00102$
      000B2A 05*07            [12] 2963 	inc	_num_alarms
      000B2C                       2964 00102$:
                                   2965 ;	main.c:566: idle_counter = 0;
      000B2C E4               [12] 2966 	clr	a
      000B2D F5*08            [12] 2967 	mov	_idle_counter,a
      000B2F F5*09            [12] 2968 	mov	(_idle_counter + 1),a
      000B31                       2969 00104$:
                                   2970 ;	main.c:569: if (!down) {
      000B31 20 B5 13         [24] 2971 	jb	_down,00108$
                                   2972 ;	main.c:570: delay(10000);
      000B34 90 27 10         [24] 2973 	mov	dptr,#0x2710
      000B37 12r00r00         [24] 2974 	lcall	_delay
                                   2975 ;	main.c:571: if (num_alarms > 1) num_alarms--;
      000B3A E5*07            [12] 2976 	mov	a,_num_alarms
      000B3C 24 FE            [12] 2977 	add	a,#0xff - 0x01
      000B3E 50 02            [24] 2978 	jnc	00106$
      000B40 15*07            [12] 2979 	dec	_num_alarms
      000B42                       2980 00106$:
                                   2981 ;	main.c:572: idle_counter = 0;
      000B42 E4               [12] 2982 	clr	a
      000B43 F5*08            [12] 2983 	mov	_idle_counter,a
      000B45 F5*09            [12] 2984 	mov	(_idle_counter + 1),a
      000B47                       2985 00108$:
                                   2986 ;	main.c:575: if (!next) {
      000B47 20 B6 08         [24] 2987 	jb	_next,00110$
                                   2988 ;	main.c:576: delay(10000);
      000B4A 90 27 10         [24] 2989 	mov	dptr,#0x2710
      000B4D 12r00r00         [24] 2990 	lcall	_delay
                                   2991 ;	main.c:577: break;
      000B50 80 36            [24] 2992 	sjmp	00189$
      000B52                       2993 00110$:
                                   2994 ;	main.c:580: if (++idle_counter > 30) {
      000B52 05*08            [12] 2995 	inc	_idle_counter
      000B54 E4               [12] 2996 	clr	a
      000B55 B5*08 02         [24] 2997 	cjne	a,_idle_counter,00354$
      000B58 05*09            [12] 2998 	inc	(_idle_counter + 1)
      000B5A                       2999 00354$:
      000B5A C3               [12] 3000 	clr	c
      000B5B 74 1E            [12] 3001 	mov	a,#0x1e
      000B5D 95*08            [12] 3002 	subb	a,_idle_counter
      000B5F E4               [12] 3003 	clr	a
      000B60 95*09            [12] 3004 	subb	a,(_idle_counter + 1)
      000B62 50 9E            [24] 3005 	jnc	00114$
                                   3006 ;	main.c:581: lcd_clear();
      000B64 12r00rEB         [24] 3007 	lcall	_lcd_clear
                                   3008 ;	main.c:582: lcd_goto(0,0);
      000B67 75*30 00         [24] 3009 	mov	_lcd_goto_PARM_2,#0x00
      000B6A 75 82 00         [24] 3010 	mov	dpl, #0x00
      000B6D 12r00rF7         [24] 3011 	lcall	_lcd_goto
                                   3012 ;	main.c:583: lcd_string(" Time limit exc!");
      000B70 90r00r11         [24] 3013 	mov	dptr,#___str_1
      000B73 75 F0 80         [24] 3014 	mov	b, #0x80
      000B76 12r00rC0         [24] 3015 	lcall	_lcd_string
                                   3016 ;	main.c:584: delay_ms(3000);
      000B79 90 0B B8         [24] 3017 	mov	dptr,#0x0bb8
      000B7C 12r00r24         [24] 3018 	lcall	_delay_ms
                                   3019 ;	main.c:585: lcd_clear();
      000B7F 12r00rEB         [24] 3020 	lcall	_lcd_clear
                                   3021 ;	main.c:586: idle_counter = 0;
      000B82 E4               [12] 3022 	clr	a
      000B83 F5*08            [12] 3023 	mov	_idle_counter,a
      000B85 F5*09            [12] 3024 	mov	(_idle_counter + 1),a
                                   3025 ;	main.c:587: return;  //time exceeded
      000B87 22               [24] 3026 	ret
                                   3027 ;	main.c:592: for (i = 0; i < num_alarms; i++) {
      000B88                       3028 00189$:
      000B88 7F 00            [12] 3029 	mov	r7,#0x00
      000B8A                       3030 00153$:
      000B8A C3               [12] 3031 	clr	c
      000B8B EF               [12] 3032 	mov	a,r7
      000B8C 95*07            [12] 3033 	subb	a,_num_alarms
      000B8E 40 03            [24] 3034 	jc	00356$
      000B90 02r0DrB3         [24] 3035 	ljmp	00142$
      000B93                       3036 00356$:
                                   3037 ;	main.c:593: idle_counter = 0;
      000B93 E4               [12] 3038 	clr	a
      000B94 F5*08            [12] 3039 	mov	_idle_counter,a
      000B96 F5*09            [12] 3040 	mov	(_idle_counter + 1),a
                                   3041 ;	main.c:596: lcd_clear();
      000B98 C0 07            [24] 3042 	push	ar7
      000B9A 12r00rEB         [24] 3043 	lcall	_lcd_clear
                                   3044 ;	main.c:597: lcd_goto(0, 0);
      000B9D 75*30 00         [24] 3045 	mov	_lcd_goto_PARM_2,#0x00
      000BA0 75 82 00         [24] 3046 	mov	dpl, #0x00
      000BA3 12r00rF7         [24] 3047 	lcall	_lcd_goto
                                   3048 ;	main.c:598: lcd_string(" Set Hour Alarm ");
      000BA6 90r00r22         [24] 3049 	mov	dptr,#___str_2
      000BA9 75 F0 80         [24] 3050 	mov	b, #0x80
      000BAC 12r00rC0         [24] 3051 	lcall	_lcd_string
                                   3052 ;	main.c:599: lcd_goto(1, 0);
      000BAF 75*30 00         [24] 3053 	mov	_lcd_goto_PARM_2,#0x00
      000BB2 75 82 01         [24] 3054 	mov	dpl, #0x01
      000BB5 12r00rF7         [24] 3055 	lcall	_lcd_goto
                                   3056 ;	main.c:600: lcd_string("Alarm ");
      000BB8 90r00r33         [24] 3057 	mov	dptr,#___str_3
      000BBB 75 F0 80         [24] 3058 	mov	b, #0x80
      000BBE 12r00rC0         [24] 3059 	lcall	_lcd_string
      000BC1 D0 07            [24] 3060 	pop	ar7
                                   3061 ;	main.c:601: lcd_char('1' + i);
      000BC3 8F 06            [24] 3062 	mov	ar6,r7
      000BC5 74 31            [12] 3063 	mov	a,#0x31
      000BC7 2E               [12] 3064 	add	a, r6
      000BC8 F5 82            [12] 3065 	mov	dpl,a
      000BCA C0 07            [24] 3066 	push	ar7
      000BCC 12r00r9F         [24] 3067 	lcall	_lcd_char
      000BCF D0 07            [24] 3068 	pop	ar7
                                   3069 ;	main.c:603: while (1) {
      000BD1                       3070 00127$:
                                   3071 ;	main.c:604: lcd_goto(1, 9);
      000BD1 75*30 09         [24] 3072 	mov	_lcd_goto_PARM_2,#0x09
      000BD4 75 82 01         [24] 3073 	mov	dpl, #0x01
      000BD7 C0 07            [24] 3074 	push	ar7
      000BD9 12r00rF7         [24] 3075 	lcall	_lcd_goto
                                   3076 ;	main.c:605: int_to_str(hr, buf);
      000BDC 75*00r2B         [24] 3077 	mov	_int_to_str_PARM_2,#_buf
      000BDF 75*01 00         [24] 3078 	mov	(_int_to_str_PARM_2 + 1),#0x00
      000BE2 75*02 40         [24] 3079 	mov	(_int_to_str_PARM_2 + 2),#0x40
      000BE5 85*2E 82         [24] 3080 	mov	dpl, _hr
      000BE8 12r01r62         [24] 3081 	lcall	_int_to_str
                                   3082 ;	main.c:606: lcd_string(buf);
      000BEB 90r00r2B         [24] 3083 	mov	dptr,#_buf
      000BEE 75 F0 40         [24] 3084 	mov	b, #0x40
      000BF1 12r00rC0         [24] 3085 	lcall	_lcd_string
                                   3086 ;	main.c:607: delay(10000);
      000BF4 90 27 10         [24] 3087 	mov	dptr,#0x2710
      000BF7 12r00r00         [24] 3088 	lcall	_delay
      000BFA D0 07            [24] 3089 	pop	ar7
                                   3090 ;	main.c:609: if (!up) {
      000BFC 20 B4 24         [24] 3091 	jb	_up,00117$
                                   3092 ;	main.c:610: delay(10000);
      000BFF 90 27 10         [24] 3093 	mov	dptr,#0x2710
      000C02 C0 07            [24] 3094 	push	ar7
      000C04 12r00r00         [24] 3095 	lcall	_delay
                                   3096 ;	main.c:611: hr = (hr + 1) % 24;
      000C07 AD*2E            [24] 3097 	mov	r5,_hr
      000C09 7E 00            [12] 3098 	mov	r6,#0x00
      000C0B 8D 82            [24] 3099 	mov	dpl,r5
      000C0D 8E 83            [24] 3100 	mov	dph,r6
      000C0F A3               [24] 3101 	inc	dptr
      000C10 75*00 18         [24] 3102 	mov	__modsint_PARM_2,#0x18
      000C13 8E*01            [24] 3103 	mov	(__modsint_PARM_2 + 1),r6
      000C15 12r00r00         [24] 3104 	lcall	__modsint
      000C18 AD 82            [24] 3105 	mov	r5, dpl
      000C1A D0 07            [24] 3106 	pop	ar7
      000C1C 8D*2E            [24] 3107 	mov	_hr,r5
                                   3108 ;	main.c:612: idle_counter = 0;
      000C1E E4               [12] 3109 	clr	a
      000C1F F5*08            [12] 3110 	mov	_idle_counter,a
      000C21 F5*09            [12] 3111 	mov	(_idle_counter + 1),a
      000C23                       3112 00117$:
                                   3113 ;	main.c:614: if (!down) {
      000C23 20 B5 21         [24] 3114 	jb	_down,00119$
                                   3115 ;	main.c:615: delay(10000);
      000C26 90 27 10         [24] 3116 	mov	dptr,#0x2710
      000C29 C0 07            [24] 3117 	push	ar7
      000C2B 12r00r00         [24] 3118 	lcall	_delay
      000C2E D0 07            [24] 3119 	pop	ar7
                                   3120 ;	main.c:616: hr = (hr == 0) ? 23 : hr - 1;
      000C30 E5*2E            [12] 3121 	mov	a,_hr
      000C32 70 04            [24] 3122 	jnz	00163$
      000C34 7D 17            [12] 3123 	mov	r5,#0x17
      000C36 80 08            [24] 3124 	sjmp	00164$
      000C38                       3125 00163$:
      000C38 AC*2E            [24] 3126 	mov	r4,_hr
      000C3A 1C               [12] 3127 	dec	r4
      000C3B EC               [12] 3128 	mov	a,r4
      000C3C FD               [12] 3129 	mov	r5,a
      000C3D 33               [12] 3130 	rlc	a
      000C3E 95 E0            [12] 3131 	subb	a,acc
      000C40                       3132 00164$:
      000C40 8D*2E            [24] 3133 	mov	_hr,r5
                                   3134 ;	main.c:617: idle_counter = 0;
      000C42 E4               [12] 3135 	clr	a
      000C43 F5*08            [12] 3136 	mov	_idle_counter,a
      000C45 F5*09            [12] 3137 	mov	(_idle_counter + 1),a
      000C47                       3138 00119$:
                                   3139 ;	main.c:619: if (!next) {
      000C47 20 B6 0C         [24] 3140 	jb	_next,00121$
                                   3141 ;	main.c:620: delay(10000);
      000C4A 90 27 10         [24] 3142 	mov	dptr,#0x2710
      000C4D C0 07            [24] 3143 	push	ar7
      000C4F 12r00r00         [24] 3144 	lcall	_delay
      000C52 D0 07            [24] 3145 	pop	ar7
                                   3146 ;	main.c:621: break;
      000C54 80 3A            [24] 3147 	sjmp	00128$
      000C56                       3148 00121$:
                                   3149 ;	main.c:623: if (!back) return;
      000C56 20 B7 01         [24] 3150 	jb	_back,00123$
      000C59 22               [24] 3151 	ret
      000C5A                       3152 00123$:
                                   3153 ;	main.c:625: if (++idle_counter > 30) {
      000C5A 05*08            [12] 3154 	inc	_idle_counter
      000C5C E4               [12] 3155 	clr	a
      000C5D B5*08 02         [24] 3156 	cjne	a,_idle_counter,00362$
      000C60 05*09            [12] 3157 	inc	(_idle_counter + 1)
      000C62                       3158 00362$:
      000C62 C3               [12] 3159 	clr	c
      000C63 74 1E            [12] 3160 	mov	a,#0x1e
      000C65 95*08            [12] 3161 	subb	a,_idle_counter
      000C67 E4               [12] 3162 	clr	a
      000C68 95*09            [12] 3163 	subb	a,(_idle_counter + 1)
      000C6A 40 03            [24] 3164 	jc	00363$
      000C6C 02r0BrD1         [24] 3165 	ljmp	00127$
      000C6F                       3166 00363$:
                                   3167 ;	main.c:626: lcd_clear();
      000C6F 12r00rEB         [24] 3168 	lcall	_lcd_clear
                                   3169 ;	main.c:627: lcd_goto(0,0);
      000C72 75*30 00         [24] 3170 	mov	_lcd_goto_PARM_2,#0x00
      000C75 75 82 00         [24] 3171 	mov	dpl, #0x00
      000C78 12r00rF7         [24] 3172 	lcall	_lcd_goto
                                   3173 ;	main.c:628: lcd_string(" Time limit exc!");
      000C7B 90r00r11         [24] 3174 	mov	dptr,#___str_1
      000C7E 75 F0 80         [24] 3175 	mov	b, #0x80
      000C81 12r00rC0         [24] 3176 	lcall	_lcd_string
                                   3177 ;	main.c:629: delay_ms(3000);
      000C84 90 0B B8         [24] 3178 	mov	dptr,#0x0bb8
      000C87 12r00r24         [24] 3179 	lcall	_delay_ms
                                   3180 ;	main.c:630: idle_counter = 0;
      000C8A E4               [12] 3181 	clr	a
      000C8B F5*08            [12] 3182 	mov	_idle_counter,a
      000C8D F5*09            [12] 3183 	mov	(_idle_counter + 1),a
                                   3184 ;	main.c:631: return;  //time exceeded
      000C8F 22               [24] 3185 	ret
      000C90                       3186 00128$:
                                   3187 ;	main.c:636: idle_counter = 0;
      000C90 E4               [12] 3188 	clr	a
      000C91 F5*08            [12] 3189 	mov	_idle_counter,a
      000C93 F5*09            [12] 3190 	mov	(_idle_counter + 1),a
                                   3191 ;	main.c:637: lcd_clear();
      000C95 C0 07            [24] 3192 	push	ar7
      000C97 12r00rEB         [24] 3193 	lcall	_lcd_clear
                                   3194 ;	main.c:638: lcd_goto(0, 0);
      000C9A 75*30 00         [24] 3195 	mov	_lcd_goto_PARM_2,#0x00
      000C9D 75 82 00         [24] 3196 	mov	dpl, #0x00
      000CA0 12r00rF7         [24] 3197 	lcall	_lcd_goto
                                   3198 ;	main.c:639: lcd_string(" Set Min Alarm ");
      000CA3 90r00r3A         [24] 3199 	mov	dptr,#___str_4
      000CA6 75 F0 80         [24] 3200 	mov	b, #0x80
      000CA9 12r00rC0         [24] 3201 	lcall	_lcd_string
                                   3202 ;	main.c:640: lcd_goto(1, 0);
      000CAC 75*30 00         [24] 3203 	mov	_lcd_goto_PARM_2,#0x00
      000CAF 75 82 01         [24] 3204 	mov	dpl, #0x01
      000CB2 12r00rF7         [24] 3205 	lcall	_lcd_goto
                                   3206 ;	main.c:641: lcd_string("Alarm ");
      000CB5 90r00r33         [24] 3207 	mov	dptr,#___str_3
      000CB8 75 F0 80         [24] 3208 	mov	b, #0x80
      000CBB 12r00rC0         [24] 3209 	lcall	_lcd_string
      000CBE D0 07            [24] 3210 	pop	ar7
                                   3211 ;	main.c:642: lcd_char('1' + i);
      000CC0 8F 06            [24] 3212 	mov	ar6,r7
      000CC2 74 31            [12] 3213 	mov	a,#0x31
      000CC4 2E               [12] 3214 	add	a, r6
      000CC5 F5 82            [12] 3215 	mov	dpl,a
      000CC7 C0 07            [24] 3216 	push	ar7
      000CC9 12r00r9F         [24] 3217 	lcall	_lcd_char
      000CCC D0 07            [24] 3218 	pop	ar7
                                   3219 ;	main.c:644: while (1) {
      000CCE                       3220 00140$:
                                   3221 ;	main.c:645: lcd_goto(1, 9);
      000CCE 75*30 09         [24] 3222 	mov	_lcd_goto_PARM_2,#0x09
      000CD1 75 82 01         [24] 3223 	mov	dpl, #0x01
      000CD4 C0 07            [24] 3224 	push	ar7
      000CD6 12r00rF7         [24] 3225 	lcall	_lcd_goto
                                   3226 ;	main.c:646: int_to_str(min, buf);
      000CD9 75*00r2B         [24] 3227 	mov	_int_to_str_PARM_2,#_buf
      000CDC 75*01 00         [24] 3228 	mov	(_int_to_str_PARM_2 + 1),#0x00
      000CDF 75*02 40         [24] 3229 	mov	(_int_to_str_PARM_2 + 2),#0x40
      000CE2 85*2F 82         [24] 3230 	mov	dpl, _min
      000CE5 12r01r62         [24] 3231 	lcall	_int_to_str
                                   3232 ;	main.c:647: lcd_string(buf);
      000CE8 90r00r2B         [24] 3233 	mov	dptr,#_buf
      000CEB 75 F0 40         [24] 3234 	mov	b, #0x40
      000CEE 12r00rC0         [24] 3235 	lcall	_lcd_string
                                   3236 ;	main.c:648: delay(10000);
      000CF1 90 27 10         [24] 3237 	mov	dptr,#0x2710
      000CF4 12r00r00         [24] 3238 	lcall	_delay
      000CF7 D0 07            [24] 3239 	pop	ar7
                                   3240 ;	main.c:650: if (!up) {
      000CF9 20 B4 24         [24] 3241 	jb	_up,00130$
                                   3242 ;	main.c:651: delay(10000);
      000CFC 90 27 10         [24] 3243 	mov	dptr,#0x2710
      000CFF C0 07            [24] 3244 	push	ar7
      000D01 12r00r00         [24] 3245 	lcall	_delay
                                   3246 ;	main.c:652: min = (min + 1) % 60;
      000D04 AD*2F            [24] 3247 	mov	r5,_min
      000D06 7E 00            [12] 3248 	mov	r6,#0x00
      000D08 8D 82            [24] 3249 	mov	dpl,r5
      000D0A 8E 83            [24] 3250 	mov	dph,r6
      000D0C A3               [24] 3251 	inc	dptr
      000D0D 75*00 3C         [24] 3252 	mov	__modsint_PARM_2,#0x3c
      000D10 8E*01            [24] 3253 	mov	(__modsint_PARM_2 + 1),r6
      000D12 12r00r00         [24] 3254 	lcall	__modsint
      000D15 AD 82            [24] 3255 	mov	r5, dpl
      000D17 D0 07            [24] 3256 	pop	ar7
      000D19 8D*2F            [24] 3257 	mov	_min,r5
                                   3258 ;	main.c:653: idle_counter = 0;
      000D1B E4               [12] 3259 	clr	a
      000D1C F5*08            [12] 3260 	mov	_idle_counter,a
      000D1E F5*09            [12] 3261 	mov	(_idle_counter + 1),a
      000D20                       3262 00130$:
                                   3263 ;	main.c:655: if (!down) {
      000D20 20 B5 21         [24] 3264 	jb	_down,00132$
                                   3265 ;	main.c:656: delay(10000);
      000D23 90 27 10         [24] 3266 	mov	dptr,#0x2710
      000D26 C0 07            [24] 3267 	push	ar7
      000D28 12r00r00         [24] 3268 	lcall	_delay
      000D2B D0 07            [24] 3269 	pop	ar7
                                   3270 ;	main.c:657: min = (min == 0) ? 59 : min - 1;
      000D2D E5*2F            [12] 3271 	mov	a,_min
      000D2F 70 04            [24] 3272 	jnz	00165$
      000D31 7D 3B            [12] 3273 	mov	r5,#0x3b
      000D33 80 08            [24] 3274 	sjmp	00166$
      000D35                       3275 00165$:
      000D35 AC*2F            [24] 3276 	mov	r4,_min
      000D37 1C               [12] 3277 	dec	r4
      000D38 EC               [12] 3278 	mov	a,r4
      000D39 FD               [12] 3279 	mov	r5,a
      000D3A 33               [12] 3280 	rlc	a
      000D3B 95 E0            [12] 3281 	subb	a,acc
      000D3D                       3282 00166$:
      000D3D 8D*2F            [24] 3283 	mov	_min,r5
                                   3284 ;	main.c:658: idle_counter = 0;
      000D3F E4               [12] 3285 	clr	a
      000D40 F5*08            [12] 3286 	mov	_idle_counter,a
      000D42 F5*09            [12] 3287 	mov	(_idle_counter + 1),a
      000D44                       3288 00132$:
                                   3289 ;	main.c:660: if (!next) {
      000D44 20 B6 0C         [24] 3290 	jb	_next,00134$
                                   3291 ;	main.c:661: delay(10000);
      000D47 90 27 10         [24] 3292 	mov	dptr,#0x2710
      000D4A C0 07            [24] 3293 	push	ar7
      000D4C 12r00r00         [24] 3294 	lcall	_delay
      000D4F D0 07            [24] 3295 	pop	ar7
                                   3296 ;	main.c:662: break;
      000D51 80 3A            [24] 3297 	sjmp	00141$
      000D53                       3298 00134$:
                                   3299 ;	main.c:664: if (!back) return;
      000D53 20 B7 01         [24] 3300 	jb	_back,00136$
      000D56 22               [24] 3301 	ret
      000D57                       3302 00136$:
                                   3303 ;	main.c:666: if (++idle_counter > 30) {
      000D57 05*08            [12] 3304 	inc	_idle_counter
      000D59 E4               [12] 3305 	clr	a
      000D5A B5*08 02         [24] 3306 	cjne	a,_idle_counter,00369$
      000D5D 05*09            [12] 3307 	inc	(_idle_counter + 1)
      000D5F                       3308 00369$:
      000D5F C3               [12] 3309 	clr	c
      000D60 74 1E            [12] 3310 	mov	a,#0x1e
      000D62 95*08            [12] 3311 	subb	a,_idle_counter
      000D64 E4               [12] 3312 	clr	a
      000D65 95*09            [12] 3313 	subb	a,(_idle_counter + 1)
      000D67 40 03            [24] 3314 	jc	00370$
      000D69 02r0CrCE         [24] 3315 	ljmp	00140$
      000D6C                       3316 00370$:
                                   3317 ;	main.c:667: lcd_clear();
      000D6C 12r00rEB         [24] 3318 	lcall	_lcd_clear
                                   3319 ;	main.c:668: lcd_goto(0,0);
      000D6F 75*30 00         [24] 3320 	mov	_lcd_goto_PARM_2,#0x00
      000D72 75 82 00         [24] 3321 	mov	dpl, #0x00
      000D75 12r00rF7         [24] 3322 	lcall	_lcd_goto
                                   3323 ;	main.c:669: lcd_string(" Time limit exc!");
      000D78 90r00r11         [24] 3324 	mov	dptr,#___str_1
      000D7B 75 F0 80         [24] 3325 	mov	b, #0x80
      000D7E 12r00rC0         [24] 3326 	lcall	_lcd_string
                                   3327 ;	main.c:670: delay_ms(3000);
      000D81 90 0B B8         [24] 3328 	mov	dptr,#0x0bb8
      000D84 12r00r24         [24] 3329 	lcall	_delay_ms
                                   3330 ;	main.c:671: idle_counter = 0;
      000D87 E4               [12] 3331 	clr	a
      000D88 F5*08            [12] 3332 	mov	_idle_counter,a
      000D8A F5*09            [12] 3333 	mov	(_idle_counter + 1),a
                                   3334 ;	main.c:672: return;
      000D8C 22               [24] 3335 	ret
      000D8D                       3336 00141$:
                                   3337 ;	main.c:676: alarm_hours[i] = hr;
      000D8D EF               [12] 3338 	mov	a,r7
      000D8E 24r00            [12] 3339 	add	a, #_alarm_hours
      000D90 F8               [12] 3340 	mov	r0,a
      000D91 A6*2E            [24] 3341 	mov	@r0,_hr
                                   3342 ;	main.c:677: alarm_minutes[i] = min;
      000D93 EF               [12] 3343 	mov	a,r7
      000D94 24r08            [12] 3344 	add	a, #_alarm_minutes
      000D96 F8               [12] 3345 	mov	r0,a
      000D97 A6*2F            [24] 3346 	mov	@r0,_min
                                   3347 ;	main.c:678: lcd_clear();
      000D99 C0 07            [24] 3348 	push	ar7
      000D9B 12r00rEB         [24] 3349 	lcall	_lcd_clear
                                   3350 ;	main.c:679: lcd_string(" Alarm Saved");
      000D9E 90r00r4A         [24] 3351 	mov	dptr,#___str_5
      000DA1 75 F0 80         [24] 3352 	mov	b, #0x80
      000DA4 12r00rC0         [24] 3353 	lcall	_lcd_string
                                   3354 ;	main.c:680: delay(25000);
      000DA7 90 61 A8         [24] 3355 	mov	dptr,#0x61a8
      000DAA 12r00r00         [24] 3356 	lcall	_delay
      000DAD D0 07            [24] 3357 	pop	ar7
                                   3358 ;	main.c:592: for (i = 0; i < num_alarms; i++) {
      000DAF 0F               [12] 3359 	inc	r7
      000DB0 02r0Br8A         [24] 3360 	ljmp	00153$
      000DB3                       3361 00142$:
                                   3362 ;	main.c:682: alarm_arranger(alarm_hours, alarm_minutes, &num_alarms);
      000DB3 75*00r08         [24] 3363 	mov	_alarm_arranger_PARM_2,#_alarm_minutes
      000DB6 75*01 00         [24] 3364 	mov	(_alarm_arranger_PARM_2 + 1),#0x00
      000DB9 75*02 40         [24] 3365 	mov	(_alarm_arranger_PARM_2 + 2),#0x40
      000DBC 75*03r07         [24] 3366 	mov	_alarm_arranger_PARM_3,#_num_alarms
      000DBF 75*04 00         [24] 3367 	mov	(_alarm_arranger_PARM_3 + 1),#0x00
      000DC2 75*05 40         [24] 3368 	mov	(_alarm_arranger_PARM_3 + 2),#0x40
      000DC5 90r00r00         [24] 3369 	mov	dptr,#_alarm_hours
      000DC8 75 F0 40         [24] 3370 	mov	b, #0x40
      000DCB 12r06rAD         [24] 3371 	lcall	_alarm_arranger
                                   3372 ;	main.c:683: write_eeprom(EEPROM_BASE, num_alarms);
      000DCE 85*07*4F         [24] 3373 	mov	_write_eeprom_PARM_2,_num_alarms
      000DD1 90 00 00         [24] 3374 	mov	dptr,#0x0000
      000DD4 12r05rF5         [24] 3375 	lcall	_write_eeprom
                                   3376 ;	main.c:685: for(i = 0; i < num_alarms; i++) {
      000DD7 7F 00            [12] 3377 	mov	r7,#0x00
      000DD9                       3378 00156$:
      000DD9 C3               [12] 3379 	clr	c
      000DDA EF               [12] 3380 	mov	a,r7
      000DDB 95*07            [12] 3381 	subb	a,_num_alarms
      000DDD 50 18            [24] 3382 	jnc	00143$
                                   3383 ;	main.c:686: write_alarm_to_eeprom(i, alarm_hours[i], alarm_minutes[i]);
      000DDF EF               [12] 3384 	mov	a,r7
      000DE0 24r00            [12] 3385 	add	a, #_alarm_hours
      000DE2 F9               [12] 3386 	mov	r1,a
      000DE3 87*50            [24] 3387 	mov	_write_alarm_to_eeprom_PARM_2,@r1
      000DE5 EF               [12] 3388 	mov	a,r7
      000DE6 24r08            [12] 3389 	add	a, #_alarm_minutes
      000DE8 F9               [12] 3390 	mov	r1,a
      000DE9 87*51            [24] 3391 	mov	_write_alarm_to_eeprom_PARM_3,@r1
      000DEB 8F 82            [24] 3392 	mov	dpl, r7
      000DED C0 07            [24] 3393 	push	ar7
      000DEF 12r06r84         [24] 3394 	lcall	_write_alarm_to_eeprom
      000DF2 D0 07            [24] 3395 	pop	ar7
                                   3396 ;	main.c:685: for(i = 0; i < num_alarms; i++) {
      000DF4 0F               [12] 3397 	inc	r7
      000DF5 80 E2            [24] 3398 	sjmp	00156$
      000DF7                       3399 00143$:
                                   3400 ;	main.c:688: ds3232_get_time_date(&h, &m, &s, &day, &d, &mo, &y);
      000DF7 75*37r0B         [24] 3401 	mov	_ds3232_get_time_date_PARM_2,#_m
      000DFA 75*38 00         [24] 3402 	mov	(_ds3232_get_time_date_PARM_2 + 1),#0x00
      000DFD 75*39 40         [24] 3403 	mov	(_ds3232_get_time_date_PARM_2 + 2),#0x40
      000E00 75*3Ar0C         [24] 3404 	mov	_ds3232_get_time_date_PARM_3,#_s
      000E03 75*3B 00         [24] 3405 	mov	(_ds3232_get_time_date_PARM_3 + 1),#0x00
      000E06 75*3C 40         [24] 3406 	mov	(_ds3232_get_time_date_PARM_3 + 2),#0x40
      000E09 75*3Dr10         [24] 3407 	mov	_ds3232_get_time_date_PARM_4,#_day
      000E0C 75*3E 00         [24] 3408 	mov	(_ds3232_get_time_date_PARM_4 + 1),#0x00
      000E0F 75*3F 40         [24] 3409 	mov	(_ds3232_get_time_date_PARM_4 + 2),#0x40
      000E12 75*40r0D         [24] 3410 	mov	_ds3232_get_time_date_PARM_5,#_d
      000E15 75*41 00         [24] 3411 	mov	(_ds3232_get_time_date_PARM_5 + 1),#0x00
      000E18 75*42 40         [24] 3412 	mov	(_ds3232_get_time_date_PARM_5 + 2),#0x40
      000E1B 75*43r0E         [24] 3413 	mov	_ds3232_get_time_date_PARM_6,#_mo
      000E1E 75*44 00         [24] 3414 	mov	(_ds3232_get_time_date_PARM_6 + 1),#0x00
      000E21 75*45 40         [24] 3415 	mov	(_ds3232_get_time_date_PARM_6 + 2),#0x40
      000E24 75*46r0F         [24] 3416 	mov	_ds3232_get_time_date_PARM_7,#_y
      000E27 75*47 00         [24] 3417 	mov	(_ds3232_get_time_date_PARM_7 + 1),#0x00
      000E2A 75*48 40         [24] 3418 	mov	(_ds3232_get_time_date_PARM_7 + 2),#0x40
      000E2D 90r00r0A         [24] 3419 	mov	dptr,#_h
      000E30 75 F0 40         [24] 3420 	mov	b, #0x40
      000E33 12r03r0D         [24] 3421 	lcall	_ds3232_get_time_date
                                   3422 ;	main.c:689: int total_mins = (h*60)+m;
      000E36 85*0A*00         [24] 3423 	mov	__mulint_PARM_2,_h
      000E39 75*01 00         [24] 3424 	mov	(__mulint_PARM_2 + 1),#0x00
      000E3C 90 00 3C         [24] 3425 	mov	dptr,#0x003c
      000E3F 12r00r00         [24] 3426 	lcall	__mulint
      000E42 AE 82            [24] 3427 	mov	r6, dpl
      000E44 AF 83            [24] 3428 	mov	r7, dph
      000E46 AC*0B            [24] 3429 	mov	r4,_m
      000E48 7D 00            [12] 3430 	mov	r5,#0x00
      000E4A EC               [12] 3431 	mov	a,r4
      000E4B 2E               [12] 3432 	add	a, r6
      000E4C F5*54            [12] 3433 	mov	_set_alarms_total_mins_10002_135,a
      000E4E ED               [12] 3434 	mov	a,r5
      000E4F 3F               [12] 3435 	addc	a, r7
      000E50 F5*55            [12] 3436 	mov	(_set_alarms_total_mins_10002_135 + 1),a
                                   3437 ;	main.c:691: if ((total_mins >= (alarm_hours[num_alarms - 1] * 60 + alarm_minutes[num_alarms - 1])) || (total_mins < (alarm_hours[0]*60 + alarm_minutes[0]))) {
      000E52 AD*07            [24] 3438 	mov	r5,_num_alarms
      000E54 1D               [12] 3439 	dec	r5
      000E55 ED               [12] 3440 	mov	a,r5
      000E56 24r00            [12] 3441 	add	a, #_alarm_hours
      000E58 F9               [12] 3442 	mov	r1,a
      000E59 87 04            [24] 3443 	mov	ar4,@r1
      000E5B 8C*00            [24] 3444 	mov	__mulint_PARM_2,r4
      000E5D 75*01 00         [24] 3445 	mov	(__mulint_PARM_2 + 1),#0x00
      000E60 90 00 3C         [24] 3446 	mov	dptr,#0x003c
      000E63 C0 05            [24] 3447 	push	ar5
      000E65 12r00r00         [24] 3448 	lcall	__mulint
      000E68 AB 82            [24] 3449 	mov	r3, dpl
      000E6A AC 83            [24] 3450 	mov	r4, dph
      000E6C D0 05            [24] 3451 	pop	ar5
      000E6E ED               [12] 3452 	mov	a,r5
      000E6F 24r08            [12] 3453 	add	a, #_alarm_minutes
      000E71 F9               [12] 3454 	mov	r1,a
      000E72 87 05            [24] 3455 	mov	ar5,@r1
      000E74 7A 00            [12] 3456 	mov	r2,#0x00
      000E76 ED               [12] 3457 	mov	a,r5
      000E77 2B               [12] 3458 	add	a, r3
      000E78 FB               [12] 3459 	mov	r3,a
      000E79 EA               [12] 3460 	mov	a,r2
      000E7A 3C               [12] 3461 	addc	a, r4
      000E7B FC               [12] 3462 	mov	r4,a
      000E7C C3               [12] 3463 	clr	c
      000E7D E5*54            [12] 3464 	mov	a,_set_alarms_total_mins_10002_135
      000E7F 9B               [12] 3465 	subb	a,r3
      000E80 E5*55            [12] 3466 	mov	a,(_set_alarms_total_mins_10002_135 + 1)
      000E82 64 80            [12] 3467 	xrl	a,#0x80
      000E84 8C F0            [24] 3468 	mov	b,r4
      000E86 63 F0 80         [24] 3469 	xrl	b,#0x80
      000E89 95 F0            [12] 3470 	subb	a,b
      000E8B 50 30            [24] 3471 	jnc	00148$
      000E8D 78r00            [12] 3472 	mov	r0,#_alarm_hours
      000E8F 86 05            [24] 3473 	mov	ar5,@r0
      000E91 8D*00            [24] 3474 	mov	__mulint_PARM_2,r5
      000E93 75*01 00         [24] 3475 	mov	(__mulint_PARM_2 + 1),#0x00
      000E96 90 00 3C         [24] 3476 	mov	dptr,#0x003c
      000E99 12r00r00         [24] 3477 	lcall	__mulint
      000E9C AC 82            [24] 3478 	mov	r4, dpl
      000E9E AD 83            [24] 3479 	mov	r5, dph
      000EA0 78r08            [12] 3480 	mov	r0,#_alarm_minutes
      000EA2 86 03            [24] 3481 	mov	ar3,@r0
      000EA4 7A 00            [12] 3482 	mov	r2,#0x00
      000EA6 EB               [12] 3483 	mov	a,r3
      000EA7 2C               [12] 3484 	add	a, r4
      000EA8 FC               [12] 3485 	mov	r4,a
      000EA9 EA               [12] 3486 	mov	a,r2
      000EAA 3D               [12] 3487 	addc	a, r5
      000EAB FD               [12] 3488 	mov	r5,a
      000EAC C3               [12] 3489 	clr	c
      000EAD E5*54            [12] 3490 	mov	a,_set_alarms_total_mins_10002_135
      000EAF 9C               [12] 3491 	subb	a,r4
      000EB0 E5*55            [12] 3492 	mov	a,(_set_alarms_total_mins_10002_135 + 1)
      000EB2 64 80            [12] 3493 	xrl	a,#0x80
      000EB4 8D F0            [24] 3494 	mov	b,r5
      000EB6 63 F0 80         [24] 3495 	xrl	b,#0x80
      000EB9 95 F0            [12] 3496 	subb	a,b
      000EBB 50 1A            [24] 3497 	jnc	00196$
      000EBD                       3498 00148$:
                                   3499 ;	main.c:692: ds3232_set_alarm1(alarm_hours[0], alarm_minutes[0], 0);
      000EBD 78r00            [12] 3500 	mov	r0,#_alarm_hours
      000EBF 86 82            [24] 3501 	mov	dpl,@r0
      000EC1 78r08            [12] 3502 	mov	r0,#_alarm_minutes
      000EC3 86*52            [24] 3503 	mov	_ds3232_set_alarm1_PARM_2,@r0
      000EC5 75*53 00         [24] 3504 	mov	_ds3232_set_alarm1_PARM_3,#0x00
      000EC8 12r09r17         [24] 3505 	lcall	_ds3232_set_alarm1
                                   3506 ;	main.c:693: write_eeprom(0x003A, 0);
      000ECB 75*4F 00         [24] 3507 	mov	_write_eeprom_PARM_2,#0x00
      000ECE 90 00 3A         [24] 3508 	mov	dptr,#0x003a
      000ED1 12r05rF5         [24] 3509 	lcall	_write_eeprom
      000ED4 02r0FrAF         [24] 3510 	ljmp	00150$
                                   3511 ;	main.c:697: for(i=0; i<num_alarms-1; i++){
      000ED7                       3512 00196$:
      000ED7 7D 00            [12] 3513 	mov	r5,#0x00
      000ED9                       3514 00159$:
      000ED9 AB*07            [24] 3515 	mov	r3,_num_alarms
      000EDB 7C 00            [12] 3516 	mov	r4,#0x00
      000EDD 1B               [12] 3517 	dec	r3
      000EDE BB FF 01         [24] 3518 	cjne	r3,#0xff,00374$
      000EE1 1C               [12] 3519 	dec	r4
      000EE2                       3520 00374$:
      000EE2 8D*58            [24] 3521 	mov	_set_alarms_sloc0_1_0,r5
      000EE4 75*59 00         [24] 3522 	mov	(_set_alarms_sloc0_1_0 + 1),#0x00
      000EE7 C3               [12] 3523 	clr	c
      000EE8 E5*58            [12] 3524 	mov	a,_set_alarms_sloc0_1_0
      000EEA 9B               [12] 3525 	subb	a,r3
      000EEB E5*59            [12] 3526 	mov	a,(_set_alarms_sloc0_1_0 + 1)
      000EED 64 80            [12] 3527 	xrl	a,#0x80
      000EEF 8C F0            [24] 3528 	mov	b,r4
      000EF1 63 F0 80         [24] 3529 	xrl	b,#0x80
      000EF4 95 F0            [12] 3530 	subb	a,b
      000EF6 40 03            [24] 3531 	jc	00375$
      000EF8 02r0FrAF         [24] 3532 	ljmp	00150$
      000EFB                       3533 00375$:
                                   3534 ;	main.c:698: int total_mins1 = (alarm_hours[i]*60)+alarm_minutes[i];
      000EFB ED               [12] 3535 	mov	a,r5
      000EFC 24r00            [12] 3536 	add	a, #_alarm_hours
      000EFE F9               [12] 3537 	mov	r1,a
      000EFF 87 04            [24] 3538 	mov	ar4,@r1
      000F01 8C*00            [24] 3539 	mov	__mulint_PARM_2,r4
      000F03 75*01 00         [24] 3540 	mov	(__mulint_PARM_2 + 1),#0x00
      000F06 90 00 3C         [24] 3541 	mov	dptr,#0x003c
      000F09 C0 05            [24] 3542 	push	ar5
      000F0B 12r00r00         [24] 3543 	lcall	__mulint
      000F0E AB 82            [24] 3544 	mov	r3, dpl
      000F10 AC 83            [24] 3545 	mov	r4, dph
      000F12 D0 05            [24] 3546 	pop	ar5
      000F14 ED               [12] 3547 	mov	a,r5
      000F15 24r08            [12] 3548 	add	a, #_alarm_minutes
      000F17 F9               [12] 3549 	mov	r1,a
      000F18 87 02            [24] 3550 	mov	ar2,@r1
      000F1A 7F 00            [12] 3551 	mov	r7,#0x00
      000F1C EA               [12] 3552 	mov	a,r2
      000F1D 2B               [12] 3553 	add	a, r3
      000F1E F5*56            [12] 3554 	mov	_set_alarms_total_mins1_50002_140,a
      000F20 EF               [12] 3555 	mov	a,r7
      000F21 3C               [12] 3556 	addc	a, r4
      000F22 F5*57            [12] 3557 	mov	(_set_alarms_total_mins1_50002_140 + 1),a
                                   3558 ;	main.c:699: int total_mins2 = (alarm_hours[i+1]*60)+alarm_minutes[i+1];
      000F24 8D 07            [24] 3559 	mov	ar7,r5
      000F26 EF               [12] 3560 	mov	a,r7
      000F27 04               [12] 3561 	inc	a
      000F28 FE               [12] 3562 	mov	r6,a
      000F29 24r00            [12] 3563 	add	a, #_alarm_hours
      000F2B F9               [12] 3564 	mov	r1,a
      000F2C 87 02            [24] 3565 	mov	ar2,@r1
      000F2E 8A*00            [24] 3566 	mov	__mulint_PARM_2,r2
      000F30 75*01 00         [24] 3567 	mov	(__mulint_PARM_2 + 1),#0x00
      000F33 90 00 3C         [24] 3568 	mov	dptr,#0x003c
      000F36 C0 07            [24] 3569 	push	ar7
      000F38 C0 06            [24] 3570 	push	ar6
      000F3A C0 05            [24] 3571 	push	ar5
      000F3C 12r00r00         [24] 3572 	lcall	__mulint
      000F3F AA 82            [24] 3573 	mov	r2, dpl
      000F41 AC 83            [24] 3574 	mov	r4, dph
      000F43 D0 05            [24] 3575 	pop	ar5
      000F45 D0 06            [24] 3576 	pop	ar6
      000F47 D0 07            [24] 3577 	pop	ar7
      000F49 EE               [12] 3578 	mov	a,r6
      000F4A 24r08            [12] 3579 	add	a, #_alarm_minutes
      000F4C F9               [12] 3580 	mov	r1,a
      000F4D 87 06            [24] 3581 	mov	ar6,@r1
      000F4F 7B 00            [12] 3582 	mov	r3,#0x00
      000F51 EE               [12] 3583 	mov	a,r6
      000F52 2A               [12] 3584 	add	a, r2
      000F53 FE               [12] 3585 	mov	r6,a
      000F54 EB               [12] 3586 	mov	a,r3
      000F55 3C               [12] 3587 	addc	a, r4
      000F56 FC               [12] 3588 	mov	r4,a
                                   3589 ;	main.c:700: if (total_mins>= total_mins1 && total_mins<total_mins2){
      000F57 C3               [12] 3590 	clr	c
      000F58 E5*54            [12] 3591 	mov	a,_set_alarms_total_mins_10002_135
      000F5A 95*56            [12] 3592 	subb	a,_set_alarms_total_mins1_50002_140
      000F5C E5*55            [12] 3593 	mov	a,(_set_alarms_total_mins_10002_135 + 1)
      000F5E 64 80            [12] 3594 	xrl	a,#0x80
      000F60 85*57 F0         [24] 3595 	mov	b,(_set_alarms_total_mins1_50002_140 + 1)
      000F63 63 F0 80         [24] 3596 	xrl	b,#0x80
      000F66 95 F0            [12] 3597 	subb	a,b
      000F68 40 41            [24] 3598 	jc	00160$
      000F6A E5*54            [12] 3599 	mov	a,_set_alarms_total_mins_10002_135
      000F6C 9E               [12] 3600 	subb	a,r6
      000F6D E5*55            [12] 3601 	mov	a,(_set_alarms_total_mins_10002_135 + 1)
      000F6F 64 80            [12] 3602 	xrl	a,#0x80
      000F71 8C F0            [24] 3603 	mov	b,r4
      000F73 63 F0 80         [24] 3604 	xrl	b,#0x80
      000F76 95 F0            [12] 3605 	subb	a,b
      000F78 50 31            [24] 3606 	jnc	00160$
                                   3607 ;	main.c:701: ds3232_set_alarm1(alarm_hours[i+1], alarm_minutes[i+1], 0);
      000F7A 0F               [12] 3608 	inc	r7
      000F7B EF               [12] 3609 	mov	a,r7
      000F7C 24r00            [12] 3610 	add	a, #_alarm_hours
      000F7E F9               [12] 3611 	mov	r1,a
      000F7F 87 82            [24] 3612 	mov	dpl,@r1
      000F81 EF               [12] 3613 	mov	a,r7
      000F82 24r08            [12] 3614 	add	a, #_alarm_minutes
      000F84 F9               [12] 3615 	mov	r1,a
      000F85 87*52            [24] 3616 	mov	_ds3232_set_alarm1_PARM_2,@r1
      000F87 75*53 00         [24] 3617 	mov	_ds3232_set_alarm1_PARM_3,#0x00
      000F8A C0 05            [24] 3618 	push	ar5
      000F8C 12r09r17         [24] 3619 	lcall	_ds3232_set_alarm1
                                   3620 ;	main.c:702: write_eeprom(0x003A, (i+1)%num_alarms);
      000F8F 85*58 82         [24] 3621 	mov	dpl,_set_alarms_sloc0_1_0
      000F92 85*59 83         [24] 3622 	mov	dph,(_set_alarms_sloc0_1_0 + 1)
      000F95 A3               [24] 3623 	inc	dptr
      000F96 85*07*00         [24] 3624 	mov	__modsint_PARM_2,_num_alarms
      000F99 75*01 00         [24] 3625 	mov	(__modsint_PARM_2 + 1),#0x00
      000F9C 12r00r00         [24] 3626 	lcall	__modsint
      000F9F AE 82            [24] 3627 	mov	r6, dpl
      000FA1 8E*4F            [24] 3628 	mov	_write_eeprom_PARM_2,r6
      000FA3 90 00 3A         [24] 3629 	mov	dptr,#0x003a
      000FA6 12r05rF5         [24] 3630 	lcall	_write_eeprom
      000FA9 D0 05            [24] 3631 	pop	ar5
      000FAB                       3632 00160$:
                                   3633 ;	main.c:697: for(i=0; i<num_alarms-1; i++){
      000FAB 0D               [12] 3634 	inc	r5
      000FAC 02r0ErD9         [24] 3635 	ljmp	00159$
      000FAF                       3636 00150$:
                                   3637 ;	main.c:708: lcd_clear();
      000FAF 12r00rEB         [24] 3638 	lcall	_lcd_clear
                                   3639 ;	main.c:709: lcd_string(" All Alarms Saved");
      000FB2 90r00r57         [24] 3640 	mov	dptr,#___str_6
      000FB5 75 F0 80         [24] 3641 	mov	b, #0x80
      000FB8 12r00rC0         [24] 3642 	lcall	_lcd_string
                                   3643 ;	main.c:710: delay(25000);
      000FBB 90 61 A8         [24] 3644 	mov	dptr,#0x61a8
      000FBE 12r00r00         [24] 3645 	lcall	_delay
                                   3646 ;	main.c:711: lcd_clear();
                                   3647 ;	main.c:712: }
      000FC1 02r00rEB         [24] 3648 	ljmp	_lcd_clear
                                   3649 ;------------------------------------------------------------
                                   3650 ;Allocation info for local variables in function 'alarm_triggered'
                                   3651 ;------------------------------------------------------------
                                   3652 ;j             Allocated to registers r7 
                                   3653 ;k             Allocated to registers 
                                   3654 ;timeout       Allocated to registers r6 r7 
                                   3655 ;alarm_indx    Allocated to registers r6 
                                   3656 ;------------------------------------------------------------
                                   3657 ;	main.c:746: void alarm_triggered(void) __interrupt(0) {
                                   3658 ;	-----------------------------------------
                                   3659 ;	 function alarm_triggered
                                   3660 ;	-----------------------------------------
      000FC4                       3661 _alarm_triggered:
      000FC4 C0*00            [24] 3662 	push	bits
      000FC6 C0 E0            [24] 3663 	push	acc
      000FC8 C0 F0            [24] 3664 	push	b
      000FCA C0 82            [24] 3665 	push	dpl
      000FCC C0 83            [24] 3666 	push	dph
      000FCE C0 07            [24] 3667 	push	(0+7)
      000FD0 C0 06            [24] 3668 	push	(0+6)
      000FD2 C0 05            [24] 3669 	push	(0+5)
      000FD4 C0 04            [24] 3670 	push	(0+4)
      000FD6 C0 03            [24] 3671 	push	(0+3)
      000FD8 C0 02            [24] 3672 	push	(0+2)
      000FDA C0 01            [24] 3673 	push	(0+1)
      000FDC C0 00            [24] 3674 	push	(0+0)
      000FDE C0 D0            [24] 3675 	push	psw
      000FE0 75 D0 00         [24] 3676 	mov	psw,#0x00
                                   3677 ;	main.c:747: EA = 0;
                                   3678 ;	assignBit
      000FE3 C2 AF            [12] 3679 	clr	_EA
                                   3680 ;	main.c:748: POWER_PULSE = 1;
                                   3681 ;	assignBit
      000FE5 D2 A7            [12] 3682 	setb	_POWER_PULSE
                                   3683 ;	main.c:749: lcd_init();
      000FE7 12r01r0E         [24] 3684 	lcall	_lcd_init
                                   3685 ;	main.c:751: lcd_clear();
      000FEA 12r00rEB         [24] 3686 	lcall	_lcd_clear
                                   3687 ;	main.c:752: lcd_goto(0, 0);
      000FED 75*30 00         [24] 3688 	mov	_lcd_goto_PARM_2,#0x00
      000FF0 75 82 00         [24] 3689 	mov	dpl, #0x00
      000FF3 12r00rF7         [24] 3690 	lcall	_lcd_goto
                                   3691 ;	main.c:753: lcd_string(" Alarm Triggered");
      000FF6 90r00r69         [24] 3692 	mov	dptr,#___str_7
      000FF9 75 F0 80         [24] 3693 	mov	b, #0x80
      000FFC 12r00rC0         [24] 3694 	lcall	_lcd_string
                                   3695 ;	main.c:754: lcd_goto(1, 0);
      000FFF 75*30 00         [24] 3696 	mov	_lcd_goto_PARM_2,#0x00
      001002 75 82 01         [24] 3697 	mov	dpl, #0x01
      001005 12r00rF7         [24] 3698 	lcall	_lcd_goto
                                   3699 ;	main.c:755: lcd_string("Take Medicine");
      001008 90r00r7A         [24] 3700 	mov	dptr,#___str_8
      00100B 75 F0 80         [24] 3701 	mov	b, #0x80
      00100E 12r00rC0         [24] 3702 	lcall	_lcd_string
                                   3703 ;	main.c:756: BUZZER = 1;
                                   3704 ;	assignBit
      001011 D2 A0            [12] 3705 	setb	_BUZZER
                                   3706 ;	main.c:757: k = read_eeprom(0x003F);
      001013 90 00 3F         [24] 3707 	mov	dptr,#0x003f
      001016 12r06r35         [24] 3708 	lcall	_read_eeprom
                                   3709 ;	main.c:758: k = k+1;
      001019 E5 82            [12] 3710 	mov	a,dpl
      00101B 04               [12] 3711 	inc	a
      00101C F5*4F            [12] 3712 	mov	_write_eeprom_PARM_2,a
                                   3713 ;	main.c:759: write_eeprom(0x003F, k);
      00101E 90 00 3F         [24] 3714 	mov	dptr,#0x003f
      001021 12r05rF5         [24] 3715 	lcall	_write_eeprom
                                   3716 ;	main.c:760: for(j = 0; j < STEPS; j++) {
      001024 7F 00            [12] 3717 	mov	r7,#0x00
      001026                       3718 00106$:
                                   3719 ;	main.c:761: step_motor(j);
      001026 8F 05            [24] 3720 	mov	ar5,r7
      001028 7E 00            [12] 3721 	mov	r6,#0x00
      00102A 8D 82            [24] 3722 	mov	dpl, r5
      00102C 8E 83            [24] 3723 	mov	dph, r6
      00102E C0 07            [24] 3724 	push	ar7
      001030 12r05r6E         [24] 3725 	lcall	_step_motor
                                   3726 ;	main.c:762: delay_ms(3);  // Adjust delay for speed
      001033 90 00 03         [24] 3727 	mov	dptr,#0x0003
      001036 12r00r24         [24] 3728 	lcall	_delay_ms
      001039 D0 07            [24] 3729 	pop	ar7
                                   3730 ;	main.c:760: for(j = 0; j < STEPS; j++) {
      00103B 0F               [12] 3731 	inc	r7
      00103C BF 89 00         [24] 3732 	cjne	r7,#0x89,00147$
      00103F                       3733 00147$:
      00103F 40 E5            [24] 3734 	jc	00106$
                                   3735 ;	main.c:764: IN1=0;
                                   3736 ;	assignBit
      001041 C2 A4            [12] 3737 	clr	_IN1
                                   3738 ;	main.c:765: IN2=0;
                                   3739 ;	assignBit
      001043 C2 A3            [12] 3740 	clr	_IN2
                                   3741 ;	main.c:766: IN3=0;
                                   3742 ;	assignBit
      001045 C2 A2            [12] 3743 	clr	_IN3
                                   3744 ;	main.c:767: IN4=0; // to save power
                                   3745 ;	assignBit
      001047 C2 A1            [12] 3746 	clr	_IN4
                                   3747 ;	main.c:770: while (down && timeout < 5000) {  // ~5 sec timeout
      001049 7E 00            [12] 3748 	mov	r6,#0x00
      00104B 7F 00            [12] 3749 	mov	r7,#0x00
      00104D                       3750 00103$:
      00104D 30 B5 1E         [24] 3751 	jnb	_down,00105$
      001050 C3               [12] 3752 	clr	c
      001051 EE               [12] 3753 	mov	a,r6
      001052 94 88            [12] 3754 	subb	a,#0x88
      001054 EF               [12] 3755 	mov	a,r7
      001055 94 13            [12] 3756 	subb	a,#0x13
      001057 50 15            [24] 3757 	jnc	00105$
                                   3758 ;	main.c:771: delay_ms(1);
      001059 90 00 01         [24] 3759 	mov	dptr,#0x0001
      00105C C0 07            [24] 3760 	push	ar7
      00105E C0 06            [24] 3761 	push	ar6
      001060 12r00r24         [24] 3762 	lcall	_delay_ms
      001063 D0 06            [24] 3763 	pop	ar6
      001065 D0 07            [24] 3764 	pop	ar7
                                   3765 ;	main.c:772: timeout++;
      001067 0E               [12] 3766 	inc	r6
      001068 BE 00 E2         [24] 3767 	cjne	r6,#0x00,00103$
      00106B 0F               [12] 3768 	inc	r7
      00106C 80 DF            [24] 3769 	sjmp	00103$
      00106E                       3770 00105$:
                                   3771 ;	main.c:774: lcd_clear();
      00106E 12r00rEB         [24] 3772 	lcall	_lcd_clear
                                   3773 ;	main.c:775: BUZZER = 0;
                                   3774 ;	assignBit
      001071 C2 A0            [12] 3775 	clr	_BUZZER
                                   3776 ;	main.c:776: unsigned char alarm_indx = read_eeprom(0x003A);
      001073 90 00 3A         [24] 3777 	mov	dptr,#0x003a
      001076 12r06r35         [24] 3778 	lcall	_read_eeprom
                                   3779 ;	main.c:777: alarm_indx = (alarm_indx+1)%num_alarms;
      001079 7E 00            [12] 3780 	mov	r6,#0x00
      00107B 8E 83            [24] 3781 	mov	dph,r6
      00107D A3               [24] 3782 	inc	dptr
      00107E 85*07*00         [24] 3783 	mov	__modsint_PARM_2,_num_alarms
      001081 8E*01            [24] 3784 	mov	(__modsint_PARM_2 + 1),r6
      001083 12r00r00         [24] 3785 	lcall	__modsint
      001086 AE 82            [24] 3786 	mov	r6, dpl
                                   3787 ;	main.c:778: write_eeprom(0x003A, alarm_indx);
      001088 8E*4F            [24] 3788 	mov	_write_eeprom_PARM_2,r6
      00108A 90 00 3A         [24] 3789 	mov	dptr,#0x003a
      00108D C0 06            [24] 3790 	push	ar6
      00108F 12r05rF5         [24] 3791 	lcall	_write_eeprom
      001092 D0 06            [24] 3792 	pop	ar6
                                   3793 ;	main.c:779: hr = read_eeprom(EEPROM_BASE + ((alarm_indx) * 2) + 1);
      001094 7F 00            [12] 3794 	mov	r7,#0x00
      001096 EE               [12] 3795 	mov	a,r6
      001097 2E               [12] 3796 	add	a,r6
      001098 FE               [12] 3797 	mov	r6,a
      001099 EF               [12] 3798 	mov	a,r7
      00109A 33               [12] 3799 	rlc	a
      00109B FF               [12] 3800 	mov	r7,a
      00109C 8E 82            [24] 3801 	mov	dpl,r6
      00109E 8F 83            [24] 3802 	mov	dph,r7
      0010A0 A3               [24] 3803 	inc	dptr
      0010A1 C0 07            [24] 3804 	push	ar7
      0010A3 C0 06            [24] 3805 	push	ar6
      0010A5 12r06r35         [24] 3806 	lcall	_read_eeprom
      0010A8 85 82*2E         [24] 3807 	mov	_hr,dpl
      0010AB D0 06            [24] 3808 	pop	ar6
      0010AD D0 07            [24] 3809 	pop	ar7
                                   3810 ;	main.c:780: min  = read_eeprom(EEPROM_BASE + ((alarm_indx) * 2) + 2);
      0010AF 8E 82            [24] 3811 	mov	dpl,r6
      0010B1 8F 83            [24] 3812 	mov	dph,r7
      0010B3 A3               [24] 3813 	inc	dptr
      0010B4 A3               [24] 3814 	inc	dptr
      0010B5 12r06r35         [24] 3815 	lcall	_read_eeprom
      0010B8 85 82*2F         [24] 3816 	mov	_min,dpl
                                   3817 ;	main.c:781: ds3232_set_alarm1(hr, min, 0);
      0010BB 85*2F*52         [24] 3818 	mov	_ds3232_set_alarm1_PARM_2,_min
      0010BE 75*53 00         [24] 3819 	mov	_ds3232_set_alarm1_PARM_3,#0x00
      0010C1 85*2E 82         [24] 3820 	mov	dpl, _hr
      0010C4 12r09r17         [24] 3821 	lcall	_ds3232_set_alarm1
                                   3822 ;	main.c:782: POWER_PULSE = 0;
                                   3823 ;	assignBit
      0010C7 C2 A7            [12] 3824 	clr	_POWER_PULSE
                                   3825 ;	main.c:783: EA = 1;
                                   3826 ;	assignBit
      0010C9 D2 AF            [12] 3827 	setb	_EA
                                   3828 ;	main.c:784: PCON |= 0x02;
      0010CB 43 87 02         [24] 3829 	orl	_PCON,#0x02
                                   3830 ;	main.c:785: }
      0010CE D0 D0            [24] 3831 	pop	psw
      0010D0 D0 00            [24] 3832 	pop	(0+0)
      0010D2 D0 01            [24] 3833 	pop	(0+1)
      0010D4 D0 02            [24] 3834 	pop	(0+2)
      0010D6 D0 03            [24] 3835 	pop	(0+3)
      0010D8 D0 04            [24] 3836 	pop	(0+4)
      0010DA D0 05            [24] 3837 	pop	(0+5)
      0010DC D0 06            [24] 3838 	pop	(0+6)
      0010DE D0 07            [24] 3839 	pop	(0+7)
      0010E0 D0 83            [24] 3840 	pop	dph
      0010E2 D0 82            [24] 3841 	pop	dpl
      0010E4 D0 F0            [24] 3842 	pop	b
      0010E6 D0 E0            [24] 3843 	pop	acc
      0010E8 D0*00            [24] 3844 	pop	bits
      0010EA 02r00r00         [24] 3845 	ljmp	sdcc_atomic_maybe_rollback
                                   3846 ;------------------------------------------------------------
                                   3847 ;Allocation info for local variables in function 'configuration'
                                   3848 ;------------------------------------------------------------
                                   3849 ;	main.c:787: void configuration(void) __interrupt(2) {
                                   3850 ;	-----------------------------------------
                                   3851 ;	 function configuration
                                   3852 ;	-----------------------------------------
      0010ED                       3853 _configuration:
      0010ED C0*00            [24] 3854 	push	bits
      0010EF C0 E0            [24] 3855 	push	acc
      0010F1 C0 F0            [24] 3856 	push	b
      0010F3 C0 82            [24] 3857 	push	dpl
      0010F5 C0 83            [24] 3858 	push	dph
      0010F7 C0 07            [24] 3859 	push	(0+7)
      0010F9 C0 06            [24] 3860 	push	(0+6)
      0010FB C0 05            [24] 3861 	push	(0+5)
      0010FD C0 04            [24] 3862 	push	(0+4)
      0010FF C0 03            [24] 3863 	push	(0+3)
      001101 C0 02            [24] 3864 	push	(0+2)
      001103 C0 01            [24] 3865 	push	(0+1)
      001105 C0 00            [24] 3866 	push	(0+0)
      001107 C0 D0            [24] 3867 	push	psw
      001109 75 D0 00         [24] 3868 	mov	psw,#0x00
                                   3869 ;	main.c:788: EA = 0;
                                   3870 ;	assignBit
      00110C C2 AF            [12] 3871 	clr	_EA
                                   3872 ;	main.c:789: POWER_PULSE = 1;
                                   3873 ;	assignBit
      00110E D2 A7            [12] 3874 	setb	_POWER_PULSE
                                   3875 ;	main.c:790: lcd_init();
      001110 12r01r0E         [24] 3876 	lcall	_lcd_init
                                   3877 ;	main.c:791: lcd_clear();
      001113 12r00rEB         [24] 3878 	lcall	_lcd_clear
                                   3879 ;	main.c:792: lcd_goto(0,0);
      001116 75*30 00         [24] 3880 	mov	_lcd_goto_PARM_2,#0x00
      001119 75 82 00         [24] 3881 	mov	dpl, #0x00
      00111C 12r00rF7         [24] 3882 	lcall	_lcd_goto
                                   3883 ;	main.c:793: lcd_string(" <- to see TIME");
      00111F 90r00r88         [24] 3884 	mov	dptr,#___str_9
      001122 75 F0 80         [24] 3885 	mov	b, #0x80
      001125 12r00rC0         [24] 3886 	lcall	_lcd_string
                                   3887 ;	main.c:794: lcd_goto(1,1);
      001128 75*30 01         [24] 3888 	mov	_lcd_goto_PARM_2,#0x01
      00112B 75 82 01         [24] 3889 	mov	dpl, #0x01
      00112E 12r00rF7         [24] 3890 	lcall	_lcd_goto
                                   3891 ;	main.c:795: lcd_string("-> to CONFIGURE");
      001131 90r00r98         [24] 3892 	mov	dptr,#___str_10
      001134 75 F0 80         [24] 3893 	mov	b, #0x80
      001137 12r00rC0         [24] 3894 	lcall	_lcd_string
                                   3895 ;	main.c:796: idle_counter = 0;
      00113A E4               [12] 3896 	clr	a
      00113B F5*08            [12] 3897 	mov	_idle_counter,a
      00113D F5*09            [12] 3898 	mov	(_idle_counter + 1),a
                                   3899 ;	main.c:797: while(next && back){
      00113F                       3900 00104$:
      00113F 30 B6 29         [24] 3901 	jnb	_next,00106$
      001142 30 B7 26         [24] 3902 	jnb	_back,00106$
                                   3903 ;	main.c:798: if(++idle_counter>1000){
      001145 05*08            [12] 3904 	inc	_idle_counter
      001147 E4               [12] 3905 	clr	a
      001148 B5*08 02         [24] 3906 	cjne	a,_idle_counter,00214$
      00114B 05*09            [12] 3907 	inc	(_idle_counter + 1)
      00114D                       3908 00214$:
      00114D C3               [12] 3909 	clr	c
      00114E 74 E8            [12] 3910 	mov	a,#0xe8
      001150 95*08            [12] 3911 	subb	a,_idle_counter
      001152 74 03            [12] 3912 	mov	a,#0x03
      001154 95*09            [12] 3913 	subb	a,(_idle_counter + 1)
      001156 50 0B            [24] 3914 	jnc	00102$
                                   3915 ;	main.c:799: lcd_clear();
      001158 12r00rEB         [24] 3916 	lcall	_lcd_clear
                                   3917 ;	main.c:800: idle_counter = 0;
      00115B E4               [12] 3918 	clr	a
      00115C F5*08            [12] 3919 	mov	_idle_counter,a
      00115E F5*09            [12] 3920 	mov	(_idle_counter + 1),a
                                   3921 ;	main.c:801: return;
      001160 02r12r6B         [24] 3922 	ljmp	00126$
      001163                       3923 00102$:
                                   3924 ;	main.c:803: delay(500);
      001163 90 01 F4         [24] 3925 	mov	dptr,#0x01f4
      001166 12r00r00         [24] 3926 	lcall	_delay
      001169 80 D4            [24] 3927 	sjmp	00104$
      00116B                       3928 00106$:
                                   3929 ;	main.c:805: lcd_clear();
      00116B 12r00rEB         [24] 3930 	lcall	_lcd_clear
                                   3931 ;	main.c:806: if(!next){
      00116E 30 B6 03         [24] 3932 	jnb	_next,00216$
      001171 02r11rF0         [24] 3933 	ljmp	00124$
      001174                       3934 00216$:
                                   3935 ;	main.c:807: lcd_clear();
      001174 12r00rEB         [24] 3936 	lcall	_lcd_clear
                                   3937 ;	main.c:808: lcd_goto(1,0);
      001177 75*30 00         [24] 3938 	mov	_lcd_goto_PARM_2,#0x00
      00117A 75 82 01         [24] 3939 	mov	dpl, #0x01
      00117D 12r00rF7         [24] 3940 	lcall	_lcd_goto
                                   3941 ;	main.c:809: lcd_string(" Edit Mode");
      001180 90r00rA8         [24] 3942 	mov	dptr,#___str_11
      001183 75 F0 80         [24] 3943 	mov	b, #0x80
      001186 12r00rC0         [24] 3944 	lcall	_lcd_string
                                   3945 ;	main.c:810: delay(30000);
      001189 90 75 30         [24] 3946 	mov	dptr,#0x7530
      00118C 12r00r00         [24] 3947 	lcall	_delay
                                   3948 ;	main.c:811: lcd_clear();
      00118F 12r00rEB         [24] 3949 	lcall	_lcd_clear
                                   3950 ;	main.c:812: lcd_string(" <- to set ALARM");
      001192 90r00rB3         [24] 3951 	mov	dptr,#___str_12
      001195 75 F0 80         [24] 3952 	mov	b, #0x80
      001198 12r00rC0         [24] 3953 	lcall	_lcd_string
                                   3954 ;	main.c:813: lcd_goto(1,1);
      00119B 75*30 01         [24] 3955 	mov	_lcd_goto_PARM_2,#0x01
      00119E 75 82 01         [24] 3956 	mov	dpl, #0x01
      0011A1 12r00rF7         [24] 3957 	lcall	_lcd_goto
                                   3958 ;	main.c:814: lcd_string(" -> to set Clock");
      0011A4 90r00rC4         [24] 3959 	mov	dptr,#___str_13
      0011A7 75 F0 80         [24] 3960 	mov	b, #0x80
      0011AA 12r00rC0         [24] 3961 	lcall	_lcd_string
                                   3962 ;	main.c:815: idle_counter = 0;
      0011AD E4               [12] 3963 	clr	a
      0011AE F5*08            [12] 3964 	mov	_idle_counter,a
      0011B0 F5*09            [12] 3965 	mov	(_idle_counter + 1),a
                                   3966 ;	main.c:816: while(next && back){
      0011B2                       3967 00110$:
      0011B2 30 B6 24         [24] 3968 	jnb	_next,00112$
      0011B5 30 B7 21         [24] 3969 	jnb	_back,00112$
                                   3970 ;	main.c:817: if(++idle_counter>1000){
      0011B8 05*08            [12] 3971 	inc	_idle_counter
      0011BA E4               [12] 3972 	clr	a
      0011BB B5*08 02         [24] 3973 	cjne	a,_idle_counter,00219$
      0011BE 05*09            [12] 3974 	inc	(_idle_counter + 1)
      0011C0                       3975 00219$:
      0011C0 C3               [12] 3976 	clr	c
      0011C1 74 E8            [12] 3977 	mov	a,#0xe8
      0011C3 95*08            [12] 3978 	subb	a,_idle_counter
      0011C5 74 03            [12] 3979 	mov	a,#0x03
      0011C7 95*09            [12] 3980 	subb	a,(_idle_counter + 1)
      0011C9 50 06            [24] 3981 	jnc	00108$
                                   3982 ;	main.c:818: lcd_clear();
      0011CB 12r00rEB         [24] 3983 	lcall	_lcd_clear
                                   3984 ;	main.c:819: return;
      0011CE 02r12r6B         [24] 3985 	ljmp	00126$
      0011D1                       3986 00108$:
                                   3987 ;	main.c:821: delay(500);
      0011D1 90 01 F4         [24] 3988 	mov	dptr,#0x01f4
      0011D4 12r00r00         [24] 3989 	lcall	_delay
      0011D7 80 D9            [24] 3990 	sjmp	00110$
      0011D9                       3991 00112$:
                                   3992 ;	main.c:823: lcd_clear();
      0011D9 12r00rEB         [24] 3993 	lcall	_lcd_clear
                                   3994 ;	main.c:824: if(!next){
      0011DC 20 B6 06         [24] 3995 	jb	_next,00116$
                                   3996 ;	main.c:825: set_clock();
      0011DF 12r09rB0         [24] 3997 	lcall	_set_clock
      0011E2 02r12r64         [24] 3998 	ljmp	00125$
      0011E5                       3999 00116$:
                                   4000 ;	main.c:827: else if(!back){
      0011E5 30 B7 03         [24] 4001 	jnb	_back,00222$
      0011E8 02r12r64         [24] 4002 	ljmp	00125$
      0011EB                       4003 00222$:
                                   4004 ;	main.c:828: set_alarms();
      0011EB 12r0ArE8         [24] 4005 	lcall	_set_alarms
      0011EE 80 74            [24] 4006 	sjmp	00125$
      0011F0                       4007 00124$:
                                   4008 ;	main.c:831: else if(!back){
      0011F0 20 B7 71         [24] 4009 	jb	_back,00125$
                                   4010 ;	main.c:832: idle_counter = 0;
      0011F3 E4               [12] 4011 	clr	a
      0011F4 F5*08            [12] 4012 	mov	_idle_counter,a
      0011F6 F5*09            [12] 4013 	mov	(_idle_counter + 1),a
                                   4014 ;	main.c:833: while(++idle_counter<1000){
      0011F8                       4015 00118$:
      0011F8 05*08            [12] 4016 	inc	_idle_counter
      0011FA E4               [12] 4017 	clr	a
      0011FB B5*08 02         [24] 4018 	cjne	a,_idle_counter,00224$
      0011FE 05*09            [12] 4019 	inc	(_idle_counter + 1)
      001200                       4020 00224$:
      001200 C3               [12] 4021 	clr	c
      001201 E5*08            [12] 4022 	mov	a,_idle_counter
      001203 94 E8            [12] 4023 	subb	a,#0xe8
      001205 E5*09            [12] 4024 	mov	a,(_idle_counter + 1)
      001207 94 03            [12] 4025 	subb	a,#0x03
      001209 50 59            [24] 4026 	jnc	00125$
                                   4027 ;	main.c:834: ds3232_get_time_date(&h, &m, &s, &day, &d, &mo, &y);
      00120B 75*37r0B         [24] 4028 	mov	_ds3232_get_time_date_PARM_2,#_m
      00120E 75*38 00         [24] 4029 	mov	(_ds3232_get_time_date_PARM_2 + 1),#0x00
      001211 75*39 40         [24] 4030 	mov	(_ds3232_get_time_date_PARM_2 + 2),#0x40
      001214 75*3Ar0C         [24] 4031 	mov	_ds3232_get_time_date_PARM_3,#_s
      001217 75*3B 00         [24] 4032 	mov	(_ds3232_get_time_date_PARM_3 + 1),#0x00
      00121A 75*3C 40         [24] 4033 	mov	(_ds3232_get_time_date_PARM_3 + 2),#0x40
      00121D 75*3Dr10         [24] 4034 	mov	_ds3232_get_time_date_PARM_4,#_day
      001220 75*3E 00         [24] 4035 	mov	(_ds3232_get_time_date_PARM_4 + 1),#0x00
      001223 75*3F 40         [24] 4036 	mov	(_ds3232_get_time_date_PARM_4 + 2),#0x40
      001226 75*40r0D         [24] 4037 	mov	_ds3232_get_time_date_PARM_5,#_d
      001229 75*41 00         [24] 4038 	mov	(_ds3232_get_time_date_PARM_5 + 1),#0x00
      00122C 75*42 40         [24] 4039 	mov	(_ds3232_get_time_date_PARM_5 + 2),#0x40
      00122F 75*43r0E         [24] 4040 	mov	_ds3232_get_time_date_PARM_6,#_mo
      001232 75*44 00         [24] 4041 	mov	(_ds3232_get_time_date_PARM_6 + 1),#0x00
      001235 75*45 40         [24] 4042 	mov	(_ds3232_get_time_date_PARM_6 + 2),#0x40
      001238 75*46r0F         [24] 4043 	mov	_ds3232_get_time_date_PARM_7,#_y
      00123B 75*47 00         [24] 4044 	mov	(_ds3232_get_time_date_PARM_7 + 1),#0x00
      00123E 75*48 40         [24] 4045 	mov	(_ds3232_get_time_date_PARM_7 + 2),#0x40
      001241 90r00r0A         [24] 4046 	mov	dptr,#_h
      001244 75 F0 40         [24] 4047 	mov	b, #0x40
      001247 12r03r0D         [24] 4048 	lcall	_ds3232_get_time_date
                                   4049 ;	main.c:835: display(h, m, s, d, mo, y, day);
      00124A 85*0B*49         [24] 4050 	mov	_display_PARM_2,_m
      00124D 85*0C*4A         [24] 4051 	mov	_display_PARM_3,_s
      001250 85*0D*4B         [24] 4052 	mov	_display_PARM_4,_d
      001253 85*0E*4C         [24] 4053 	mov	_display_PARM_5,_mo
      001256 85*0F*4D         [24] 4054 	mov	_display_PARM_6,_y
      001259 85*10*4E         [24] 4055 	mov	_display_PARM_7,_day
      00125C 85*0A 82         [24] 4056 	mov	dpl, _h
      00125F 12r04r3C         [24] 4057 	lcall	_display
      001262 80 94            [24] 4058 	sjmp	00118$
      001264                       4059 00125$:
                                   4060 ;	main.c:838: POWER_PULSE = 0;
                                   4061 ;	assignBit
      001264 C2 A7            [12] 4062 	clr	_POWER_PULSE
                                   4063 ;	main.c:839: EA = 1;
                                   4064 ;	assignBit
      001266 D2 AF            [12] 4065 	setb	_EA
                                   4066 ;	main.c:840: PCON |= 0x02;
      001268 43 87 02         [24] 4067 	orl	_PCON,#0x02
      00126B                       4068 00126$:
                                   4069 ;	main.c:841: }
      00126B D0 D0            [24] 4070 	pop	psw
      00126D D0 00            [24] 4071 	pop	(0+0)
      00126F D0 01            [24] 4072 	pop	(0+1)
      001271 D0 02            [24] 4073 	pop	(0+2)
      001273 D0 03            [24] 4074 	pop	(0+3)
      001275 D0 04            [24] 4075 	pop	(0+4)
      001277 D0 05            [24] 4076 	pop	(0+5)
      001279 D0 06            [24] 4077 	pop	(0+6)
      00127B D0 07            [24] 4078 	pop	(0+7)
      00127D D0 83            [24] 4079 	pop	dph
      00127F D0 82            [24] 4080 	pop	dpl
      001281 D0 F0            [24] 4081 	pop	b
      001283 D0 E0            [24] 4082 	pop	acc
      001285 D0*00            [24] 4083 	pop	bits
      001287 02r00r00         [24] 4084 	ljmp	sdcc_atomic_maybe_rollback
                                   4085 ;------------------------------------------------------------
                                   4086 ;Allocation info for local variables in function 'main'
                                   4087 ;------------------------------------------------------------
                                   4088 ;checker       Allocated with name '_main_checker_10001_169'
                                   4089 ;------------------------------------------------------------
                                   4090 ;	main.c:843: void main() {
                                   4091 ;	-----------------------------------------
                                   4092 ;	 function main
                                   4093 ;	-----------------------------------------
      00128A                       4094 _main:
                                   4095 ;	main.c:844: EA  = 1;   // Enable global interrupts
                                   4096 ;	assignBit
      00128A D2 AF            [12] 4097 	setb	_EA
                                   4098 ;	main.c:845: EX0 = 1;   // Enable INT0 (P3.2)
                                   4099 ;	assignBit
      00128C D2 A8            [12] 4100 	setb	_EX0
                                   4101 ;	main.c:846: IT0 = 1;   // Set INT0 to level-triggered
                                   4102 ;	assignBit
      00128E D2 88            [12] 4103 	setb	_IT0
                                   4104 ;	main.c:847: EX1 = 1;   // Enable INT1 (P3.3)
                                   4105 ;	assignBit
      001290 D2 AA            [12] 4106 	setb	_EX1
                                   4107 ;	main.c:848: IT1 = 1;   // Set INT1 to level-triggered
                                   4108 ;	assignBit
      001292 D2 8A            [12] 4109 	setb	_IT1
                                   4110 ;	main.c:849: IP |= 0x04;
      001294 43 B8 04         [24] 4111 	orl	_IP,#0x04
                                   4112 ;	main.c:851: BUZZER = 0;
                                   4113 ;	assignBit
      001297 C2 A0            [12] 4114 	clr	_BUZZER
                                   4115 ;	main.c:852: POWER_PULSE = 1;
                                   4116 ;	assignBit
      001299 D2 A7            [12] 4117 	setb	_POWER_PULSE
                                   4118 ;	main.c:855: lcd_init();     // LCD init
      00129B 12r01r0E         [24] 4119 	lcall	_lcd_init
                                   4120 ;	main.c:856: i2c_init();     // I2C init
      00129E 12r01rA9         [24] 4121 	lcall	_i2c_init
                                   4122 ;	main.c:857: ds3232_init();  // DS3232 RTC init
      0012A1 12r02r9F         [24] 4123 	lcall	_ds3232_init
                                   4124 ;	main.c:860: checker[0] = read_eeprom(0x003B);
      0012A4 90 00 3B         [24] 4125 	mov	dptr,#0x003b
      0012A7 12r06r35         [24] 4126 	lcall	_read_eeprom
      0012AA E5 82            [12] 4127 	mov	a, dpl
      0012AC F5*5A            [12] 4128 	mov	_main_checker_10001_169,a
                                   4129 ;	main.c:861: checker[1] = read_eeprom(0x003C);
      0012AE 90 00 3C         [24] 4130 	mov	dptr,#0x003c
      0012B1 12r06r35         [24] 4131 	lcall	_read_eeprom
      0012B4 E5 82            [12] 4132 	mov	a, dpl
      0012B6 F5*5B            [12] 4133 	mov	(_main_checker_10001_169 + 0x0001),a
                                   4134 ;	main.c:862: checker[2] = read_eeprom(0x003D);
      0012B8 90 00 3D         [24] 4135 	mov	dptr,#0x003d
      0012BB 12r06r35         [24] 4136 	lcall	_read_eeprom
      0012BE E5 82            [12] 4137 	mov	a, dpl
      0012C0 F5*5C            [12] 4138 	mov	(_main_checker_10001_169 + 0x0002),a
                                   4139 ;	main.c:863: checker[3] = read_eeprom(0x003E);
      0012C2 90 00 3E         [24] 4140 	mov	dptr,#0x003e
      0012C5 12r06r35         [24] 4141 	lcall	_read_eeprom
      0012C8 E5 82            [12] 4142 	mov	a, dpl
      0012CA F5*5D            [12] 4143 	mov	(_main_checker_10001_169 + 0x0003),a
                                   4144 ;	main.c:864: if(!(checker[0] == 'I' && checker[1] == 'N' && checker[2] == 'I' && checker[3] == 'T')){
      0012CC 74 49            [12] 4145 	mov	a,#0x49
      0012CE B5*5A 12         [24] 4146 	cjne	a,_main_checker_10001_169,00101$
      0012D1 74 4E            [12] 4147 	mov	a,#0x4e
      0012D3 B5*5B 0D         [24] 4148 	cjne	a,(_main_checker_10001_169 + 0x0001),00101$
      0012D6 74 49            [12] 4149 	mov	a,#0x49
      0012D8 B5*5C 08         [24] 4150 	cjne	a,(_main_checker_10001_169 + 0x0002),00101$
      0012DB 74 54            [12] 4151 	mov	a,#0x54
      0012DD B5*5D 03         [24] 4152 	cjne	a,(_main_checker_10001_169 + 0x0003),00142$
      0012E0 02r13r48         [24] 4153 	ljmp	00102$
      0012E3                       4154 00142$:
      0012E3                       4155 00101$:
                                   4156 ;	main.c:865: lcd_clear();
      0012E3 12r00rEB         [24] 4157 	lcall	_lcd_clear
                                   4158 ;	main.c:866: set_alarms();
      0012E6 12r0ArE8         [24] 4159 	lcall	_set_alarms
                                   4160 ;	main.c:867: lcd_init();
      0012E9 12r01r0E         [24] 4161 	lcall	_lcd_init
                                   4162 ;	main.c:868: lcd_cmd(0x80);
      0012EC 75 82 80         [24] 4163 	mov	dpl, #0x80
      0012EF 12r00r7E         [24] 4164 	lcall	_lcd_cmd
                                   4165 ;	main.c:869: write_eeprom(0x003B, 'I');
      0012F2 75*4F 49         [24] 4166 	mov	_write_eeprom_PARM_2,#0x49
      0012F5 90 00 3B         [24] 4167 	mov	dptr,#0x003b
      0012F8 12r05rF5         [24] 4168 	lcall	_write_eeprom
                                   4169 ;	main.c:870: write_eeprom(0x003C, 'N');
      0012FB 75*4F 4E         [24] 4170 	mov	_write_eeprom_PARM_2,#0x4e
      0012FE 90 00 3C         [24] 4171 	mov	dptr,#0x003c
      001301 12r05rF5         [24] 4172 	lcall	_write_eeprom
                                   4173 ;	main.c:871: write_eeprom(0x003D, 'I');
      001304 75*4F 49         [24] 4174 	mov	_write_eeprom_PARM_2,#0x49
      001307 90 00 3D         [24] 4175 	mov	dptr,#0x003d
      00130A 12r05rF5         [24] 4176 	lcall	_write_eeprom
                                   4177 ;	main.c:872: write_eeprom(0x003E, 'T');
      00130D 75*4F 54         [24] 4178 	mov	_write_eeprom_PARM_2,#0x54
      001310 90 00 3E         [24] 4179 	mov	dptr,#0x003e
      001313 12r05rF5         [24] 4180 	lcall	_write_eeprom
                                   4181 ;	main.c:873: write_eeprom(0x003F, 0x0);
      001316 75*4F 00         [24] 4182 	mov	_write_eeprom_PARM_2,#0x00
      001319 90 00 3F         [24] 4183 	mov	dptr,#0x003f
      00131C 12r05rF5         [24] 4184 	lcall	_write_eeprom
                                   4185 ;	main.c:874: write_eeprom(0x003A, 0x0);
      00131F 75*4F 00         [24] 4186 	mov	_write_eeprom_PARM_2,#0x00
      001322 90 00 3A         [24] 4187 	mov	dptr,#0x003a
      001325 12r05rF5         [24] 4188 	lcall	_write_eeprom
                                   4189 ;	main.c:875: lcd_clear();
      001328 12r00rEB         [24] 4190 	lcall	_lcd_clear
                                   4191 ;	main.c:876: lcd_goto(0,0);
      00132B 75*30 00         [24] 4192 	mov	_lcd_goto_PARM_2,#0x00
      00132E 75 82 00         [24] 4193 	mov	dpl, #0x00
      001331 12r00rF7         [24] 4194 	lcall	_lcd_goto
                                   4195 ;	main.c:877: lcd_string(" NOW INIT");
      001334 90r00rD5         [24] 4196 	mov	dptr,#___str_14
      001337 75 F0 80         [24] 4197 	mov	b, #0x80
      00133A 12r00rC0         [24] 4198 	lcall	_lcd_string
                                   4199 ;	main.c:878: delay(30000);
      00133D 90 75 30         [24] 4200 	mov	dptr,#0x7530
      001340 12r00r00         [24] 4201 	lcall	_delay
                                   4202 ;	main.c:879: lcd_clear();
      001343 12r00rEB         [24] 4203 	lcall	_lcd_clear
      001346 80 1E            [24] 4204 	sjmp	00103$
      001348                       4205 00102$:
                                   4206 ;	main.c:883: lcd_clear();
      001348 12r00rEB         [24] 4207 	lcall	_lcd_clear
                                   4208 ;	main.c:884: lcd_goto(0,0);
      00134B 75*30 00         [24] 4209 	mov	_lcd_goto_PARM_2,#0x00
      00134E 75 82 00         [24] 4210 	mov	dpl, #0x00
      001351 12r00rF7         [24] 4211 	lcall	_lcd_goto
                                   4212 ;	main.c:885: lcd_string(" PREV INIT");
      001354 90r00rDF         [24] 4213 	mov	dptr,#___str_15
      001357 75 F0 80         [24] 4214 	mov	b, #0x80
      00135A 12r00rC0         [24] 4215 	lcall	_lcd_string
                                   4216 ;	main.c:886: delay(30000);
      00135D 90 75 30         [24] 4217 	mov	dptr,#0x7530
      001360 12r00r00         [24] 4218 	lcall	_delay
                                   4219 ;	main.c:887: lcd_clear();
      001363 12r00rEB         [24] 4220 	lcall	_lcd_clear
      001366                       4221 00103$:
                                   4222 ;	main.c:889: POWER_PULSE = 0;
                                   4223 ;	assignBit
      001366 C2 A7            [12] 4224 	clr	_POWER_PULSE
                                   4225 ;	main.c:890: PCON |= 0x02;
      001368 43 87 02         [24] 4226 	orl	_PCON,#0x02
                                   4227 ;	main.c:891: while(1);
      00136B                       4228 00108$:
                                   4229 ;	main.c:892: }
      00136B 80 FE            [24] 4230 	sjmp	00108$
                                   4231 	.area CSEG    (CODE)
                                   4232 	.area CONST   (CODE)
                                   4233 	.area CONST   (CODE)
      000000                       4234 ___str_0:
      000000 20 48 6F 77 20 6D 61  4235 	.ascii " How many alarms"
             6E 79 20 61 6C 61 72
             6D 73
      000010 00                    4236 	.db 0x00
                                   4237 	.area CSEG    (CODE)
                                   4238 	.area CONST   (CODE)
      000011                       4239 ___str_1:
      000011 20 54 69 6D 65 20 6C  4240 	.ascii " Time limit exc!"
             69 6D 69 74 20 65 78
             63 21
      000021 00                    4241 	.db 0x00
                                   4242 	.area CSEG    (CODE)
                                   4243 	.area CONST   (CODE)
      000022                       4244 ___str_2:
      000022 20 53 65 74 20 48 6F  4245 	.ascii " Set Hour Alarm "
             75 72 20 41 6C 61 72
             6D 20
      000032 00                    4246 	.db 0x00
                                   4247 	.area CSEG    (CODE)
                                   4248 	.area CONST   (CODE)
      000033                       4249 ___str_3:
      000033 41 6C 61 72 6D 20     4250 	.ascii "Alarm "
      000039 00                    4251 	.db 0x00
                                   4252 	.area CSEG    (CODE)
                                   4253 	.area CONST   (CODE)
      00003A                       4254 ___str_4:
      00003A 20 53 65 74 20 4D 69  4255 	.ascii " Set Min Alarm "
             6E 20 41 6C 61 72 6D
             20
      000049 00                    4256 	.db 0x00
                                   4257 	.area CSEG    (CODE)
                                   4258 	.area CONST   (CODE)
      00004A                       4259 ___str_5:
      00004A 20 41 6C 61 72 6D 20  4260 	.ascii " Alarm Saved"
             53 61 76 65 64
      000056 00                    4261 	.db 0x00
                                   4262 	.area CSEG    (CODE)
                                   4263 	.area CONST   (CODE)
      000057                       4264 ___str_6:
      000057 20 41 6C 6C 20 41 6C  4265 	.ascii " All Alarms Saved"
             61 72 6D 73 20 53 61
             76 65 64
      000068 00                    4266 	.db 0x00
                                   4267 	.area CSEG    (CODE)
                                   4268 	.area CONST   (CODE)
      000069                       4269 ___str_7:
      000069 20 41 6C 61 72 6D 20  4270 	.ascii " Alarm Triggered"
             54 72 69 67 67 65 72
             65 64
      000079 00                    4271 	.db 0x00
                                   4272 	.area CSEG    (CODE)
                                   4273 	.area CONST   (CODE)
      00007A                       4274 ___str_8:
      00007A 54 61 6B 65 20 4D 65  4275 	.ascii "Take Medicine"
             64 69 63 69 6E 65
      000087 00                    4276 	.db 0x00
                                   4277 	.area CSEG    (CODE)
                                   4278 	.area CONST   (CODE)
      000088                       4279 ___str_9:
      000088 20 3C 2D 20 74 6F 20  4280 	.ascii " <- to see TIME"
             73 65 65 20 54 49 4D
             45
      000097 00                    4281 	.db 0x00
                                   4282 	.area CSEG    (CODE)
                                   4283 	.area CONST   (CODE)
      000098                       4284 ___str_10:
      000098 2D 3E 20 74 6F 20 43  4285 	.ascii "-> to CONFIGURE"
             4F 4E 46 49 47 55 52
             45
      0000A7 00                    4286 	.db 0x00
                                   4287 	.area CSEG    (CODE)
                                   4288 	.area CONST   (CODE)
      0000A8                       4289 ___str_11:
      0000A8 20 45 64 69 74 20 4D  4290 	.ascii " Edit Mode"
             6F 64 65
      0000B2 00                    4291 	.db 0x00
                                   4292 	.area CSEG    (CODE)
                                   4293 	.area CONST   (CODE)
      0000B3                       4294 ___str_12:
      0000B3 20 3C 2D 20 74 6F 20  4295 	.ascii " <- to set ALARM"
             73 65 74 20 41 4C 41
             52 4D
      0000C3 00                    4296 	.db 0x00
                                   4297 	.area CSEG    (CODE)
                                   4298 	.area CONST   (CODE)
      0000C4                       4299 ___str_13:
      0000C4 20 2D 3E 20 74 6F 20  4300 	.ascii " -> to set Clock"
             73 65 74 20 43 6C 6F
             63 6B
      0000D4 00                    4301 	.db 0x00
                                   4302 	.area CSEG    (CODE)
                                   4303 	.area CONST   (CODE)
      0000D5                       4304 ___str_14:
      0000D5 20 4E 4F 57 20 49 4E  4305 	.ascii " NOW INIT"
             49 54
      0000DE 00                    4306 	.db 0x00
                                   4307 	.area CSEG    (CODE)
                                   4308 	.area CONST   (CODE)
      0000DF                       4309 ___str_15:
      0000DF 20 50 52 45 56 20 49  4310 	.ascii " PREV INIT"
             4E 49 54
      0000E9 00                    4311 	.db 0x00
                                   4312 	.area CSEG    (CODE)
                                   4313 	.area XINIT   (CODE)
                                   4314 	.area CABS    (ABS,CODE)
